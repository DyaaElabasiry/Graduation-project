
Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc0  08001cc0  00011cc8  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc0  08001cc0  00011cc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc0  08001cc8  00011cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc4  08001cc4  00011cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  08001cc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001cc8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011cc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000283e  00000000  00000000  00011cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c76  00000000  00000000  00014536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  000151b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  000154f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e22  00000000  00000000  00015798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bff  00000000  00000000  000165ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006ee0  00000000  00000000  000181b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd4  00000000  00000000  0001f0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001c94 	.word	0x08001c94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001c94 	.word	0x08001c94

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <RCC_voidSystemClockInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSystemClockInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

    /******************MCO1,2 Prescaler*************/
  	RCC->CFGR|=(Microcontroller_Clk1_Prescaler<<RCC_CFGR_MCO1PRE0);
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009c2:	6093      	str	r3, [r2, #8]
	RCC->CFGR|=(Microcontroller_Clk2_Prescaler<<RCC_CFGR_MCO2PRE0);
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009ce:	6093      	str	r3, [r2, #8]

    /******************MCO1,2 Source Selection*************/
	RCC->CFGR|=(Microcontroller_Clk_Output1<<RCC_CFGR_MCO10);
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009da:	6093      	str	r3, [r2, #8]
  	RCC->CFGR|=(Microcontroller_Clk_Output2<<RCC_CFGR_MCO20);
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	6093      	str	r3, [r2, #8]


    /*************** Clock Security System ***************/
  	RCC->CR|=(RCC_u8CSSON<<RCC_CR_CSSON);
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ee:	6013      	str	r3, [r2, #0]

	/*************** Clock Source Switch ***************/
  	RCC->CFGR|=(System_Clk_Source<<RCC_CFGR_SW0);
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	6093      	str	r3, [r2, #8]

	/****************** AHB Prescaler ******************/
  	RCC->CFGR|=(RCC_u8AHB_PRESCALER<<RCC_CFGR_HPRE0);
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	6093      	str	r3, [r2, #8]


	/****************** APB1 Prescaler ******************/
  	RCC->CFGR|=(RCC_u8APB1_PRESCALER<<RCC_CFGR_PPRE10);
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000a0a:	6093      	str	r3, [r2, #8]
	/****************** APB2 Prescaler ******************/
	
  	RCC->CFGR|=(RCC_u8APB2_PRESCALER<<RCC_CFGR_PPRE20);
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	6093      	str	r3, [r2, #8]

	#endif
	
	#if RCC_u8HSEON_Mode==RCC_u8Clk_Enable
	/*************** Clock By Pass Enable ***************/
  	RCC->CR|=(RCC_u8HSEPYB<<RCC_CR_HSEBYP);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6013      	str	r3, [r2, #0]
  	RCC->CR|=(RCC_u8HSEON_Mode<<RCC_CR_HSEON);
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSIRDY));
 8000a28:	bf00      	nop
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a2c:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable
  	RCC->CR|=(RCC_u8HSION_Mode<<RCC_CR_HSION);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSERDY));
 8000a3a:	bf00      	nop
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <RCC_voidSystemClockInit+0x98>)
 8000a3e:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <RCC_voidPeripheralClockEnable>:
  
u8	RCC_voidPeripheralClockEnable(u8 RCC_u8CopyBus,Peripherals_t RCC_u8CopyPeripheral)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	460a      	mov	r2, r1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPeripheral<32)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b1f      	cmp	r3, #31
 8000a68:	d83d      	bhi.n	8000ae6 <RCC_voidPeripheralClockEnable+0x96>
	{
		switch(RCC_u8CopyBus)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d837      	bhi.n	8000ae0 <RCC_voidPeripheralClockEnable+0x90>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <RCC_voidPeripheralClockEnable+0x28>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a89 	.word	0x08000a89
 8000a7c:	08000a9f 	.word	0x08000a9f
 8000a80:	08000ab5 	.word	0x08000ab5
 8000a84:	08000acb 	.word	0x08000acb
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR,RCC_u8CopyPeripheral);break;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	79ba      	ldrb	r2, [r7, #6]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	e025      	b.n	8000aea <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR,RCC_u8CopyPeripheral);break;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ab2:	e01a      	b.n	8000aea <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR,RCC_u8CopyPeripheral);break;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	2101      	movs	r1, #1
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	e00f      	b.n	8000aea <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR,RCC_u8CopyPeripheral);break;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <RCC_voidPeripheralClockEnable+0xa8>)
 8000ada:	430b      	orrs	r3, r1
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	e004      	b.n	8000aea <RCC_voidPeripheralClockEnable+0x9a>
			default : Local_u8Error =NOK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <RCC_voidPeripheralClockEnable+0x9a>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <GPIO_SetPinValue>:
#include "GPIO_interface.h"
#include "GPIO_private.h"


u8  GPIO_SetPinValue(u8 Copy_u8Port,Pins_t Copy_u8Pin, u8 Copy_u8Value)
{	
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	460b      	mov	r3, r1
 8000b08:	71bb      	strb	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState=FALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
	if ((Copy_u8Pin < GPIO_u8NumOfPins)&&(Copy_u8Port < GPIO_u8NumOfPorts))
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d841      	bhi.n	8000b9c <GPIO_SetPinValue+0xa0>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d83e      	bhi.n	8000b9c <GPIO_SetPinValue+0xa0>
	{
		switch(Copy_u8Port)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d028      	beq.n	8000b76 <GPIO_SetPinValue+0x7a>
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	dc37      	bgt.n	8000b98 <GPIO_SetPinValue+0x9c>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <GPIO_SetPinValue+0x36>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d011      	beq.n	8000b54 <GPIO_SetPinValue+0x58>
 8000b30:	e032      	b.n	8000b98 <GPIO_SetPinValue+0x9c>
		{ case GPIO_PORTA: ASSIGN_BIT(REG_GPIO_PORTA->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <GPIO_SetPinValue+0xb0>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	43d2      	mvns	r2, r2
 8000b40:	4013      	ands	r3, r2
 8000b42:	7979      	ldrb	r1, [r7, #5]
 8000b44:	79ba      	ldrb	r2, [r7, #6]
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a17      	ldr	r2, [pc, #92]	; (8000bac <GPIO_SetPinValue+0xb0>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	e021      	b.n	8000b98 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTB: ASSIGN_BIT(REG_GPIO_PORTB->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <GPIO_SetPinValue+0xb4>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	79ba      	ldrb	r2, [r7, #6]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	4013      	ands	r3, r2
 8000b64:	7979      	ldrb	r1, [r7, #5]
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <GPIO_SetPinValue+0xb4>)
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6153      	str	r3, [r2, #20]
 8000b74:	e010      	b.n	8000b98 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTC: ASSIGN_BIT(REG_GPIO_PORTC->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <GPIO_SetPinValue+0xb8>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	43d2      	mvns	r2, r2
 8000b84:	4013      	ands	r3, r2
 8000b86:	7979      	ldrb	r1, [r7, #5]
 8000b88:	79ba      	ldrb	r2, [r7, #6]
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <GPIO_SetPinValue+0xb8>)
 8000b92:	430b      	orrs	r3, r1
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	bf00      	nop
		}
	   Local_u8ErrorState=TRUE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
	   
	}
		
	return Local_u8ErrorState;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <EXTI0_IRQHandler>:
{
	EXTI_CallBack[(copy_EXTILine->EXTI_LINE_NUM)] = Copy_pvCallBackFunc;
}

void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line0]();
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <EXTI0_IRQHandler+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line0);
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <EXTI0_IRQHandler+0x20>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <EXTI0_IRQHandler+0x20>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6153      	str	r3, [r2, #20]
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000001c 	.word	0x2000001c
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line1]();
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <EXTI1_IRQHandler+0x1c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line1);
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <EXTI1_IRQHandler+0x20>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <EXTI1_IRQHandler+0x20>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6153      	str	r3, [r2, #20]
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000001c 	.word	0x2000001c
 8000bfc:	40013c00 	.word	0x40013c00

08000c00 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line2]();
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <EXTI2_IRQHandler+0x1c>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line2);
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <EXTI2_IRQHandler+0x20>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <EXTI2_IRQHandler+0x20>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6153      	str	r3, [r2, #20]
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000001c 	.word	0x2000001c
 8000c20:	40013c00 	.word	0x40013c00

08000c24 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line3]();
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <EXTI3_IRQHandler+0x1c>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line3);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <EXTI3_IRQHandler+0x20>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <EXTI3_IRQHandler+0x20>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6153      	str	r3, [r2, #20]
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000001c 	.word	0x2000001c
 8000c44:	40013c00 	.word	0x40013c00

08000c48 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line4]();
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <EXTI4_IRQHandler+0x1c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line4);
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <EXTI4_IRQHandler+0x20>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <EXTI4_IRQHandler+0x20>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6153      	str	r3, [r2, #20]
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000001c 	.word	0x2000001c
 8000c68:	40013c00 	.word	0x40013c00

08000c6c <NVIC_voidEnableInterrupt>:
#include"NVIC_interface.h"

static u32 GlobalStatic_32GroupConfig;

void NVIC_voidEnableInterrupt(INT_PRIO_t Copy_u8InterruptPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	Copy_u8InterruptPriority-=7;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3b07      	subs	r3, #7
 8000c7a:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[Copy_u8InterruptPriority / 32] = 1 << (Copy_u8InterruptPriority % 32);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2201      	movs	r2, #1
 8000c84:	fa02 f103 	lsl.w	r1, r2, r3
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <NVIC_voidEnableInterrupt+0x34>)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	095b      	lsrs	r3, r3, #5
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <SysTick_Handler>:
    return Elapsed_Time_Millis;

}


void SysTick_Handler(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

	u8 Local_u8Temporary;

	if(STK_u8ModeOFInterval == STK_SINGLE_INTERVAL)
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SysTick_Handler+0x50>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d111      	bne.n	8000cd6 <SysTick_Handler+0x32>
	{
		/*Disable Systick Interrupt*/
		CLEAR_BIT(STK->CTRL, TICKINT);
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cb8:	f023 0302 	bic.w	r3, r3, #2
 8000cbc:	6013      	str	r3, [r2, #0]

		/*Stop Timer*/
		CLEAR_BIT(STK->CTRL, ENABLE);
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	6013      	str	r3, [r2, #0]

		/*Clear LOAD , VAL Registers to stop reload*/
		STK->LOAD=0;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <SysTick_Handler+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]


	}

	/*Call Back Notification*/
	STK_CallBack();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <SysTick_Handler+0x58>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4798      	blx	r3

	/*Clear Interrupt Flag by Reading it*/
	Local_u8Temporary=GET_BIT(STK->CTRL, COUNTFLAG);
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SysTick_Handler+0x54>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000060 	.word	0x20000060
 8000cf8:	e000e010 	.word	0xe000e010
 8000cfc:	2000005c 	.word	0x2000005c

08000d00 <USART_voidInit>:
void (*USART1_CallBack)(void);
void (*USART2_CallBack)(void);
void (*USART6_CallBack)(void);

void USART_voidInit(USART_InitType *A_InitStruct,USART_ClockInitTypeDef *A_ClockInitStruct,USART_t *USARTx)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	/* Set the Baud Rate */
	USARTx->BRR = A_InitStruct->BaudRate;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]


	USARTx->CR1 = (A_InitStruct->Oversampling << USART_CR1_OVER8)    |
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	7a5b      	ldrb	r3, [r3, #9]
 8000d18:	03da      	lsls	r2, r3, #15
			(A_InitStruct->DataWidth <<USART_CR1_M)                  |
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	791b      	ldrb	r3, [r3, #4]
 8000d1e:	031b      	lsls	r3, r3, #12
	USARTx->CR1 = (A_InitStruct->Oversampling << USART_CR1_OVER8)    |
 8000d20:	431a      	orrs	r2, r3
			(A_InitStruct->Parity_Enable <<USART_CR1_PCE)            |
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	799b      	ldrb	r3, [r3, #6]
 8000d26:	029b      	lsls	r3, r3, #10
			(A_InitStruct->DataWidth <<USART_CR1_M)                  |
 8000d28:	431a      	orrs	r2, r3
			(A_InitStruct->Parity_Selection <<USART_CR1_PS)          ;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	79db      	ldrb	r3, [r3, #7]
 8000d2e:	025b      	lsls	r3, r3, #9
			(A_InitStruct->Parity_Enable <<USART_CR1_PCE)            |
 8000d30:	4313      	orrs	r3, r2
 8000d32:	461a      	mov	r2, r3
	USARTx->CR1 = (A_InitStruct->Oversampling << USART_CR1_OVER8)    |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]

	switch (A_InitStruct->TransferDirection)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d014      	beq.n	8000d6a <USART_voidInit+0x6a>
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	dc1f      	bgt.n	8000d84 <USART_voidInit+0x84>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <USART_voidInit+0x4e>
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d007      	beq.n	8000d5c <USART_voidInit+0x5c>
 8000d4c:	e01a      	b.n	8000d84 <USART_voidInit+0x84>
	{
	case USART_TX:               SET_BIT(USARTx->CR1, USART_CR1_TE); break;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f043 0208 	orr.w	r2, r3, #8
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	e013      	b.n	8000d84 <USART_voidInit+0x84>
	case USART_RX:               SET_BIT(USARTx->CR1, USART_CR1_RE); break;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	f043 0204 	orr.w	r2, r3, #4
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	e00c      	b.n	8000d84 <USART_voidInit+0x84>
	case USART_TX_RX:            SET_BIT(USARTx->CR1, USART_CR1_TE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f043 0208 	orr.w	r2, r3, #8
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
	                             SET_BIT(USARTx->CR1, USART_CR1_RE); break;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f043 0204 	orr.w	r2, r3, #4
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	bf00      	nop
	}

	USARTx->CR2 =  (A_InitStruct->StopBits<<USART_CR2_STOP)	         |
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	031a      	lsls	r2, r3, #12
			(A_ClockInitStruct->ClockOutput <<USART_CR2_CLKEN)       |
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	02db      	lsls	r3, r3, #11
	USARTx->CR2 =  (A_InitStruct->StopBits<<USART_CR2_STOP)	         |
 8000d90:	431a      	orrs	r2, r3
			(A_ClockInitStruct->ClockPhase <<USART_CR2_CPHA)         |
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	025b      	lsls	r3, r3, #9
			(A_ClockInitStruct->ClockOutput <<USART_CR2_CLKEN)       |
 8000d98:	431a      	orrs	r2, r3
			(A_ClockInitStruct->ClockPolarity <<USART_CR2_CPOL)      ;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	029b      	lsls	r3, r3, #10
			(A_ClockInitStruct->ClockPhase <<USART_CR2_CPHA)         |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	461a      	mov	r2, r3
	USARTx->CR2 =  (A_InitStruct->StopBits<<USART_CR2_STOP)	         |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]

	/*    USART ENABLE */
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60da      	str	r2, [r3, #12]

}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <USART_voidSendByte>:


void USART_voidSendByte(USART_t *USARTx,u8 Copy_u8Data)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	/* wait until transmission data is empty */
	while(GET_BIT(USARTx->SR, USART_SR_TXE) == 0);
 8000dcc:	bf00      	nop
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f9      	beq.n	8000dce <USART_voidSendByte+0xe>

	/* put data to data register this step will clear the TXE flag */
	USARTx->DR = Copy_u8Data;
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	605a      	str	r2, [r3, #4]

	/* wait until transmission is complete */
	while(GET_BIT(USARTx->SR, USART_SR_TC) == 0);
 8000de0:	bf00      	nop
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <USART_voidSendByte+0x22>

	/* clear TC flag */
	CLEAR_BIT(USARTx->SR, USART_SR_TC);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <USART_voidSendString>:



void USART_voidSendString (USART_t *USARTx, u8* A_ptru8String )
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
	/*Iterator to iterate over the string*/
	u8 local_u8Iterator =0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

	/*while the string is not End*/
	while (A_ptru8String[local_u8Iterator] != '\0')
 8000e14:	e00a      	b.n	8000e2c <USART_voidSendString+0x26>
	{
		/*send string byte by byte*/
		USART_voidSendByte(USARTx, A_ptru8String[local_u8Iterator]);
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffcd 	bl	8000dc0 <USART_voidSendByte>
		local_u8Iterator++;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
	while (A_ptru8String[local_u8Iterator] != '\0')
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1ee      	bne.n	8000e16 <USART_voidSendString+0x10>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <USART1_IRQHandler>:
{
	USART6_CallBack = ptr ;
}

void USART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	USART_1 -> SR = 0 ;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <USART1_IRQHandler+0x14>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	USART1_CallBack();
 8000e4e:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <USART1_IRQHandler+0x18>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4798      	blx	r3
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	20000064 	.word	0x20000064

08000e60 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	USART_2 -> SR = 0 ;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <USART2_IRQHandler+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	USART2_CallBack();
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <USART2_IRQHandler+0x18>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4798      	blx	r3
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004400 	.word	0x40004400
 8000e78:	20000068 	.word	0x20000068

08000e7c <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	USART_6 -> SR = 0 ;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <USART6_IRQHandler+0x14>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
	USART6_CallBack();
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <USART6_IRQHandler+0x18>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40011400 	.word	0x40011400
 8000e94:	2000006c 	.word	0x2000006c

08000e98 <MTimer_voidInit>:
static void(*Timer2_CallBack_PTR)(void);
static void(*Timer3_CallBack_PTR)(void);
static void(*Timer4_CallBack_PTR)(void);

void MTimer_voidInit(u8 Copy_u8TimerNum, u8 Copy_u8TimerMode, u16 Copy_u16TimerPreScaler, u16 Copy_u16TimerARRValue)
{
 8000e98:	b490      	push	{r4, r7}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71bb      	strb	r3, [r7, #6]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	807b      	strh	r3, [r7, #2]
	/* Selecting Which Timer Will Operate*/
	if(Copy_u8TimerNum == TIM1)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d12c      	bne.n	8000f16 <MTimer_voidInit+0x7e>
	{
		/* Select Timer 1 */
		//TIMERx = (volatile TIM1_t*) TIMER1_BASE_ADDRESS;
		
		/* Select Timer Mode */
		if(Copy_u8TimerMode == UPCOUNTING_MODE)
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d112      	bne.n	8000ee8 <MTimer_voidInit+0x50>
		{
			/* SET UPCOUNTING_MODE */
			CLEAR_BIT(TIMER1->CR1, 4);
 8000ec2:	4b75      	ldr	r3, [pc, #468]	; (8001098 <MTimer_voidInit+0x200>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a74      	ldr	r2, [pc, #464]	; (8001098 <MTimer_voidInit+0x200>)
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	6013      	str	r3, [r2, #0]
			
			/* SET PRESCALER */
			TIMER1->PSC = Copy_u16TimerPreScaler;
 8000ece:	4a72      	ldr	r2, [pc, #456]	; (8001098 <MTimer_voidInit+0x200>)
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	6293      	str	r3, [r2, #40]	; 0x28
			
			/* SET ARR VALUE */
			TIMER1->ARR = Copy_u16TimerARRValue;
 8000ed4:	4a70      	ldr	r2, [pc, #448]	; (8001098 <MTimer_voidInit+0x200>)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
			
			/* ENABLE TIMER */
			SET_BIT(TIMER1->CR1, 0);
 8000eda:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <MTimer_voidInit+0x200>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6e      	ldr	r2, [pc, #440]	; (8001098 <MTimer_voidInit+0x200>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6013      	str	r3, [r2, #0]
		{
			
		}
	}
	
}
 8000ee6:	e0d1      	b.n	800108c <MTimer_voidInit+0x1f4>
		else if(Copy_u8TimerMode ==  DOWNCOUNTING_MODE)
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 80ce 	bne.w	800108c <MTimer_voidInit+0x1f4>
			SET_BIT(TIMER1->CR1, 4);
 8000ef0:	4b69      	ldr	r3, [pc, #420]	; (8001098 <MTimer_voidInit+0x200>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a68      	ldr	r2, [pc, #416]	; (8001098 <MTimer_voidInit+0x200>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
			TIMER1->PSC = Copy_u16TimerPreScaler;
 8000efc:	4a66      	ldr	r2, [pc, #408]	; (8001098 <MTimer_voidInit+0x200>)
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	6293      	str	r3, [r2, #40]	; 0x28
			TIMER1->ARR = Copy_u16TimerARRValue;
 8000f02:	4a65      	ldr	r2, [pc, #404]	; (8001098 <MTimer_voidInit+0x200>)
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	62d3      	str	r3, [r2, #44]	; 0x2c
			SET_BIT(TIMER1->CR1, 0);
 8000f08:	4b63      	ldr	r3, [pc, #396]	; (8001098 <MTimer_voidInit+0x200>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a62      	ldr	r2, [pc, #392]	; (8001098 <MTimer_voidInit+0x200>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	e0ba      	b.n	800108c <MTimer_voidInit+0x1f4>
	else if(Copy_u8TimerNum == TIM2)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d13c      	bne.n	8000f96 <MTimer_voidInit+0xfe>
		TIMERx = (volatile TIMER_t*) TIMER2_BASE_ADDRESS;
 8000f1c:	4b5f      	ldr	r3, [pc, #380]	; (800109c <MTimer_voidInit+0x204>)
 8000f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f22:	601a      	str	r2, [r3, #0]
		if(Copy_u8TimerMode == UPCOUNTING_MODE)
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <MTimer_voidInit+0xc4>
			CLEAR_BIT(TIMERx->CR1, 4);
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <MTimer_voidInit+0x204>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b5a      	ldr	r3, [pc, #360]	; (800109c <MTimer_voidInit+0x204>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0210 	bic.w	r2, r2, #16
 8000f38:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 8000f3a:	4b58      	ldr	r3, [pc, #352]	; (800109c <MTimer_voidInit+0x204>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 8000f42:	4b56      	ldr	r3, [pc, #344]	; (800109c <MTimer_voidInit+0x204>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <MTimer_voidInit+0x204>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b52      	ldr	r3, [pc, #328]	; (800109c <MTimer_voidInit+0x204>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	e097      	b.n	800108c <MTimer_voidInit+0x1f4>
		else if(Copy_u8TimerMode ==  DOWNCOUNTING_MODE)
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	f040 8094 	bne.w	800108c <MTimer_voidInit+0x1f4>
			SET_BIT(TIMERx->CR1, 4);
 8000f64:	4b4d      	ldr	r3, [pc, #308]	; (800109c <MTimer_voidInit+0x204>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	; (800109c <MTimer_voidInit+0x204>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0210 	orr.w	r2, r2, #16
 8000f72:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 8000f74:	4b49      	ldr	r3, [pc, #292]	; (800109c <MTimer_voidInit+0x204>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	88ba      	ldrh	r2, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <MTimer_voidInit+0x204>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 8000f84:	4b45      	ldr	r3, [pc, #276]	; (800109c <MTimer_voidInit+0x204>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <MTimer_voidInit+0x204>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	e07a      	b.n	800108c <MTimer_voidInit+0x1f4>
	else if(Copy_u8TimerNum == TIM3)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d13a      	bne.n	8001012 <MTimer_voidInit+0x17a>
		TIMERx = (volatile TIMER_t*)TIMER3_BASE_ADDRESS;
 8000f9c:	4b3f      	ldr	r3, [pc, #252]	; (800109c <MTimer_voidInit+0x204>)
 8000f9e:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <MTimer_voidInit+0x208>)
 8000fa0:	601a      	str	r2, [r3, #0]
		if(Copy_u8TimerMode == UPCOUNTING_MODE)
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d118      	bne.n	8000fda <MTimer_voidInit+0x142>
			CLEAR_BIT(TIMERx->CR1, 4);
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <MTimer_voidInit+0x204>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <MTimer_voidInit+0x204>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0210 	bic.w	r2, r2, #16
 8000fb6:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <MTimer_voidInit+0x204>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <MTimer_voidInit+0x204>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	887a      	ldrh	r2, [r7, #2]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <MTimer_voidInit+0x204>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <MTimer_voidInit+0x204>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	e058      	b.n	800108c <MTimer_voidInit+0x1f4>
		else if(Copy_u8TimerMode ==  DOWNCOUNTING_MODE)
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d155      	bne.n	800108c <MTimer_voidInit+0x1f4>
			SET_BIT(TIMERx->CR1, 4);
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MTimer_voidInit+0x204>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <MTimer_voidInit+0x204>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0210 	orr.w	r2, r2, #16
 8000fee:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MTimer_voidInit+0x204>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	88ba      	ldrh	r2, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MTimer_voidInit+0x204>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MTimer_voidInit+0x204>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <MTimer_voidInit+0x204>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	e03c      	b.n	800108c <MTimer_voidInit+0x1f4>
	else if(Copy_u8TimerNum == TIM4)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d139      	bne.n	800108c <MTimer_voidInit+0x1f4>
		TIMERx = (volatile TIMER_t*)TIMER4_BASE_ADDRESS;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MTimer_voidInit+0x204>)
 800101a:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <MTimer_voidInit+0x20c>)
 800101c:	601a      	str	r2, [r3, #0]
		if(Copy_u8TimerMode == UPCOUNTING_MODE)
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <MTimer_voidInit+0x1be>
			CLEAR_BIT(TIMERx->CR1, 4);
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MTimer_voidInit+0x204>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MTimer_voidInit+0x204>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0210 	bic.w	r2, r2, #16
 8001032:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MTimer_voidInit+0x204>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	88ba      	ldrh	r2, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MTimer_voidInit+0x204>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MTimer_voidInit+0x204>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MTimer_voidInit+0x204>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	e01a      	b.n	800108c <MTimer_voidInit+0x1f4>
		else if(Copy_u8TimerMode ==  DOWNCOUNTING_MODE)
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d117      	bne.n	800108c <MTimer_voidInit+0x1f4>
			SET_BIT(TIMERx->CR1, 4);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MTimer_voidInit+0x204>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MTimer_voidInit+0x204>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0210 	orr.w	r2, r2, #16
 800106a:	601a      	str	r2, [r3, #0]
			TIMERx->PSC = Copy_u16TimerPreScaler;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MTimer_voidInit+0x204>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	88ba      	ldrh	r2, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
			TIMERx->ARR = Copy_u16TimerARRValue;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MTimer_voidInit+0x204>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
			SET_BIT(TIMERx->CR1, 0);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MTimer_voidInit+0x204>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MTimer_voidInit+0x204>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bc90      	pop	{r4, r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40010000 	.word	0x40010000
 800109c:	20000070 	.word	0x20000070
 80010a0:	40000400 	.word	0x40000400
 80010a4:	40000800 	.word	0x40000800

080010a8 <MTimer_voidSetCallBack>:

void MTimer_voidSetCallBack(u8 Copy_u8TimerNum, void (*PTR2FUNC)(u8))
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8TimerNum == TIM1)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <MTimer_voidSetCallBack+0x1a>
	{
		Timer1_CallBack_PTR = PTR2FUNC;
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <MTimer_voidSetCallBack+0x50>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6013      	str	r3, [r2, #0]
	}
	else if(Copy_u8TimerNum == TIM4)
	{
		Timer4_CallBack_PTR = PTR2FUNC;
	}		
}
 80010c0:	e013      	b.n	80010ea <MTimer_voidSetCallBack+0x42>
	else if(Copy_u8TimerNum == TIM2)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <MTimer_voidSetCallBack+0x28>
		Timer2_CallBack_PTR = PTR2FUNC;
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <MTimer_voidSetCallBack+0x54>)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	e00c      	b.n	80010ea <MTimer_voidSetCallBack+0x42>
	else if(Copy_u8TimerNum == TIM3)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d103      	bne.n	80010de <MTimer_voidSetCallBack+0x36>
		Timer3_CallBack_PTR = PTR2FUNC;
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <MTimer_voidSetCallBack+0x58>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	e005      	b.n	80010ea <MTimer_voidSetCallBack+0x42>
	else if(Copy_u8TimerNum == TIM4)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d102      	bne.n	80010ea <MTimer_voidSetCallBack+0x42>
		Timer4_CallBack_PTR = PTR2FUNC;
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <MTimer_voidSetCallBack+0x5c>)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000074 	.word	0x20000074
 80010fc:	20000078 	.word	0x20000078
 8001100:	2000007c 	.word	0x2000007c
 8001104:	20000080 	.word	0x20000080

08001108 <MTimer_Delay_us>:


void MTimer_Delay_us(u16 Copy_Time_US)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	 /*Initialize Timer 4*/
	MTimer_voidInit(TIM4, UPCOUNTING_MODE, PRESCALAR, OVERFLOW_VALUE);
 8001112:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001116:	2247      	movs	r2, #71	; 0x47
 8001118:	2100      	movs	r1, #0
 800111a:	2003      	movs	r0, #3
 800111c:	f7ff febc 	bl	8000e98 <MTimer_voidInit>

	/* Re-initialize the counter */
	SET_BIT(TIMER4->EGR, 0);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MTimer_Delay_us+0x3c>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <MTimer_Delay_us+0x3c>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6153      	str	r3, [r2, #20]

	while(TIMER4->CNT < Copy_Time_US)
 800112c:	bf00      	nop
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <MTimer_Delay_us+0x3c>)
 8001130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3fa      	bcc.n	800112e <MTimer_Delay_us+0x26>
	{
		/* Loop Until Reaching The Required Count(Time) */
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40000800 	.word	0x40000800

08001148 <MTimer_Delay_ms>:

void MTimer_Delay_ms(u16 Copy_Time_MS)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	for(u16 Local_Iterator =0; Local_Iterator < Copy_Time_MS; Local_Iterator++)
 8001152:	2300      	movs	r3, #0
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	e006      	b.n	8001166 <MTimer_Delay_ms+0x1e>
	{
		/* Delay In Milliseconds*/
		MTimer_Delay_us(ONE_MILLISECOND);
 8001158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115c:	f7ff ffd4 	bl	8001108 <MTimer_Delay_us>
	for(u16 Local_Iterator =0; Local_Iterator < Copy_Time_MS; Local_Iterator++)
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	3301      	adds	r3, #1
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	89fa      	ldrh	r2, [r7, #14]
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3f4      	bcc.n	8001158 <MTimer_Delay_ms+0x10>
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MTimer_EnableInputCapture>:

void MTimer_EnableInputCapture(u8 Copy_u8TimerNum, u8 Copy_u8ChannelNum)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8TimerNum == TIM1)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d139      	bne.n	8001202 <MTimer_EnableInputCapture+0x8a>
	{
		/* Select Timer 1 */
		//TIMERx = (volatile TIM1_t*) TIMER1_BASE_ADDRESS;
		if(Copy_u8ChannelNum == CHANNEL2)
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d14b      	bne.n	800122c <MTimer_EnableInputCapture+0xb4>
		{
			/* Write CC2S Bites */
			SET_BIT(TIMER1->CCMR1, 8);
 8001194:	4b71      	ldr	r3, [pc, #452]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a70      	ldr	r2, [pc, #448]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER1->CCMR1, 9);
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a6d      	ldr	r2, [pc, #436]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011aa:	6193      	str	r3, [r2, #24]

			/*IC2F Bites*/
			SET_BIT(TIMER1->CCMR1, 12);
 80011ac:	4b6b      	ldr	r3, [pc, #428]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a6a      	ldr	r2, [pc, #424]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b6:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER1->CCMR1, 13);
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a67      	ldr	r2, [pc, #412]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c2:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER1->CCMR1, 14);
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a64      	ldr	r2, [pc, #400]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011ce:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER1->CCMR1, 15);
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a61      	ldr	r2, [pc, #388]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011da:	6193      	str	r3, [r2, #24]

			/* Rising Edge*/
			CLEAR_BIT(TIMER1->CCER, 5);
 80011dc:	4b5f      	ldr	r3, [pc, #380]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a5e      	ldr	r2, [pc, #376]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011e2:	f023 0320 	bic.w	r3, r3, #32
 80011e6:	6213      	str	r3, [r2, #32]

			/* Enable Capture The Value From Counter */
			SET_BIT(TIMER1->CCER, 4);
 80011e8:	4b5c      	ldr	r3, [pc, #368]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a5b      	ldr	r2, [pc, #364]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6213      	str	r3, [r2, #32]

			/* Enable Interrupt */
			SET_BIT(TIMER1->DIER, 2);
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <MTimer_EnableInputCapture+0x1e4>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	60d3      	str	r3, [r2, #12]
 8001200:	e014      	b.n	800122c <MTimer_EnableInputCapture+0xb4>
		}
	}
	else if(Copy_u8TimerNum == TIM2)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <MTimer_EnableInputCapture+0x9a>
	{
		/* Select Timer  2*/
		TIMERx = (volatile TIMER_t*) TIMER2_BASE_ADDRESS;
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00c      	b.n	800122c <MTimer_EnableInputCapture+0xb4>
	}
	else if(Copy_u8TimerNum == TIM3)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d103      	bne.n	8001220 <MTimer_EnableInputCapture+0xa8>
	{
		/* Select Timer 3 */
		TIMERx = (volatile TIMER_t*) TIMER3_BASE_ADDRESS;
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800121a:	4a52      	ldr	r2, [pc, #328]	; (8001364 <MTimer_EnableInputCapture+0x1ec>)
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e005      	b.n	800122c <MTimer_EnableInputCapture+0xb4>
	}
	else if(Copy_u8TimerNum == TIM4)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d102      	bne.n	800122c <MTimer_EnableInputCapture+0xb4>
	{
		/* Select Timer 4 */
		TIMERx = (volatile TIMER_t*) TIMER4_BASE_ADDRESS;
 8001226:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <MTimer_EnableInputCapture+0x1f0>)
 800122a:	601a      	str	r2, [r3, #0]
	}
	
	if(Copy_u8ChannelNum == CHANNEL1)
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d148      	bne.n	80012c4 <MTimer_EnableInputCapture+0x14c>
	{
		/* Write CC1S Bites */
		SET_BIT(TIMERx->CCMR1, 0);
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 1);
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0202 	bic.w	r2, r2, #2
 8001250:	619a      	str	r2, [r3, #24]
		
		/*IC1F Bites*/
		SET_BIT(TIMERx->CCMR1, 4);
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	4b41      	ldr	r3, [pc, #260]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0210 	orr.w	r2, r2, #16
 8001260:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMERx->CCMR1, 5);
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0220 	orr.w	r2, r2, #32
 8001270:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 6);
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001280:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 7);
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001290:	619a      	str	r2, [r3, #24]
		
		/* Rising Edge*/
		CLEAR_BIT(TIMERx->CCER, 1);
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0202 	bic.w	r2, r2, #2
 80012a0:	621a      	str	r2, [r3, #32]

		/* Enable Capture The Value From Counter */
		SET_BIT(TIMERx->CCER, 0);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	621a      	str	r2, [r3, #32]
		
		/* Enable Capture The Value From Counter */
		SET_BIT(TIMERx->DIER, 1);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0202 	orr.w	r2, r2, #2
 80012c0:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMERx->CCER, 12);
		
		/* Enable Interrupt */
		SET_BIT(TIMERx->DIER, 4);
	}
}
 80012c2:	e0ea      	b.n	800149a <MTimer_EnableInputCapture+0x322>
	else if(Copy_u8ChannelNum == CHANNEL2)
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d150      	bne.n	800136c <MTimer_EnableInputCapture+0x1f4>
		SET_BIT(TIMERx->CCMR1, 8);
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d8:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 9);
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012e8:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMERx->CCMR1, 12);
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012f8:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMERx->CCMR1, 13);
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001308:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 14);
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001318:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCMR1, 15);
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001328:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIMERx->CCER, 5);
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0220 	bic.w	r2, r2, #32
 8001338:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->CCER, 4);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0210 	orr.w	r2, r2, #16
 8001348:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->DIER, 2);
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <MTimer_EnableInputCapture+0x1e8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0204 	orr.w	r2, r2, #4
 8001358:	60da      	str	r2, [r3, #12]
}
 800135a:	e09e      	b.n	800149a <MTimer_EnableInputCapture+0x322>
 800135c:	40010000 	.word	0x40010000
 8001360:	20000070 	.word	0x20000070
 8001364:	40000400 	.word	0x40000400
 8001368:	40000800 	.word	0x40000800
	else if(Copy_u8ChannelNum == CHANNEL3)
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d148      	bne.n	8001404 <MTimer_EnableInputCapture+0x28c>
		SET_BIT(TIMERx->CCMR2, 0);
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 1);
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0202 	bic.w	r2, r2, #2
 8001390:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMERx->CCMR2, 4);
 8001392:	4b45      	ldr	r3, [pc, #276]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	69da      	ldr	r2, [r3, #28]
 8001398:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0210 	orr.w	r2, r2, #16
 80013a0:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMERx->CCMR2, 5);
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	69da      	ldr	r2, [r3, #28]
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 6);
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	69da      	ldr	r2, [r3, #28]
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c0:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 7);
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCER, 9);
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e0:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->CCER, 8);
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f0:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->DIER, 3);
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0208 	orr.w	r2, r2, #8
 8001400:	60da      	str	r2, [r3, #12]
}
 8001402:	e04a      	b.n	800149a <MTimer_EnableInputCapture+0x322>
	else if(Copy_u8ChannelNum == CHANNEL4)
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d147      	bne.n	800149a <MTimer_EnableInputCapture+0x322>
		SET_BIT(TIMERx->CCMR2, 8);
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001418:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 9);
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69da      	ldr	r2, [r3, #28]
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001428:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMERx->CCMR2, 12);
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001438:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMERx->CCMR2, 13);
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69da      	ldr	r2, [r3, #28]
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001448:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 14);
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001458:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCMR2, 15);
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001468:	61da      	str	r2, [r3, #28]
		CLEAR_BIT(TIMERx->CCER, 13);
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6a1a      	ldr	r2, [r3, #32]
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001478:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->CCER, 12);
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001488:	621a      	str	r2, [r3, #32]
		SET_BIT(TIMERx->DIER, 4);
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MTimer_EnableInputCapture+0x330>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0210 	orr.w	r2, r2, #16
 8001498:	60da      	str	r2, [r3, #12]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000070 	.word	0x20000070

080014ac <MTimer_GetCCRValue>:

u16 MTimer_GetCCRValue(u8 Copy_u8TimerNum, u8 Copy_u8ChannelNum)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	u16 Local_u16Counter_Value = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	81fb      	strh	r3, [r7, #14]
		
  if(Copy_u8TimerNum == TIM1)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11b      	bne.n	80014fe <MTimer_GetCCRValue+0x52>
	{
		/* Select Timer 1 */
		//TIMERx = (volatile TIM1_t*) TIMER1_BASE_ADDRESS;

	  if(Copy_u8ChannelNum == CHANNEL1)
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <MTimer_GetCCRValue+0x28>
	  {
		  Local_u16Counter_Value =	TIMER1->CCR1;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MTimer_GetCCRValue+0xc8>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	81fb      	strh	r3, [r7, #14]
 80014d2:	e029      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	  }
	  else if(Copy_u8ChannelNum == CHANNEL2)
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d103      	bne.n	80014e2 <MTimer_GetCCRValue+0x36>
	  {
		  Local_u16Counter_Value =	TIMER1->CCR2;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MTimer_GetCCRValue+0xc8>)
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	81fb      	strh	r3, [r7, #14]
 80014e0:	e022      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	  }
	  else if(Copy_u8ChannelNum == CHANNEL3)
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d103      	bne.n	80014f0 <MTimer_GetCCRValue+0x44>
	  {
		  Local_u16Counter_Value =	TIMER1->CCR3;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MTimer_GetCCRValue+0xc8>)
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	81fb      	strh	r3, [r7, #14]
 80014ee:	e01b      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	  }
	  else if(Copy_u8ChannelNum == CHANNEL4)
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d118      	bne.n	8001528 <MTimer_GetCCRValue+0x7c>
	  {
		  Local_u16Counter_Value =	TIMER1->CCR4;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MTimer_GetCCRValue+0xc8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	e014      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	  }

	}
	else if(Copy_u8TimerNum == TIM2)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d104      	bne.n	800150e <MTimer_GetCCRValue+0x62>
	{
		/* Select Timer  2*/
		TIMERx = (volatile TIMER_t*) TIMER2_BASE_ADDRESS;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e00c      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	}
	else if(Copy_u8TimerNum == TIM3)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d103      	bne.n	800151c <MTimer_GetCCRValue+0x70>
	{
		/* Select Timer 3 */
		TIMERx = (volatile TIMER_t*) TIMER3_BASE_ADDRESS;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <MTimer_GetCCRValue+0xd0>)
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e005      	b.n	8001528 <MTimer_GetCCRValue+0x7c>
	}
	else if(Copy_u8TimerNum == TIM4)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d102      	bne.n	8001528 <MTimer_GetCCRValue+0x7c>
	{
		/* Select Timer 4 */
		TIMERx = (volatile TIMER_t*) TIMER4_BASE_ADDRESS;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <MTimer_GetCCRValue+0xd4>)
 8001526:	601a      	str	r2, [r3, #0]
	}
		
if(Copy_u8ChannelNum == CHANNEL1)
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <MTimer_GetCCRValue+0x8c>
	{
			Local_u16Counter_Value =	TIMERx->CCR1;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	e016      	b.n	8001566 <MTimer_GetCCRValue+0xba>
	}
	else if(Copy_u8ChannelNum == CHANNEL2)
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <MTimer_GetCCRValue+0x9c>
	{
		Local_u16Counter_Value =	TIMERx->CCR2;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	81fb      	strh	r3, [r7, #14]
 8001546:	e00e      	b.n	8001566 <MTimer_GetCCRValue+0xba>
	}
	else if(Copy_u8ChannelNum == CHANNEL3)
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d104      	bne.n	8001558 <MTimer_GetCCRValue+0xac>
	{
		Local_u16Counter_Value =	TIMERx->CCR3;
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	e006      	b.n	8001566 <MTimer_GetCCRValue+0xba>
	}
	else if(Copy_u8ChannelNum == CHANNEL4)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d103      	bne.n	8001566 <MTimer_GetCCRValue+0xba>
	{
		Local_u16Counter_Value =	TIMERx->CCR4;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MTimer_GetCCRValue+0xcc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	81fb      	strh	r3, [r7, #14]
	}
		
		return Local_u16Counter_Value;
 8001566:	89fb      	ldrh	r3, [r7, #14]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40010000 	.word	0x40010000
 8001578:	20000070 	.word	0x20000070
 800157c:	40000400 	.word	0x40000400
 8001580:	40000800 	.word	0x40000800

08001584 <MTimer_SetInputCapturePolarity>:

void MTimer_SetInputCapturePolarity(u8 Copy_u8TimerNum, u8 Copy_u8Plority, u8 Copy_u8ChannelNum)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	717b      	strb	r3, [r7, #5]
		
	if(Copy_u8TimerNum == TIM1)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d116      	bne.n	80015ca <MTimer_SetInputCapturePolarity+0x46>
	{
		/* Select Timer 1 */
		//TIMERx = (volatile TIM1_t*) TIMER1_BASE_ADDRESS;
		if(Copy_u8ChannelNum == CHANNEL2)
 800159c:	797b      	ldrb	r3, [r7, #5]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d128      	bne.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
		{
			if(Copy_u8Plority == RisingEdge)
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <MTimer_SetInputCapturePolarity+0x32>
			{
				CLEAR_BIT(TIMER1->CCER, 5);
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <MTimer_SetInputCapturePolarity+0x154>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <MTimer_SetInputCapturePolarity+0x154>)
 80015ae:	f023 0320 	bic.w	r3, r3, #32
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e01e      	b.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
			}
			else if(Copy_u8Plority == FallingEdge)
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11b      	bne.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
			{
				SET_BIT(TIMER1->CCER, 5);
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <MTimer_SetInputCapturePolarity+0x154>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <MTimer_SetInputCapturePolarity+0x154>)
 80015c2:	f043 0320 	orr.w	r3, r3, #32
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e014      	b.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
			}
		}
	}
	else if(Copy_u8TimerNum == TIM2)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <MTimer_SetInputCapturePolarity+0x56>
	{
		/* Select Timer  2*/
		TIMERx = (volatile TIMER_t*) TIMER2_BASE_ADDRESS;
 80015d0:	4b42      	ldr	r3, [pc, #264]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e00c      	b.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
	}
	else if(Copy_u8TimerNum == TIM3)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d103      	bne.n	80015e8 <MTimer_SetInputCapturePolarity+0x64>
	{
		/* Select Timer 3 */
		TIMERx = (volatile TIMER_t*) TIMER3_BASE_ADDRESS;
 80015e0:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80015e2:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <MTimer_SetInputCapturePolarity+0x15c>)
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e005      	b.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
	}
	else if(Copy_u8TimerNum == TIM4)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d102      	bne.n	80015f4 <MTimer_SetInputCapturePolarity+0x70>
	{
		/* Select Timer 4 */
		TIMERx = (volatile TIMER_t*) TIMER4_BASE_ADDRESS;
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <MTimer_SetInputCapturePolarity+0x160>)
 80015f2:	601a      	str	r2, [r3, #0]
	}	
		
	if(Copy_u8ChannelNum == CHANNEL1)
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d117      	bne.n	800162a <MTimer_SetInputCapturePolarity+0xa6>
	{
		if(Copy_u8Plority == RisingEdge)
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <MTimer_SetInputCapturePolarity+0x8e>
		{
			CLEAR_BIT(TIMERx->CCER, 1);
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0202 	bic.w	r2, r2, #2
 800160e:	621a      	str	r2, [r3, #32]
			SET_BIT(TIMERx->CCER, 13);
		}
	}

		
}
 8001610:	e05b      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
		else if(Copy_u8Plority == FallingEdge)
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d158      	bne.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
			SET_BIT(TIMERx->CCER, 1);
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0202 	orr.w	r2, r2, #2
 8001626:	621a      	str	r2, [r3, #32]
}
 8001628:	e04f      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
	else if(Copy_u8ChannelNum == CHANNEL2)
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d117      	bne.n	8001660 <MTimer_SetInputCapturePolarity+0xdc>
		if(Copy_u8Plority == RisingEdge)
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <MTimer_SetInputCapturePolarity+0xc4>
			CLEAR_BIT(TIMERx->CCER, 5);
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0220 	bic.w	r2, r2, #32
 8001644:	621a      	str	r2, [r3, #32]
}
 8001646:	e040      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
		else if(Copy_u8Plority == FallingEdge)
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13d      	bne.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
			SET_BIT(TIMERx->CCER, 5);
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a1a      	ldr	r2, [r3, #32]
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	621a      	str	r2, [r3, #32]
}
 800165e:	e034      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
	else if(Copy_u8ChannelNum == CHANNEL3)
 8001660:	797b      	ldrb	r3, [r7, #5]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d117      	bne.n	8001696 <MTimer_SetInputCapturePolarity+0x112>
		if(Copy_u8Plority == RisingEdge)
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <MTimer_SetInputCapturePolarity+0xfa>
			CLEAR_BIT(TIMERx->CCER, 9);
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800167a:	621a      	str	r2, [r3, #32]
}
 800167c:	e025      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
		else if(Copy_u8Plority == FallingEdge)
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d122      	bne.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
			SET_BIT(TIMERx->CCER, 9);
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001692:	621a      	str	r2, [r3, #32]
}
 8001694:	e019      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
	else if(Copy_u8ChannelNum == CHANNEL4)
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d116      	bne.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
		if(Copy_u8Plority == RisingEdge)
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <MTimer_SetInputCapturePolarity+0x130>
			CLEAR_BIT(TIMERx->CCER, 13);
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016b0:	621a      	str	r2, [r3, #32]
}
 80016b2:	e00a      	b.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
		else if(Copy_u8Plority == FallingEdge)
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d107      	bne.n	80016ca <MTimer_SetInputCapturePolarity+0x146>
			SET_BIT(TIMERx->CCER, 13);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MTimer_SetInputCapturePolarity+0x158>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016c8:	621a      	str	r2, [r3, #32]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000
 80016dc:	20000070 	.word	0x20000070
 80016e0:	40000400 	.word	0x40000400
 80016e4:	40000800 	.word	0x40000800

080016e8 <MTimer_ClearCounter>:
void MTimer_ClearCounter(u8 Copy_u8TimerNum)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8TimerNum == TIM1)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d103      	bne.n	8001700 <MTimer_ClearCounter+0x18>
		{
			/* Select Timer 1 */
			TIMER1->CNT=0;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MTimer_ClearCounter+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
		else if(Copy_u8TimerNum == TIM4)
		{
			/* Select Timer 4 */
			TIMER4->CNT=0;
		}
}
 80016fe:	e014      	b.n	800172a <MTimer_ClearCounter+0x42>
		else if(Copy_u8TimerNum == TIM2)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <MTimer_ClearCounter+0x28>
			TIMER2->CNT=0;
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800170e:	e00c      	b.n	800172a <MTimer_ClearCounter+0x42>
		else if(Copy_u8TimerNum == TIM3)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d103      	bne.n	800171e <MTimer_ClearCounter+0x36>
			TIMER3->CNT=0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MTimer_ClearCounter+0x54>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800171c:	e005      	b.n	800172a <MTimer_ClearCounter+0x42>
		else if(Copy_u8TimerNum == TIM4)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d102      	bne.n	800172a <MTimer_ClearCounter+0x42>
			TIMER4->CNT=0;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MTimer_ClearCounter+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40000400 	.word	0x40000400
 8001740:	40000800 	.word	0x40000800

08001744 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	Timer1_CallBack_PTR();
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <TIM1_CC_IRQHandler+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4798      	blx	r3
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000074 	.word	0x20000074

08001758 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	Timer2_CallBack_PTR();
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <TIM2_IRQHandler+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4798      	blx	r3
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000078 	.word	0x20000078

0800176c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	Timer3_CallBack_PTR();
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <TIM3_IRQHandler+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4798      	blx	r3
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000007c 	.word	0x2000007c

08001780 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	Timer4_CallBack_PTR();
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <TIM4_IRQHandler+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4798      	blx	r3
}	
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000080 	.word	0x20000080

08001794 <Ultrasonic_voidInit>:

static void KalmanFilter_init(void);
volatile kalman_variables local_filter;

void Ultrasonic_voidInit(ULTRA_SONIC_variables* local_ultrasonic)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

	/*Initialize Echo Pin*/
	//GPIO_voidSetPinDirection(local_ultrasonic->copy_u8EchoPort, local_ultrasonic->copy_u8EchoPin, INPUT_FLOATING);

	/* Initialize Timer */
	MTimer_voidInit(local_ultrasonic->copy_u8EchoTimerNum, UPCOUNTING_MODE, PRESCALAR,  OVERFLOW_VALUE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7918      	ldrb	r0, [r3, #4]
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	2247      	movs	r2, #71	; 0x47
 80017a6:	2100      	movs	r1, #0
 80017a8:	f7ff fb76 	bl	8000e98 <MTimer_voidInit>
	
	/* Initialize Input Capture */
	MTimer_EnableInputCapture(local_ultrasonic->copy_u8EchoTimerNum, local_ultrasonic->Copy_u8EchoChannelNum);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	791a      	ldrb	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fcde 	bl	8001178 <MTimer_EnableInputCapture>
	
	/*Set CallBack Function*/
	MTimer_voidSetCallBack(local_ultrasonic->copy_u8EchoTimerNum,Ultrasonic_voidGetDistance_CallBack);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	490d      	ldr	r1, [pc, #52]	; (80017f8 <Ultrasonic_voidInit+0x64>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc70 	bl	80010a8 <MTimer_voidSetCallBack>

	/* reset all variables to equal zero */
	local_ultrasonic->RisingEdge_Captured = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	719a      	strb	r2, [r3, #6]
	local_ultrasonic->Rising_CaputredValue = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	811a      	strh	r2, [r3, #8]
	local_ultrasonic->Falling_CaputredValue = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	815a      	strh	r2, [r3, #10]
	local_ultrasonic->Difference = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	819a      	strh	r2, [r3, #12]
	local_ultrasonic->Distance = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	81da      	strh	r2, [r3, #14]
	
	KalmanFilter_init();
 80017e6:	f000 f8f7 	bl	80019d8 <KalmanFilter_init>
	
	local_volatile_ultrasonic = local_ultrasonic;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <Ultrasonic_voidInit+0x68>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08001849 	.word	0x08001849
 80017fc:	20000084 	.word	0x20000084

08001800 <Ultrasonic_voidTrigger>:

void Ultrasonic_voidTrigger()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	GPIO_SetPinValue(local_volatile_ultrasonic->copy_u8TriggerPort, local_volatile_ultrasonic->copy_u8TriggerPin, GPIO_PIN_HIGH);
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <Ultrasonic_voidTrigger+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <Ultrasonic_voidTrigger+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f970 	bl	8000afc <GPIO_SetPinValue>
	MTimer_Delay_us(10);
 800181c:	200a      	movs	r0, #10
 800181e:	f7ff fc73 	bl	8001108 <MTimer_Delay_us>
	GPIO_SetPinValue(local_volatile_ultrasonic->copy_u8TriggerPort, local_volatile_ultrasonic->copy_u8TriggerPin, GPIO_PIN_LOW);
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <Ultrasonic_voidTrigger+0x40>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2d8      	uxtb	r0, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <Ultrasonic_voidTrigger+0x40>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f961 	bl	8000afc <GPIO_SetPinValue>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000084 	.word	0x20000084
 8001844:	00000000 	.word	0x00000000

08001848 <Ultrasonic_voidGetDistance_CallBack>:

void Ultrasonic_voidGetDistance_CallBack()
{
 8001848:	b598      	push	{r3, r4, r7, lr}
 800184a:	af00      	add	r7, sp, #0
	if (local_volatile_ultrasonic->RisingEdge_Captured == 0) // If The Rising Is Not Captured Before
 800184c:	4b60      	ldr	r3, [pc, #384]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	799b      	ldrb	r3, [r3, #6]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d120      	bne.n	800189a <Ultrasonic_voidGetDistance_CallBack+0x52>
		{
			// Read The Time Of Rising Edge
			local_volatile_ultrasonic->Rising_CaputredValue = MTimer_GetCCRValue(local_volatile_ultrasonic->copy_u8EchoTimerNum,local_volatile_ultrasonic->Copy_u8EchoChannelNum);
 8001858:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4959      	ldr	r1, [pc, #356]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800186a:	680c      	ldr	r4, [r1, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f7ff fe1c 	bl	80014ac <MTimer_GetCCRValue>
 8001874:	4603      	mov	r3, r0
 8001876:	8123      	strh	r3, [r4, #8]
			
			// Set The Rising Edge Flag (Rising Is Detected)		
			local_volatile_ultrasonic->RisingEdge_Captured = 1;  
 8001878:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	719a      	strb	r2, [r3, #6]
			
			// Change The Polarity to Falling Edge
			MTimer_SetInputCapturePolarity(local_volatile_ultrasonic->copy_u8EchoTimerNum, FallingEdge, local_volatile_ultrasonic->Copy_u8EchoChannelNum);
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	b2d8      	uxtb	r0, r3
 8001888:	4b51      	ldr	r3, [pc, #324]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	795b      	ldrb	r3, [r3, #5]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	f7ff fe76 	bl	8001584 <MTimer_SetInputCapturePolarity>
			local_volatile_ultrasonic->RisingEdge_Captured = 0; 
			
			// Change The Polarity to Rising Edge// set polarity to rising edge
			MTimer_SetInputCapturePolarity(local_volatile_ultrasonic->copy_u8EchoTimerNum, RisingEdge,local_volatile_ultrasonic->Copy_u8EchoChannelNum);
		}
}
 8001898:	e092      	b.n	80019c0 <Ultrasonic_voidGetDistance_CallBack+0x178>
		else if (local_volatile_ultrasonic->RisingEdge_Captured == 1) //If The Rising Is Already Captured 
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	799b      	ldrb	r3, [r3, #6]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	f040 808c 	bne.w	80019c0 <Ultrasonic_voidGetDistance_CallBack+0x178>
			local_volatile_ultrasonic->Falling_CaputredValue = MTimer_GetCCRValue(local_volatile_ultrasonic->copy_u8EchoTimerNum,local_volatile_ultrasonic->Copy_u8EchoChannelNum);
 80018a8:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4945      	ldr	r1, [pc, #276]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018ba:	680c      	ldr	r4, [r1, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f7ff fdf4 	bl	80014ac <MTimer_GetCCRValue>
 80018c4:	4603      	mov	r3, r0
 80018c6:	8163      	strh	r3, [r4, #10]
			MTimer_ClearCounter(local_volatile_ultrasonic->copy_u8EchoTimerNum);
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff09 	bl	80016e8 <MTimer_ClearCounter>
			if (local_volatile_ultrasonic->Falling_CaputredValue > local_volatile_ultrasonic->Rising_CaputredValue)
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	895b      	ldrh	r3, [r3, #10]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d90d      	bls.n	8001906 <Ultrasonic_voidGetDistance_CallBack+0xbe>
				local_volatile_ultrasonic->Difference = local_volatile_ultrasonic->Falling_CaputredValue - local_volatile_ultrasonic->Rising_CaputredValue;
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	895b      	ldrh	r3, [r3, #10]
 80018f0:	b299      	uxth	r1, r3
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1a8a      	subs	r2, r1, r2
 8001900:	b292      	uxth	r2, r2
 8001902:	819a      	strh	r2, [r3, #12]
 8001904:	e018      	b.n	8001938 <Ultrasonic_voidGetDistance_CallBack+0xf0>
			else if (local_volatile_ultrasonic->Rising_CaputredValue > local_volatile_ultrasonic->Falling_CaputredValue)
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	895b      	ldrh	r3, [r3, #10]
 8001914:	b29b      	uxth	r3, r3
 8001916:	429a      	cmp	r2, r3
 8001918:	d90e      	bls.n	8001938 <Ultrasonic_voidGetDistance_CallBack+0xf0>
				local_volatile_ultrasonic->Difference = (0xffff - local_volatile_ultrasonic->Rising_CaputredValue) + local_volatile_ultrasonic->Falling_CaputredValue;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	895b      	ldrh	r3, [r3, #10]
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	891b      	ldrh	r3, [r3, #8]
 8001928:	b29b      	uxth	r3, r3
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3a01      	subs	r2, #1
 8001934:	b292      	uxth	r2, r2
 8001936:	819a      	strh	r2, [r3, #12]
			local_volatile_ultrasonic->Distance = local_volatile_ultrasonic->Difference * .034/2;
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	899b      	ldrh	r3, [r3, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fd9b 	bl	800047c <__aeabi_i2d>
 8001946:	a320      	add	r3, pc, #128	; (adr r3, 80019c8 <Ultrasonic_voidGetDistance_CallBack+0x180>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe00 	bl	8000550 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	f7fe ff20 	bl	80007a4 <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4919      	ldr	r1, [pc, #100]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800196a:	680c      	ldr	r4, [r1, #0]
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f800 	bl	8000974 <__aeabi_d2uiz>
 8001974:	4603      	mov	r3, r0
 8001976:	b29b      	uxth	r3, r3
 8001978:	81e3      	strh	r3, [r4, #14]
			KalmanFilter_calculate(&local_filter,local_volatile_ultrasonic->Distance);
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	89db      	ldrh	r3, [r3, #14]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <Ultrasonic_voidGetDistance_CallBack+0x18c>)
 8001986:	f000 f845 	bl	8001a14 <KalmanFilter_calculate>
			local_volatile_ultrasonic->filter_Distance = local_filter.x;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <Ultrasonic_voidGetDistance_CallBack+0x18c>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001998:	ee17 2a90 	vmov	r2, s15
 800199c:	b292      	uxth	r2, r2
 800199e:	821a      	strh	r2, [r3, #16]
			local_volatile_ultrasonic->RisingEdge_Captured = 0; 
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	719a      	strb	r2, [r3, #6]
			MTimer_SetInputCapturePolarity(local_volatile_ultrasonic->copy_u8EchoTimerNum, RisingEdge,local_volatile_ultrasonic->Copy_u8EchoChannelNum);
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	b2d8      	uxtb	r0, r3
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <Ultrasonic_voidGetDistance_CallBack+0x188>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	795b      	ldrb	r3, [r3, #5]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	2101      	movs	r1, #1
 80019bc:	f7ff fde2 	bl	8001584 <MTimer_SetInputCapturePolarity>
}
 80019c0:	bf00      	nop
 80019c2:	bd98      	pop	{r3, r4, r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	b020c49c 	.word	0xb020c49c
 80019cc:	3fa16872 	.word	0x3fa16872
 80019d0:	20000084 	.word	0x20000084
 80019d4:	20000088 	.word	0x20000088

080019d8 <KalmanFilter_init>:

void KalmanFilter_init(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	local_filter.x  = 0; // initial_state;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <KalmanFilter_init+0x34>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
	local_filter.p  = 1;//initial_variance;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <KalmanFilter_init+0x34>)
 80019e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019ea:	605a      	str	r2, [r3, #4]
	local_filter.ps = 0.5; //sensor_variance;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <KalmanFilter_init+0x34>)
 80019ee:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80019f2:	609a      	str	r2, [r3, #8]
	local_filter.Q  = 0.009; //variance_over_time;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <KalmanFilter_init+0x34>)
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <KalmanFilter_init+0x38>)
 80019f8:	60da      	str	r2, [r3, #12]
	local_filter.k  = 2;
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <KalmanFilter_init+0x34>)
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a00:	611a      	str	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20000088 	.word	0x20000088
 8001a10:	3c1374bc 	.word	0x3c1374bc

08001a14 <KalmanFilter_calculate>:
#include "kalman_filter.h"



void KalmanFilter_calculate(kalman_variables* filter, u16 distance)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]

	// state prediction
  filter->p += filter->Q ;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edc3 7a01 	vstr	s15, [r3, #4]

  // measurement update
  filter->k = 1.0 * filter->p / (filter->p + filter->ps);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	edc3 7a04 	vstr	s15, [r3, #16]
  filter->x = (1 - filter->k) * filter->x + filter->k * distance;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a00 	vstr	s15, [r3]
  filter->p = (1 - filter->k) * filter->p;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <main>:
void USART_Init(void);
void ultra_init(ULTRA_SONIC_variables* local_ultrasonic);

//extern u16 Distance;
int main(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
u16 before =0;
u16 after = 0;
u16	Difference =0;
u8 release = 1;*/
	/* RCC init */
	RCC_Init();
 8001abe:	f000 f837 	bl	8001b30 <RCC_Init>
	/* UART init */
	USART_Init();
 8001ac2:	f000 f85f 	bl	8001b84 <USART_Init>
	u8 str[] ="here";
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <main+0x68>)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ace:	6018      	str	r0, [r3, #0]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	7019      	strb	r1, [r3, #0]
	USART_voidSendString(USART_1,str);
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4812      	ldr	r0, [pc, #72]	; (8001b24 <main+0x6c>)
 8001ada:	f7ff f994 	bl	8000e06 <USART_voidSendString>
	NVIC_voidEnableInterrupt(TIM1_CC);
 8001ade:	2022      	movs	r0, #34	; 0x22
 8001ae0:	f7ff f8c4 	bl	8000c6c <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(NVIC_TIM2);
 8001ae4:	2023      	movs	r0, #35	; 0x23
 8001ae6:	f7ff f8c1 	bl	8000c6c <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(NVIC_TIM3);
 8001aea:	2024      	movs	r0, #36	; 0x24
 8001aec:	f7ff f8be 	bl	8000c6c <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(NVIC_TIM4);
 8001af0:	2025      	movs	r0, #37	; 0x25
 8001af2:	f7ff f8bb 	bl	8000c6c <NVIC_voidEnableInterrupt>

	ultra_init(&ultrasonic);
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <main+0x70>)
 8001af8:	f000 f860 	bl	8001bbc <ultra_init>
	//u16 dist=0;
	while(1)
	{
		/*GPIO_voidSetPinValue(GPIOA, PIN1, HIGH);
		GPIO_voidSetPinValue(GPIOA, PIN1, LOW);*/
	   Ultrasonic_voidTrigger();
 8001afc:	f7ff fe80 	bl	8001800 <Ultrasonic_voidTrigger>
		//dist = HUltrasonic_u16GetDistance(TIMER2);
	   USART_voidSendString(USART_1,&(ultrasonic.Distance));
 8001b00:	490a      	ldr	r1, [pc, #40]	; (8001b2c <main+0x74>)
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <main+0x6c>)
 8001b04:	f7ff f97f 	bl	8000e06 <USART_voidSendString>
	   USART_voidSendByte( USART_1 , '\r'  );
 8001b08:	210d      	movs	r1, #13
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <main+0x6c>)
 8001b0c:	f7ff f958 	bl	8000dc0 <USART_voidSendByte>
	   USART_voidSendByte( USART_1 , '\n' );
 8001b10:	210a      	movs	r1, #10
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <main+0x6c>)
 8001b14:	f7ff f954 	bl	8000dc0 <USART_voidSendByte>
		MTimer_Delay_ms(30);
 8001b18:	201e      	movs	r0, #30
 8001b1a:	f7ff fb15 	bl	8001148 <MTimer_Delay_ms>
	   Ultrasonic_voidTrigger();
 8001b1e:	e7ed      	b.n	8001afc <main+0x44>
 8001b20:	08001cac 	.word	0x08001cac
 8001b24:	40011000 	.word	0x40011000
 8001b28:	2000009c 	.word	0x2000009c
 8001b2c:	200000aa 	.word	0x200000aa

08001b30 <RCC_Init>:
/*
 * RCC init
 */

void RCC_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	/*configure System Clock*/
	RCC_voidSystemClockInit();
 8001b34:	f7fe ff3e 	bl	80009b4 <RCC_voidSystemClockInit>

	/* Enable GPIOA clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOA);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7fe ff88 	bl	8000a50 <RCC_voidPeripheralClockEnable>
	/* Enable GPIOB clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOB);
 8001b40:	2101      	movs	r1, #1
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7fe ff84 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable TIM1 clock */
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_TIM1);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f7fe ff80 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable TIM2 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM2);
 8001b50:	2100      	movs	r1, #0
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7fe ff7c 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable TIM3 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM3);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe ff78 	bl	8000a50 <RCC_voidPeripheralClockEnable>
	/* Enable TIM4 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM4);
 8001b60:	2102      	movs	r1, #2
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7fe ff74 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable Selection line of MUX*/
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_SYSCFG);
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7fe ff70 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable USART clock */
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_USART1);
 8001b70:	2104      	movs	r1, #4
 8001b72:	2003      	movs	r0, #3
 8001b74:	f7fe ff6c 	bl	8000a50 <RCC_voidPeripheralClockEnable>

	/* Enable SPI clock */
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_SPI1);
 8001b78:	210c      	movs	r1, #12
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f7fe ff68 	bl	8000a50 <RCC_voidPeripheralClockEnable>



}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <USART_Init>:


void USART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
	USART_InitType UART_Config={.BaudRate=USART_9600_16MHZ,
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <USART_Init+0x30>)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					.Parity_Selection=USART_Odd_Parity,
					.TransferDirection=USART_TX_RX,
					.Oversampling=OVER_SAMPLING_16,
			};

			USART_ClockInitTypeDef UART_CLOCK={
 8001b94:	2300      	movs	r3, #0
 8001b96:	703b      	strb	r3, [r7, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	707b      	strb	r3, [r7, #1]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	70bb      	strb	r3, [r7, #2]
					.ClockOutput=0,
					.ClockPhase=0,
					.ClockPolarity=0,
			};

		USART_voidInit(&UART_Config,&UART_CLOCK,USART_1);
 8001ba0:	4639      	mov	r1, r7
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <USART_Init+0x34>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f8aa 	bl	8000d00 <USART_voidInit>

}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	08001cb4 	.word	0x08001cb4
 8001bb8:	40011000 	.word	0x40011000

08001bbc <ultra_init>:


void ultra_init(ULTRA_SONIC_variables* local_ultrasonic)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	local_ultrasonic->copy_u8EchoPort = GPIO_PORTA;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	709a      	strb	r2, [r3, #2]
	local_ultrasonic->copy_u8EchoPin = GPIO_PIN9;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2209      	movs	r2, #9
 8001bce:	70da      	strb	r2, [r3, #3]

	local_ultrasonic->copy_u8TriggerPort = GPIO_PORTA;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
	local_ultrasonic->copy_u8TriggerPin = GPIO_PIN10;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	220a      	movs	r2, #10
 8001bda:	705a      	strb	r2, [r3, #1]

	local_ultrasonic->copy_u8EchoTimerNum = TIM1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	711a      	strb	r2, [r3, #4]
	local_ultrasonic->Copy_u8EchoChannelNum = CHANNEL2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	715a      	strb	r2, [r3, #5]

	Ultrasonic_voidInit(local_ultrasonic );
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fdd3 	bl	8001794 <Ultrasonic_voidInit>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <LoopForever+0xe>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <LoopForever+0x16>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c26:	f000 f811 	bl	8001c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2a:	f7ff ff45 	bl	8001ab8 <main>

08001c2e <LoopForever>:

LoopForever:
  b LoopForever
 8001c2e:	e7fe      	b.n	8001c2e <LoopForever>
  ldr   r0, =_estack
 8001c30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001c3c:	08001cc8 	.word	0x08001cc8
  ldr r2, =_sbss
 8001c40:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001c44:	200000b0 	.word	0x200000b0

08001c48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <__libc_init_array>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4d0d      	ldr	r5, [pc, #52]	; (8001c84 <__libc_init_array+0x38>)
 8001c50:	4c0d      	ldr	r4, [pc, #52]	; (8001c88 <__libc_init_array+0x3c>)
 8001c52:	1b64      	subs	r4, r4, r5
 8001c54:	10a4      	asrs	r4, r4, #2
 8001c56:	2600      	movs	r6, #0
 8001c58:	42a6      	cmp	r6, r4
 8001c5a:	d109      	bne.n	8001c70 <__libc_init_array+0x24>
 8001c5c:	4d0b      	ldr	r5, [pc, #44]	; (8001c8c <__libc_init_array+0x40>)
 8001c5e:	4c0c      	ldr	r4, [pc, #48]	; (8001c90 <__libc_init_array+0x44>)
 8001c60:	f000 f818 	bl	8001c94 <_init>
 8001c64:	1b64      	subs	r4, r4, r5
 8001c66:	10a4      	asrs	r4, r4, #2
 8001c68:	2600      	movs	r6, #0
 8001c6a:	42a6      	cmp	r6, r4
 8001c6c:	d105      	bne.n	8001c7a <__libc_init_array+0x2e>
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c74:	4798      	blx	r3
 8001c76:	3601      	adds	r6, #1
 8001c78:	e7ee      	b.n	8001c58 <__libc_init_array+0xc>
 8001c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c7e:	4798      	blx	r3
 8001c80:	3601      	adds	r6, #1
 8001c82:	e7f2      	b.n	8001c6a <__libc_init_array+0x1e>
 8001c84:	08001cc0 	.word	0x08001cc0
 8001c88:	08001cc0 	.word	0x08001cc0
 8001c8c:	08001cc0 	.word	0x08001cc0
 8001c90:	08001cc4 	.word	0x08001cc4

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
