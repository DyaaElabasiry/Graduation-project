
MCP_Transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800070  00800070  0000079a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166f  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a05  00000000  00000000  00001fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba2  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000977  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e76  00000000  00000000  0000429b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_13>
  38:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  8a:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VidSetPinDirection>:
    switch (Copy_U8Port)
    {
        case 0 : TOGGLE_BIT(PORTA,Copy_U8Pin); break;
        case 1 : TOGGLE_BIT(PORTB,Copy_U8Pin); break;
        case 2 : TOGGLE_BIT(PORTC,Copy_U8Pin); break;
        case 3 : TOGGLE_BIT(PORTD,Copy_U8Pin); break;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	a1 f5       	brne	.+104    	; 0xfe <DIO_VidSetPinDirection+0x6c>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	89 f0       	breq	.+34     	; 0xbc <DIO_VidSetPinDirection+0x2a>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_VidSetPinDirection+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_VidSetPinDirection+0x40>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_VidSetPinDirection+0x56>
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_VidSetPinDirection+0x1e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_VidSetPinDirection+0x1a>
  b4:	9a b3       	in	r25, 0x1a	; 26
  b6:	89 2b       	or	r24, r25
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	08 95       	ret
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_VidSetPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_VidSetPinDirection+0x30>
  ca:	97 b3       	in	r25, 0x17	; 23
  cc:	89 2b       	or	r24, r25
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VidSetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VidSetPinDirection+0x46>
  e0:	94 b3       	in	r25, 0x14	; 20
  e2:	89 2b       	or	r24, r25
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	08 95       	ret
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_VidSetPinDirection+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_VidSetPinDirection+0x5c>
  f6:	91 b3       	in	r25, 0x11	; 17
  f8:	89 2b       	or	r24, r25
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	08 95       	ret
  fe:	41 11       	cpse	r20, r1
 100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_VidSetPinDirection+0xde>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 f0       	breq	.+36     	; 0x12a <DIO_VidSetPinDirection+0x98>
 106:	28 f0       	brcs	.+10     	; 0x112 <DIO_VidSetPinDirection+0x80>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_VidSetPinDirection+0xb0>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	29 f1       	breq	.+74     	; 0x15a <DIO_VidSetPinDirection+0xc8>
 110:	08 95       	ret
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_VidSetPinDirection+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_VidSetPinDirection+0x86>
 120:	80 95       	com	r24
 122:	9a b3       	in	r25, 0x1a	; 26
 124:	89 23       	and	r24, r25
 126:	8a bb       	out	0x1a, r24	; 26
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VidSetPinDirection+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VidSetPinDirection+0x9e>
 138:	80 95       	com	r24
 13a:	97 b3       	in	r25, 0x17	; 23
 13c:	89 23       	and	r24, r25
 13e:	87 bb       	out	0x17, r24	; 23
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_VidSetPinDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_VidSetPinDirection+0xb6>
 150:	80 95       	com	r24
 152:	94 b3       	in	r25, 0x14	; 20
 154:	89 23       	and	r24, r25
 156:	84 bb       	out	0x14, r24	; 20
 158:	08 95       	ret
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_VidSetPinDirection+0xd2>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_VidSetPinDirection+0xce>
 168:	80 95       	com	r24
 16a:	91 b3       	in	r25, 0x11	; 17
 16c:	89 23       	and	r24, r25
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_VidSetPinValue>:
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	a1 f5       	brne	.+104    	; 0x1de <DIO_VidSetPinValue+0x6c>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	89 f0       	breq	.+34     	; 0x19c <DIO_VidSetPinValue+0x2a>
 17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_VidSetPinValue+0x14>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_VidSetPinValue+0x40>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_VidSetPinValue+0x56>
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_VidSetPinValue+0x1e>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_VidSetPinValue+0x1a>
 194:	9b b3       	in	r25, 0x1b	; 27
 196:	89 2b       	or	r24, r25
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	08 95       	ret
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_VidSetPinValue+0x34>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_VidSetPinValue+0x30>
 1aa:	98 b3       	in	r25, 0x18	; 24
 1ac:	89 2b       	or	r24, r25
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_VidSetPinValue+0x4a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_VidSetPinValue+0x46>
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	89 2b       	or	r24, r25
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	08 95       	ret
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_VidSetPinValue+0x60>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_VidSetPinValue+0x5c>
 1d6:	92 b3       	in	r25, 0x12	; 18
 1d8:	89 2b       	or	r24, r25
 1da:	82 bb       	out	0x12, r24	; 18
 1dc:	08 95       	ret
 1de:	41 11       	cpse	r20, r1
 1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_VidSetPinValue+0xde>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_VidSetPinValue+0x98>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_VidSetPinValue+0x80>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_VidSetPinValue+0xb0>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_VidSetPinValue+0xc8>
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_VidSetPinValue+0x8a>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_VidSetPinValue+0x86>
 200:	80 95       	com	r24
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	89 23       	and	r24, r25
 206:	8b bb       	out	0x1b, r24	; 27
 208:	08 95       	ret
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_VidSetPinValue+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_VidSetPinValue+0x9e>
 218:	80 95       	com	r24
 21a:	98 b3       	in	r25, 0x18	; 24
 21c:	89 23       	and	r24, r25
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_VidSetPinValue+0xba>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_VidSetPinValue+0xb6>
 230:	80 95       	com	r24
 232:	95 b3       	in	r25, 0x15	; 21
 234:	89 23       	and	r24, r25
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_VidSetPinValue+0xd2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_VidSetPinValue+0xce>
 248:	80 95       	com	r24
 24a:	92 b3       	in	r25, 0x12	; 18
 24c:	89 23       	and	r24, r25
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_U8GetPinValue>:
}

u8 DIO_U8GetPinValue(u8 Copy_U8Port, u8 Copy_U8Pin)
{
    u8 Local_U8Value;
    switch (Copy_U8Port)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	81 f0       	breq	.+32     	; 0x276 <DIO_U8GetPinValue+0x24>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_U8GetPinValue+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	b9 f0       	breq	.+46     	; 0x28a <DIO_U8GetPinValue+0x38>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	f9 f0       	breq	.+62     	; 0x29e <DIO_U8GetPinValue+0x4c>
 260:	27 c0       	rjmp	.+78     	; 0x2b0 <DIO_U8GetPinValue+0x5e>
    {
        case 0 : Local_U8Value = GET_BIT(PINA,Copy_U8Pin); break;
 262:	89 b3       	in	r24, 0x19	; 25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_U8GetPinValue+0x1a>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_U8GetPinValue+0x16>
 270:	98 2f       	mov	r25, r24
 272:	91 70       	andi	r25, 0x01	; 1
 274:	1d c0       	rjmp	.+58     	; 0x2b0 <DIO_U8GetPinValue+0x5e>
        case 1 : Local_U8Value = GET_BIT(PINB,Copy_U8Pin); break;
 276:	86 b3       	in	r24, 0x16	; 22
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_U8GetPinValue+0x2e>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_U8GetPinValue+0x2a>
 284:	98 2f       	mov	r25, r24
 286:	91 70       	andi	r25, 0x01	; 1
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <DIO_U8GetPinValue+0x5e>
        case 2 : Local_U8Value = GET_BIT(PINC,Copy_U8Pin); break;
 28a:	83 b3       	in	r24, 0x13	; 19
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_U8GetPinValue+0x42>
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_U8GetPinValue+0x3e>
 298:	98 2f       	mov	r25, r24
 29a:	91 70       	andi	r25, 0x01	; 1
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <DIO_U8GetPinValue+0x5e>
        case 3 : Local_U8Value = GET_BIT(PIND,Copy_U8Pin); break;
 29e:	80 b3       	in	r24, 0x10	; 16
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_U8GetPinValue+0x56>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_U8GetPinValue+0x52>
 2ac:	98 2f       	mov	r25, r24
 2ae:	91 70       	andi	r25, 0x01	; 1
    }
    return Local_U8Value;    
}
 2b0:	89 2f       	mov	r24, r25
 2b2:	08 95       	ret

000002b4 <main>:

#define F_CPU 8000000UL
#include "util/delay.h"

int  main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	60 97       	sbiw	r28, 0x10	; 16
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	u8 read;
	DIO_VidSetPinDirection(DIO_PORTD, DIO_PIN2, DIO_INPUT);    // to control which message to send
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	
	MCP2515_VidInit();
 2d2:	0e 94 04 02 	call	0x408	; 0x408 <MCP2515_VidInit>

	u8 msgData1[] = {'M', 'o', 'h', 'a', 'm', 'm', 'e', 'd'};
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	e0 e6       	ldi	r30, 0x60	; 96
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	de 01       	movw	r26, r28
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	01 90       	ld	r0, Z+
 2e2:	0d 92       	st	X+, r0
 2e4:	8a 95       	dec	r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x2c>
	u8 msgData2[] = {'H', 'a', 'b', 'e', 'b', '0', '0', '0'};
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	e8 e6       	ldi	r30, 0x68	; 104
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	de 01       	movw	r26, r28
 2f0:	19 96       	adiw	r26, 0x09	; 9
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x3e>

	while(1)
	{
		
		
		USART_u8SendCharSynch('m');
 2fa:	8d e6       	ldi	r24, 0x6D	; 109
 2fc:	0e 94 a7 02 	call	0x54e	; 0x54e <USART_u8SendCharSynch>
		USART_u8SendCharSynch('\r');
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	0e 94 a7 02 	call	0x54e	; 0x54e <USART_u8SendCharSynch>
		USART_u8SendCharSynch('\n');
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	0e 94 a7 02 	call	0x54e	; 0x54e <USART_u8SendCharSynch>
		read = DIO_U8GetPinValue(DIO_PORTD, DIO_PIN2);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	0e 94 29 01 	call	0x252	; 0x252 <DIO_U8GetPinValue>
		
		if ( read == 0 )
 314:	81 11       	cpse	r24, r1
 316:	0b c0       	rjmp	.+22     	; 0x32e <main+0x7a>
		{
			MCP2515_VidSendCANmsg(0, 0x7E1, msgData1, 8);	
 318:	08 e0       	ldi	r16, 0x08	; 8
 31a:	9e 01       	movw	r18, r28
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	41 ee       	ldi	r20, 0xE1	; 225
 322:	57 e0       	ldi	r21, 0x07	; 7
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 15 02 	call	0x42a	; 0x42a <MCP2515_VidSendCANmsg>
 32c:	0b c0       	rjmp	.+22     	; 0x344 <main+0x90>
		}
		else
		{
			MCP2515_VidSendCANmsg(0, 0x7AA, msgData2, 8);
 32e:	08 e0       	ldi	r16, 0x08	; 8
 330:	9e 01       	movw	r18, r28
 332:	27 5f       	subi	r18, 0xF7	; 247
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	4a ea       	ldi	r20, 0xAA	; 170
 338:	57 e0       	ldi	r21, 0x07	; 7
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 15 02 	call	0x42a	; 0x42a <MCP2515_VidSendCANmsg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	89 e6       	ldi	r24, 0x69	; 105
 348:	98 e1       	ldi	r25, 0x18	; 24
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x96>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0xa0>
 354:	00 00       	nop
 356:	d1 cf       	rjmp	.-94     	; 0x2fa <main+0x46>

00000358 <MCP2515_VidWriteRegister>:

	return readValue;
}

void MCP2515_VidWriteRegister(u8 address, u8 value)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	d8 2f       	mov	r29, r24
 35e:	c6 2f       	mov	r28, r22
	SPI_VidChipSelect(1);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_WRITE);
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(address);
 36c:	8d 2f       	mov	r24, r29
 36e:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(value);
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <MCP2515_VidSetBitTiming>:

void MCP2515_VidSetBitTiming(u8 cnf1Value, u8 cnf2Value, u8 cnf3Value)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	d6 2f       	mov	r29, r22
 38a:	c4 2f       	mov	r28, r20
	MCP2515_VidWriteRegister(CNF1, cnf1Value);
 38c:	68 2f       	mov	r22, r24
 38e:	8a e2       	ldi	r24, 0x2A	; 42
 390:	0e 94 ac 01 	call	0x358	; 0x358 <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister(CNF2, cnf2Value);
 394:	6d 2f       	mov	r22, r29
 396:	89 e2       	ldi	r24, 0x29	; 41
 398:	0e 94 ac 01 	call	0x358	; 0x358 <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister(CNF3, cnf3Value);
 39c:	6c 2f       	mov	r22, r28
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 ac 01 	call	0x358	; 0x358 <MCP2515_VidWriteRegister>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <MCP2515_VidReset>:

void MCP2515_VidReset()
{
	SPI_VidChipSelect(1);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_RESET);
 3b0:	80 ec       	ldi	r24, 0xC0	; 192
 3b2:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
 3bc:	08 95       	ret

000003be <MCP2515_VidChangeBits>:
}

void MCP2515_VidChangeBits(u8 RegAddress, u8 Mask, u8 Value)
{
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	18 2f       	mov	r17, r24
 3c6:	d6 2f       	mov	r29, r22
 3c8:	c4 2f       	mov	r28, r20
	SPI_VidChipSelect(1);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_BIT_MODIFY);
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(RegAddress);
 3d6:	81 2f       	mov	r24, r17
 3d8:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(Mask);
 3dc:	8d 2f       	mov	r24, r29
 3de:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(Value);
 3e2:	8c 2f       	mov	r24, r28
 3e4:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <MCP2515_VidSetMode>:

void MCP2515_VidSetMode(u8 mode)
{

	MCP2515_VidChangeBits(CANCTRL, 0xE0, mode << 5);
 3f6:	48 2f       	mov	r20, r24
 3f8:	42 95       	swap	r20
 3fa:	44 0f       	add	r20, r20
 3fc:	40 7e       	andi	r20, 0xE0	; 224
 3fe:	60 ee       	ldi	r22, 0xE0	; 224
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	0e 94 df 01 	call	0x3be	; 0x3be <MCP2515_VidChangeBits>
 406:	08 95       	ret

00000408 <MCP2515_VidInit>:
	//while((MCP2515_U8ReadRegister(CANSTAT)>>5) != mode );
}

void MCP2515_VidInit(void)
{
	SPI_VidMasterInit();
 408:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_VidMasterInit>
	MCP2515_VidReset();
 40c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <MCP2515_VidReset>

	//Enter configuration mode and enable CLKOUT with no Pre scaler
	MCP2515_VidWriteRegister(CANCTRL, 0x84);
 410:	64 e8       	ldi	r22, 0x84	; 132
 412:	8f e0       	ldi	r24, 0x0F	; 15
 414:	0e 94 ac 01 	call	0x358	; 0x358 <MCP2515_VidWriteRegister>
	
	//while((MCP2515_U8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
	// to run at 250KHz bit rate using 8MHz OSC
	MCP2515_VidSetBitTiming((2<<6), (1<<7)|(6<<3)|(1), (5));
 418:	45 e0       	ldi	r20, 0x05	; 5
 41a:	61 eb       	ldi	r22, 0xB1	; 177
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	0e 94 c2 01 	call	0x384	; 0x384 <MCP2515_VidSetBitTiming>

	MCP2515_VidSetMode(MCP2515_MODE_NORMAL);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <MCP2515_VidSetMode>
 428:	08 95       	ret

0000042a <MCP2515_VidSendCANmsg>:
}

                                                             //1000
void MCP2515_VidSendCANmsg(u8 bufIdx, u32 msgID, u8 * data,u8 properties)
{
 42a:	8f 92       	push	r8
 42c:	9f 92       	push	r9
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	cf 93       	push	r28
 43a:	4a 01       	movw	r8, r20
 43c:	5b 01       	movw	r10, r22
 43e:	79 01       	movw	r14, r18
	SPI_VidChipSelect(1);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
	
	/* Send header and address */
	SPI_U8MasterTransmit(INST_WRITE);
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(TXB0CTRL);
 44c:	80 e3       	ldi	r24, 0x30	; 48
 44e:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
    
     //buffer occupies 14 bytes
     /* Setup message priority */
	SPI_U8MasterTransmit(properties >> 6);   //00 Lowest priority  (first byte)
 452:	80 2f       	mov	r24, r16
 454:	82 95       	swap	r24
 456:	86 95       	lsr	r24
 458:	86 95       	lsr	r24
 45a:	83 70       	andi	r24, 0x03	; 3
 45c:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	
	//(5 bytes)
	/* Setup standard or extended identifier */
		SPI_U8MasterTransmit((u8)(msgID>>3));
 460:	d5 01       	movw	r26, r10
 462:	c4 01       	movw	r24, r8
 464:	68 94       	set
 466:	12 f8       	bld	r1, 2
 468:	b6 95       	lsr	r27
 46a:	a7 95       	ror	r26
 46c:	97 95       	ror	r25
 46e:	87 95       	ror	r24
 470:	16 94       	lsr	r1
 472:	d1 f7       	brne	.-12     	; 0x468 <MCP2515_VidSendCANmsg+0x3e>
 474:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit((u8)(msgID<<5));
 478:	88 2d       	mov	r24, r8
 47a:	82 95       	swap	r24
 47c:	88 0f       	add	r24, r24
 47e:	80 7e       	andi	r24, 0xE0	; 224
 480:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit(0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit(0);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
        
     /* Setup message length and RTR bit */
     // 1000 & 1111 = 1000  (8 bytes)
       SPI_U8MasterTransmit((properties & 0x0F));  //RTR = 0 for write message
 490:	0f 70       	andi	r16, 0x0F	; 15
 492:	80 2f       	mov	r24, r16
 494:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
                                                   //max length = 8 bytes
	//(8 bytes for data)
	/* Store the message into the buffer */
	for(u8 i = 0; i < (properties & 0x0F); i++)
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	07 c0       	rjmp	.+14     	; 0x4aa <MCP2515_VidSendCANmsg+0x80>
		SPI_U8MasterTransmit(data[i]);
 49c:	f7 01       	movw	r30, r14
 49e:	ec 0f       	add	r30, r28
 4a0:	f1 1d       	adc	r31, r1
 4a2:	80 81       	ld	r24, Z
 4a4:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
     // 1000 & 1111 = 1000  (8 bytes)
       SPI_U8MasterTransmit((properties & 0x0F));  //RTR = 0 for write message
                                                   //max length = 8 bytes
	//(8 bytes for data)
	/* Store the message into the buffer */
	for(u8 i = 0; i < (properties & 0x0F); i++)
 4a8:	cf 5f       	subi	r28, 0xFF	; 255
 4aa:	8c 2f       	mov	r24, r28
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	20 2f       	mov	r18, r16
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	82 17       	cp	r24, r18
 4b4:	93 07       	cpc	r25, r19
 4b6:	94 f3       	brlt	.-28     	; 0x49c <MCP2515_VidSendCANmsg+0x72>
		SPI_U8MasterTransmit(data[i]);
		
    
	/* Release the bus */
	SPI_VidChipSelect(0);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
    
	/* Send request to send */
	SPI_VidChipSelect(1);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_RTS_TXB0);
 4c4:	81 e8       	ldi	r24, 0x81	; 129
 4c6:	0e 94 a2 02 	call	0x544	; 0x544 <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 95 02 	call	0x52a	; 0x52a <SPI_VidChipSelect>
}
 4d0:	cf 91       	pop	r28
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	bf 90       	pop	r11
 4da:	af 90       	pop	r10
 4dc:	9f 90       	pop	r9
 4de:	8f 90       	pop	r8
 4e0:	08 95       	ret

000004e2 <SPI_VidMasterInit>:
	CLR_BIT(SPSR, 0);

	// enable interrupt
	SET_BIT(temp_SPCR, 7);

	SPCR = temp_SPCR;
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	65 e0       	ldi	r22, 0x05	; 5
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	66 e0       	ldi	r22, 0x06	; 6
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	66 e0       	ldi	r22, 0x06	; 6
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	67 e0       	ldi	r22, 0x07	; 7
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	64 e0       	ldi	r22, 0x04	; 4
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 51e:	8e b1       	in	r24, 0x0e	; 14
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	8e b9       	out	0x0e, r24	; 14
 524:	80 e5       	ldi	r24, 0x50	; 80
 526:	8d b9       	out	0x0d, r24	; 13
 528:	08 95       	ret

0000052a <SPI_VidChipSelect>:
}

void SPI_VidChipSelect(u8 state)
{
	if(state == 1)
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	29 f4       	brne	.+10     	; 0x538 <SPI_VidChipSelect+0xe>
	{
		DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 536:	08 95       	ret
	}
	else
	{
		DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 542:	08 95       	ret

00000544 <SPI_U8MasterTransmit>:


u8 SPI_U8MasterTransmit(u8 Local_U8Data)
{
	u8 dataRead=0;
	SPDR = Local_U8Data;
 544:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR, 7)==0);
 546:	77 9b       	sbis	0x0e, 7	; 14
 548:	fe cf       	rjmp	.-4      	; 0x546 <SPI_U8MasterTransmit+0x2>
	dataRead = SPDR;
 54a:	8f b1       	in	r24, 0x0f	; 15
	return dataRead;
}
 54c:	08 95       	ret

0000054e <USART_u8SendCharSynch>:
	{
		Local_u8ErrorState = BUSY_FUNC;
	}

	return Local_u8ErrorState;
}
 54e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <USART_u8TransmitterBusyState>
 552:	91 11       	cpse	r25, r1
 554:	1d c0       	rjmp	.+58     	; 0x590 <USART_u8SendCharSynch+0x42>
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <USART_u8TransmitterBusyState>
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	ba 01       	movw	r22, r20
 562:	04 c0       	rjmp	.+8      	; 0x56c <USART_u8SendCharSynch+0x1e>
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	6f 4f       	sbci	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	5d 99       	sbic	0x0b, 5	; 11
 56e:	06 c0       	rjmp	.+12     	; 0x57c <USART_u8SendCharSynch+0x2e>
 570:	40 35       	cpi	r20, 0x50	; 80
 572:	93 ec       	ldi	r25, 0xC3	; 195
 574:	59 07       	cpc	r21, r25
 576:	61 05       	cpc	r22, r1
 578:	71 05       	cpc	r23, r1
 57a:	a1 f7       	brne	.-24     	; 0x564 <USART_u8SendCharSynch+0x16>
 57c:	40 35       	cpi	r20, 0x50	; 80
 57e:	53 4c       	sbci	r21, 0xC3	; 195
 580:	61 05       	cpc	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	39 f0       	breq	.+14     	; 0x594 <USART_u8SendCharSynch+0x46>
 586:	8c b9       	out	0x0c, r24	; 12
 588:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <USART_u8TransmitterBusyState>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	08 95       	ret
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	08 95       	ret
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret

00000598 <__vector_14>:

/*ISR of Tx USART*/
void __vector_14(void) __attribute((signal));
void __vector_14(void)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
	if(USART_u8TransmitterISRSource == SINGLE_CHAR)
 5ba:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <USART_u8TransmitterISRSource>
 5be:	81 11       	cpse	r24, r1
 5c0:	0b c0       	rjmp	.+22     	; 0x5d8 <__vector_14+0x40>
	{

		/*Let the state of USART back to idle*/
		USART_u8TransmitterBusyState = IDLE;
 5c2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <USART_u8TransmitterBusyState>

		/*Disable Transmitter Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	8f 7d       	andi	r24, 0xDF	; 223
 5ca:	8a b9       	out	0x0a, r24	; 10

		/*Invoke call back notification function*/
		USART_pvTransmitterNotificationFunction();
 5cc:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <USART_pvTransmitterNotificationFunction>
 5d0:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <USART_pvTransmitterNotificationFunction+0x1>
 5d4:	09 95       	icall
 5d6:	26 c0       	rjmp	.+76     	; 0x624 <__vector_14+0x8c>
	}
	else if(USART_u8TransmitterISRSource == STRING)
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	21 f5       	brne	.+72     	; 0x624 <__vector_14+0x8c>
	{
//		/*Store the char in UDR*/
		UDR = *(USART_pStringTransmitted+GLobal_u8StringCounter);
 5dc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <GLobal_u8StringCounter>
 5e0:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <USART_pStringTransmitted>
 5e4:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <USART_pStringTransmitted+0x1>
 5e8:	e8 0f       	add	r30, r24
 5ea:	f1 1d       	adc	r31, r1
 5ec:	80 81       	ld	r24, Z
 5ee:	8c b9       	out	0x0c, r24	; 12

		/*Increasing the counter of string iterator */
		GLobal_u8StringCounter++;
 5f0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <GLobal_u8StringCounter>
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <GLobal_u8StringCounter>

		/*Check string is transmitted or not*/
		if(*(USART_pStringTransmitted+GLobal_u8StringCounter) == '\0')
 5fa:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <USART_pStringTransmitted>
 5fe:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <USART_pStringTransmitted+0x1>
 602:	e8 0f       	add	r30, r24
 604:	f1 1d       	adc	r31, r1
 606:	80 81       	ld	r24, Z
 608:	81 11       	cpse	r24, r1
 60a:	0c c0       	rjmp	.+24     	; 0x624 <__vector_14+0x8c>
		{
			/*Let the state of USART back to idle*/
			USART_u8TransmitterBusyState = IDLE;
 60c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <USART_u8TransmitterBusyState>

			/*Disable Transmitter Interrupt*/
			CLR_BIT(UCSRB,UCSRB_UDRIE);
 610:	8a b1       	in	r24, 0x0a	; 10
 612:	8f 7d       	andi	r24, 0xDF	; 223
 614:	8a b9       	out	0x0a, r24	; 10

			/*Invoke call back notification function*/
			USART_pvStringTransmittedNotifiFunc();
 616:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <USART_pvStringTransmittedNotifiFunc>
 61a:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <USART_pvStringTransmittedNotifiFunc+0x1>
 61e:	09 95       	icall

			GLobal_u8StringCounter=0;
 620:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <GLobal_u8StringCounter>
		}

	}
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__vector_13>:

/*ISR of Rx USART*/
void __vector_13(void) __attribute((signal));
void __vector_13(void)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
	if(USART_u8RecieverISRSource == RECIEVE_CHAR)
 668:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 66c:	81 11       	cpse	r24, r1
 66e:	11 c0       	rjmp	.+34     	; 0x692 <__vector_13+0x4c>
	{
		/*READ the Recieved data from UDR register*/
		*USART_pu8RecievedData = UDR;
 670:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <USART_pu8RecievedData>
 674:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <USART_pu8RecievedData+0x1>
 678:	8c b1       	in	r24, 0x0c	; 12
 67a:	80 83       	st	Z, r24

		/*Let the state of reciever back idle*/
		USART_u8RecieverBusyState =IDLE;
 67c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <USART_u8RecieverBusyState>

		/*Disable Reciever Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
 680:	8a b1       	in	r24, 0x0a	; 10
 682:	8f 77       	andi	r24, 0x7F	; 127
 684:	8a b9       	out	0x0a, r24	; 10

		/*Invoke call back notification function*/
		USART_pvRecieverNotificationFunction();
 686:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <USART_pvRecieverNotificationFunction>
 68a:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <USART_pvRecieverNotificationFunction+0x1>
 68e:	09 95       	icall
 690:	1f c0       	rjmp	.+62     	; 0x6d0 <__vector_13+0x8a>
	}
	else if(USART_u8RecieverISRSource == BUFFER)
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	e9 f4       	brne	.+58     	; 0x6d0 <__vector_13+0x8a>
	{
		/*Recieve elements of buffer*/
		*(USART_pu8BufferRecieved+GLobal_u8BufferCounter) = UDR;
 696:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <GLobal_u8BufferCounter>
 69a:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <USART_pu8BufferRecieved>
 69e:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <USART_pu8BufferRecieved+0x1>
 6a2:	e8 0f       	add	r30, r24
 6a4:	f1 1d       	adc	r31, r1
 6a6:	9c b1       	in	r25, 0x0c	; 12
 6a8:	90 83       	st	Z, r25

		/*Increment to the next element*/
		GLobal_u8BufferCounter++;
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <GLobal_u8BufferCounter>

		if(GLobal_u8BufferCounter == Global_u8BufferSize)
 6b0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Global_u8BufferSize>
 6b4:	89 13       	cpse	r24, r25
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <__vector_13+0x8a>
		{
			/*Make the busy state idle again*/
			USART_u8RecieverBusyState = IDLE;
 6b8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <USART_u8RecieverBusyState>

			/*Disable Reciever Interrupt*/
			CLR_BIT(UCSRB,UCSRB_RXCIE);
 6bc:	8a b1       	in	r24, 0x0a	; 10
 6be:	8f 77       	andi	r24, 0x7F	; 127
 6c0:	8a b9       	out	0x0a, r24	; 10

			/*Invoke call back function*/
			USART_pvBufferNotificationFunction();
 6c2:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <USART_pvBufferNotificationFunction>
 6c6:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <USART_pvBufferNotificationFunction+0x1>
 6ca:	09 95       	icall

			GLobal_u8BufferCounter=0;
 6cc:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <GLobal_u8BufferCounter>
		}
	}
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
