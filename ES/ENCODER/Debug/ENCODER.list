
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013a4  080013ac  000113ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013a4  080013a4  000113ac  2**0
                  CONTENTS
  4 .ARM          00000000  080013a4  080013a4  000113ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013a4  080013ac  000113ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000113ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000000  080013ac  00020000  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080013ac  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd6  00000000  00000000  000113dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000826  00000000  00000000  00012fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000137d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00013a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002282  00000000  00000000  00013bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001382  00000000  00000000  00015e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a44a  00000000  00000000  000171c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002160e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006a0  00000000  00000000  00021660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800138c 	.word	0x0800138c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800138c 	.word	0x0800138c

080001d4 <Encoder_init>:

#include "ENCODER_interface.h"


void Encoder_init(Encoder_variables* copy_Encoder)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	copy_Encoder->CurrentTime = 0;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2200      	movs	r2, #0
 80001e0:	621a      	str	r2, [r3, #32]
	copy_Encoder->LastTime = 0;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2200      	movs	r2, #0
 80001e6:	625a      	str	r2, [r3, #36]	; 0x24
	copy_Encoder->delta_time  = 0;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f04f 0200 	mov.w	r2, #0
 80001ee:	629a      	str	r2, [r3, #40]	; 0x28

	copy_Encoder->EncoderCounter = 0;
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	f04f 0200 	mov.w	r2, #0
 80001f6:	f04f 0300 	mov.w	r3, #0
 80001fa:	e9c1 2300 	strd	r2, r3, [r1]
	copy_Encoder->LastEncoderCounter = 0;
 80001fe:	6879      	ldr	r1, [r7, #4]
 8000200:	f04f 0200 	mov.w	r2, #0
 8000204:	f04f 0300 	mov.w	r3, #0
 8000208:	e9c1 2306 	strd	r2, r3, [r1, #24]

	copy_Encoder->RPM = 0;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]

	EXTI_LINEx  EXTI_L0={copy_Encoder->Encoder_A_IRQn,
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000218:	733b      	strb	r3, [r7, #12]
 800021a:	2301      	movs	r3, #1
 800021c:	737b      	strb	r3, [r7, #13]
			EXTI_RISING_EDGE};
	EXTI_LINEx  EXTI_L1={copy_Encoder->Encoder_B_IRQn,
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000224:	723b      	strb	r3, [r7, #8]
 8000226:	2301      	movs	r3, #1
 8000228:	727b      	strb	r3, [r7, #9]
			EXTI_RISING_EDGE}; //ONCHANGE

	/* Enable Interrupt*/
	NVIC_voidEnableInterrupt(copy_Encoder->Encoder_A_IRQn);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9ed 	bl	8000610 <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(copy_Encoder->Encoder_B_IRQn);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f9e7 	bl	8000610 <NVIC_voidEnableInterrupt>

	/*set call back functions*/
	EXTI_voidSetCallBack(&EXTI_L0,copy_Encoder->ptr_forward);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	4611      	mov	r1, r2
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f8bf 	bl	80003d0 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(&EXTI_L1,copy_Encoder->ptr_backward);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	4611      	mov	r1, r2
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f8b7 	bl	80003d0 <EXTI_voidSetCallBack>

	EXTI_voidInit(&EXTI_L0);
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f87a 	bl	8000360 <EXTI_voidInit>
	EXTI_voidInit(&EXTI_L1);
 800026c:	f107 0308 	add.w	r3, r7, #8
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f875 	bl	8000360 <EXTI_voidInit>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <Encoder_Forward>:

void Encoder_Forward(Encoder_variables *local_encoder)
{
 800027e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	2300      	movs	r3, #0
 800028e:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	7a98      	ldrb	r0, [r3, #10]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7adb      	ldrb	r3, [r3, #11]
 8000298:	f107 020f 	add.w	r2, r7, #15
 800029c:	4619      	mov	r1, r3
 800029e:	f000 f963 	bl	8000568 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7b18      	ldrb	r0, [r3, #12]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	7b5b      	ldrb	r3, [r3, #13]
 80002aa:	f107 020e 	add.w	r2, r7, #14
 80002ae:	4619      	mov	r1, r3
 80002b0:	f000 f95a 	bl	8000568 <GPIO_GetPinValue>
	if(a != b)
 80002b4:	7bfa      	ldrb	r2, [r7, #15]
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d00a      	beq.n	80002d2 <Encoder_Forward+0x54>
		local_encoder->EncoderCounter++;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002c2:	f112 0801 	adds.w	r8, r2, #1
 80002c6:	f143 0900 	adc.w	r9, r3, #0
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	e9c3 8900 	strd	r8, r9, [r3]
	else
		local_encoder->EncoderCounter--;

}
 80002d0:	e008      	b.n	80002e4 <Encoder_Forward+0x66>
		local_encoder->EncoderCounter--;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002d8:	1e54      	subs	r4, r2, #1
 80002da:	f143 35ff 	adc.w	r5, r3, #4294967295
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	e9c3 4500 	strd	r4, r5, [r3]
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080002ee <Encoder_Backward>:

void Encoder_Backward(Encoder_variables *local_encoder)
{
 80002ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]
 80002fc:	2300      	movs	r3, #0
 80002fe:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	7a98      	ldrb	r0, [r3, #10]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7adb      	ldrb	r3, [r3, #11]
 8000308:	f107 020f 	add.w	r2, r7, #15
 800030c:	4619      	mov	r1, r3
 800030e:	f000 f92b 	bl	8000568 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	7b18      	ldrb	r0, [r3, #12]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	7b5b      	ldrb	r3, [r3, #13]
 800031a:	f107 020e 	add.w	r2, r7, #14
 800031e:	4619      	mov	r1, r3
 8000320:	f000 f922 	bl	8000568 <GPIO_GetPinValue>
	if(a == b)
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	7bbb      	ldrb	r3, [r7, #14]
 8000328:	429a      	cmp	r2, r3
 800032a:	d10a      	bne.n	8000342 <Encoder_Backward+0x54>
		local_encoder->EncoderCounter++;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000332:	f112 0801 	adds.w	r8, r2, #1
 8000336:	f143 0900 	adc.w	r9, r3, #0
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	e9c3 8900 	strd	r8, r9, [r3]
	else
		local_encoder->EncoderCounter--;

}
 8000340:	e008      	b.n	8000354 <Encoder_Backward+0x66>
		local_encoder->EncoderCounter--;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000348:	1e54      	subs	r4, r2, #1
 800034a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000360 <EXTI_voidInit>:

//ISR functions array prototype
static void (* EXTI_CallBack[16]) (void) = {NULL};

void EXTI_voidInit(EXTI_LINEx* copy_EXTILine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	/*First: clear all Pending Flags*/
    EXTI->PR=Clear_Pending_Flags;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <EXTI_voidInit+0x6c>)
 800036a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800036e:	615a      	str	r2, [r3, #20]

    /*disable Interrupt mask for selected Interrupt Line*/

    EXTI->IMR|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <EXTI_voidInit+0x6c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	4611      	mov	r1, r2
 800037a:	2201      	movs	r2, #1
 800037c:	408a      	lsls	r2, r1
 800037e:	4611      	mov	r1, r2
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <EXTI_voidInit+0x6c>)
 8000382:	430b      	orrs	r3, r1
 8000384:	6013      	str	r3, [r2, #0]

    /*Set Trigger Mode for selected Interrupt Line*/

    EXTI->RTSR|=((copy_EXTILine->EXTI_TRIG_MODE)<<(copy_EXTILine->EXTI_LINE_NUM));
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <EXTI_voidInit+0x6c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7852      	ldrb	r2, [r2, #1]
 800038e:	4611      	mov	r1, r2
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <EXTI_voidInit+0x6c>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6093      	str	r3, [r2, #8]
    EXTI->FTSR|=(((copy_EXTILine->EXTI_TRIG_MODE)>>1)<<(copy_EXTILine->EXTI_LINE_NUM));
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <EXTI_voidInit+0x6c>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7852      	ldrb	r2, [r2, #1]
 80003a8:	0852      	lsrs	r2, r2, #1
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI_voidInit+0x6c>)
 80003ba:	430b      	orrs	r3, r1
 80003bc:	60d3      	str	r3, [r2, #12]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40013c00 	.word	0x40013c00

080003d0 <EXTI_voidSetCallBack>:
{
	EXTI->SWIER|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
}

void EXTI_voidSetCallBack(EXTI_LINEx* copy_EXTILine,void (*Copy_pvCallBackFunc) (void))
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	EXTI_CallBack[(copy_EXTILine->EXTI_LINE_NUM)] = Copy_pvCallBackFunc;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <EXTI_voidSetCallBack+0x24>)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line0]();
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI0_IRQHandler+0x1c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line0);
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI0_IRQHandler+0x20>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI0_IRQHandler+0x20>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6153      	str	r3, [r2, #20]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000001c 	.word	0x2000001c
 8000418:	40013c00 	.word	0x40013c00

0800041c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line1]();
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI1_IRQHandler+0x1c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line1);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI1_IRQHandler+0x20>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI1_IRQHandler+0x20>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6153      	str	r3, [r2, #20]
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000001c 	.word	0x2000001c
 800043c:	40013c00 	.word	0x40013c00

08000440 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line2]();
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI2_IRQHandler+0x1c>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line2);
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <EXTI2_IRQHandler+0x20>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a04      	ldr	r2, [pc, #16]	; (8000460 <EXTI2_IRQHandler+0x20>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6153      	str	r3, [r2, #20]
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000001c 	.word	0x2000001c
 8000460:	40013c00 	.word	0x40013c00

08000464 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line3]();
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI3_IRQHandler+0x1c>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line3);
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <EXTI3_IRQHandler+0x20>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <EXTI3_IRQHandler+0x20>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	6153      	str	r3, [r2, #20]
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000001c 	.word	0x2000001c
 8000484:	40013c00 	.word	0x40013c00

08000488 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line4]();
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI4_IRQHandler+0x1c>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line4);
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI4_IRQHandler+0x20>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI4_IRQHandler+0x20>)
 8000498:	f043 0310 	orr.w	r3, r3, #16
 800049c:	6153      	str	r3, [r2, #20]
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000001c 	.word	0x2000001c
 80004a8:	40013c00 	.word	0x40013c00

080004ac <GPIO_SetPinValue>:
#include "GPIO_interface.h"
#include "GPIO_private.h"


u8  GPIO_SetPinValue(u8 Copy_u8Port,Pins_t Copy_u8Pin, u8 Copy_u8Value)
{	
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	460b      	mov	r3, r1
 80004b8:	71bb      	strb	r3, [r7, #6]
 80004ba:	4613      	mov	r3, r2
 80004bc:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState=FALSE;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]
	if ((Copy_u8Pin < GPIO_u8NumOfPins)&&(Copy_u8Port < GPIO_u8NumOfPorts))
 80004c2:	79bb      	ldrb	r3, [r7, #6]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d841      	bhi.n	800054c <GPIO_SetPinValue+0xa0>
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d83e      	bhi.n	800054c <GPIO_SetPinValue+0xa0>
	{
		switch(Copy_u8Port)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d028      	beq.n	8000526 <GPIO_SetPinValue+0x7a>
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	dc37      	bgt.n	8000548 <GPIO_SetPinValue+0x9c>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <GPIO_SetPinValue+0x36>
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d011      	beq.n	8000504 <GPIO_SetPinValue+0x58>
 80004e0:	e032      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		{ case GPIO_PORTA: ASSIGN_BIT(REG_GPIO_PORTA->ODR,Copy_u8Pin, Copy_u8Value);break;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <GPIO_SetPinValue+0xb0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	2101      	movs	r1, #1
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4013      	ands	r3, r2
 80004f2:	7979      	ldrb	r1, [r7, #5]
 80004f4:	79ba      	ldrb	r2, [r7, #6]
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <GPIO_SetPinValue+0xb0>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	e021      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTB: ASSIGN_BIT(REG_GPIO_PORTB->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <GPIO_SetPinValue+0xb4>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	79ba      	ldrb	r2, [r7, #6]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	43d2      	mvns	r2, r2
 8000512:	4013      	ands	r3, r2
 8000514:	7979      	ldrb	r1, [r7, #5]
 8000516:	79ba      	ldrb	r2, [r7, #6]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <GPIO_SetPinValue+0xb4>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6153      	str	r3, [r2, #20]
 8000524:	e010      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTC: ASSIGN_BIT(REG_GPIO_PORTC->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <GPIO_SetPinValue+0xb8>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	79ba      	ldrb	r2, [r7, #6]
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	43d2      	mvns	r2, r2
 8000534:	4013      	ands	r3, r2
 8000536:	7979      	ldrb	r1, [r7, #5]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <GPIO_SetPinValue+0xb8>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	bf00      	nop
		}
	   Local_u8ErrorState=TRUE;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
	   
	}
		
	return Local_u8ErrorState;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800

08000568 <GPIO_GetPinValue>:
  			
	return Local_u8ErrorState;
}

u8  GPIO_GetPinValue(u8 Copy_u8Port, Pins_t Copy_u8Pin, u8* Copy_u8PTRvalue)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	603a      	str	r2, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	460b      	mov	r3, r1
 8000576:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState=FALSE;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
	
	if ((Copy_u8PTRvalue!=NULL) && (Copy_u8Pin<GPIO_u8NumOfPins))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d038      	beq.n	80005f4 <GPIO_GetPinValue+0x8c>
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d835      	bhi.n	80005f4 <GPIO_GetPinValue+0x8c>
	{
		switch(Copy_u8Port)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d022      	beq.n	80005d4 <GPIO_GetPinValue+0x6c>
 800058e:	2b02      	cmp	r3, #2
 8000590:	dc2e      	bgt.n	80005f0 <GPIO_GetPinValue+0x88>
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <GPIO_GetPinValue+0x34>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d00e      	beq.n	80005b8 <GPIO_GetPinValue+0x50>
 800059a:	e029      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		{ case GPIO_PORTA:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTA->IDR, Copy_u8Pin);break;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <GPIO_GetPinValue+0x9c>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	401a      	ands	r2, r3
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	fa22 f303 	lsr.w	r3, r2, r3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	e01b      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTB:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTB->IDR, Copy_u8Pin);break;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <GPIO_GetPinValue+0xa0>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	79ba      	ldrb	r2, [r7, #6]
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	401a      	ands	r2, r3
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	fa22 f303 	lsr.w	r3, r2, r3
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e00d      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTC:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTC->IDR, Copy_u8Pin);break;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <GPIO_GetPinValue+0xa4>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	401a      	ands	r2, r3
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	fa22 f303 	lsr.w	r3, r2, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	bf00      	nop
		}
		
		Local_u8ErrorState=TRUE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
		
	} 

	return Local_u8ErrorState;
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800

08000610 <NVIC_voidEnableInterrupt>:
#include"NVIC_interface.h"

static u32 GlobalStatic_32GroupConfig;

void NVIC_voidEnableInterrupt(INT_PRIO_t Copy_u8InterruptPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	Copy_u8InterruptPriority-=7;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	3b07      	subs	r3, #7
 800061e:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[Copy_u8InterruptPriority / 32] = 1 << (Copy_u8InterruptPriority % 32);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	2201      	movs	r2, #1
 8000628:	fa02 f103 	lsl.w	r1, r2, r3
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <NVIC_voidEnableInterrupt+0x34>)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	095b      	lsrs	r3, r3, #5
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_config.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	
	GPIOA_MODER = GPIOA_Mode;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <PORT_voidInit+0xa4>)
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <PORT_voidInit+0xa8>)
 8000650:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <PORT_voidInit+0xac>)
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <PORT_voidInit+0xb0>)
 8000656:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <PORT_voidInit+0xb4>)
 800065a:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 800065e:	601a      	str	r2, [r3, #0]
	
	GPIOA_OTYPER = GPIOA_Output_Type ;
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <PORT_voidInit+0xb8>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type ;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <PORT_voidInit+0xbc>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type ;
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <PORT_voidInit+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	
	GPIOA_OSPEEDR = GPIOA_Speed;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <PORT_voidInit+0xc4>)
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <PORT_voidInit+0xc8>)
 8000676:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR = GPIOB_Speed;
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <PORT_voidInit+0xcc>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <PORT_voidInit+0xb0>)
 800067c:	601a      	str	r2, [r3, #0]
	GPIOC_OSPEEDR = GPIOC_Speed;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <PORT_voidInit+0xd0>)
 8000680:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000684:	601a      	str	r2, [r3, #0]
	
	GPIOA_PUPDR = GPIOA_PUPD;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <PORT_voidInit+0xd4>)
 8000688:	4a25      	ldr	r2, [pc, #148]	; (8000720 <PORT_voidInit+0xd8>)
 800068a:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <PORT_voidInit+0xdc>)
 800068e:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <PORT_voidInit+0xb0>)
 8000690:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <PORT_voidInit+0xe0>)
 8000694:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000698:	601a      	str	r2, [r3, #0]
	

    
    GPIOA_AFRL|=(GPIOA_AF<< GPIOx_AFRL0);
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <PORT_voidInit+0xe4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <PORT_voidInit+0xe4>)
 80006a0:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 80006a4:	6013      	str	r3, [r2, #0]
	GPIOB_AFRL|=(GPIOB_AF<< GPIOx_AFRL0);
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <PORT_voidInit+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <PORT_voidInit+0xe8>)
 80006ac:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 80006b0:	6013      	str	r3, [r2, #0]
	GPIOC_AFRL|=(GPIOC_AF<< GPIOx_AFRL0);
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <PORT_voidInit+0xec>)
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <PORT_voidInit+0xec>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6013      	str	r3, [r2, #0]
								
    GPIOA_AFRH|= (GPIOA_AF>> 32);
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <PORT_voidInit+0xf0>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	491e      	ldr	r1, [pc, #120]	; (8000738 <PORT_voidInit+0xf0>)
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <PORT_voidInit+0xf4>)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	600b      	str	r3, [r1, #0]
	GPIOB_AFRH|= (GPIOB_AF>> 32);
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <PORT_voidInit+0xf8>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	491d      	ldr	r1, [pc, #116]	; (8000740 <PORT_voidInit+0xf8>)
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <PORT_voidInit+0xfc>)
 80006ce:	4313      	orrs	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]
	GPIOC_AFRH|= (GPIOC_AF>> 32);
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <PORT_voidInit+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <PORT_voidInit+0x100>)
 80006d8:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 80006dc:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80006e0:	6013      	str	r3, [r2, #0]
	
	
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40020000 	.word	0x40020000
 80006f0:	69555550 	.word	0x69555550
 80006f4:	40020400 	.word	0x40020400
 80006f8:	55155555 	.word	0x55155555
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020004 	.word	0x40020004
 8000704:	40020404 	.word	0x40020404
 8000708:	40020804 	.word	0x40020804
 800070c:	40020008 	.word	0x40020008
 8000710:	4155fff5 	.word	0x4155fff5
 8000714:	40020408 	.word	0x40020408
 8000718:	40020808 	.word	0x40020808
 800071c:	4002000c 	.word	0x4002000c
 8000720:	65555555 	.word	0x65555555
 8000724:	4002040c 	.word	0x4002040c
 8000728:	4002080c 	.word	0x4002080c
 800072c:	40020020 	.word	0x40020020
 8000730:	40020420 	.word	0x40020420
 8000734:	40020820 	.word	0x40020820
 8000738:	40020024 	.word	0x40020024
 800073c:	b00bbb11 	.word	0xb00bbb11
 8000740:	40020424 	.word	0x40020424
 8000744:	bbbb0bbb 	.word	0xbbbb0bbb
 8000748:	40020824 	.word	0x40020824

0800074c <PWM_voidSetPinDirection>:

#include "GPIO_interface.h"

// PWM signal is at edge aligned mode

void  PWM_voidSetPinDirection(u8 Copy_u8tim, u8 Copy_u8ch){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	switch (Copy_u8tim)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3b01      	subs	r3, #1
 8000760:	2b03      	cmp	r3, #3
 8000762:	f200 8359 	bhi.w	8000e18 <PWM_voidSetPinDirection+0x6cc>
 8000766:	a201      	add	r2, pc, #4	; (adr r2, 800076c <PWM_voidSetPinDirection+0x20>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800077d 	.word	0x0800077d
 8000770:	08000927 	.word	0x08000927
 8000774:	08000af7 	.word	0x08000af7
 8000778:	08000ca1 	.word	0x08000ca1
	{
	/*** TIM1 ***/
	case TIM1:
		if (Copy_u8ch == CH1)
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d131      	bne.n	80007e6 <PWM_voidSetPinDirection+0x9a>
		{
			//GPIO_A->CRH&=~0x0000000F;
			//GPIO_A->CRH|= 0x0000000B; 	/* PA8: alternate func. output */

			TIM1_CCER |= 1<<0; /* CC1P = 0, CC1E = 1 */
 8000782:	4b9c      	ldr	r3, [pc, #624]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a9b      	ldr	r2, [pc, #620]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]
			TIM1_BDTR |=0x8000;
 800078e:	4b9a      	ldr	r3, [pc, #616]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a99      	ldr	r2, [pc, #612]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 8000794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000798:	6013      	str	r3, [r2, #0]
			TIM1_CCMR1&=~0x00FF;
 800079a:	4b98      	ldr	r3, [pc, #608]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a97      	ldr	r2, [pc, #604]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 80007a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007a4:	6013      	str	r3, [r2, #0]
			TIM1_CCMR1|= 0x0068;  /* OC1M=PWM mode 1, OC1PE=1 */
 80007a6:	4b95      	ldr	r3, [pc, #596]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a94      	ldr	r2, [pc, #592]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 80007ac:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80007b0:	6013      	str	r3, [r2, #0]
			TIM1_CR1  |= 1<<7;	/* Auto reload preload enable */
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6013      	str	r3, [r2, #0]

			TIM1_PSC = PSC_TIM1;
 80007be:	4b91      	ldr	r3, [pc, #580]	; (8000a04 <PWM_voidSetPinDirection+0x2b8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
			TIM1_ARR = ARR_TIM1;
 80007c4:	4b90      	ldr	r3, [pc, #576]	; (8000a08 <PWM_voidSetPinDirection+0x2bc>)
 80007c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007ca:	601a      	str	r2, [r3, #0]

			TIM1_EGR |= 1; /* UG = 1 (generate update) */
 80007cc:	4b8f      	ldr	r3, [pc, #572]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a8e      	ldr	r2, [pc, #568]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 0x01; /* timer enable (CEN = 1) */
 80007d8:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a88      	ldr	r2, [pc, #544]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
			TIM1_ARR = ARR_TIM1;

			TIM1_EGR |= 1; /* UG = 1 (generate update) */
			TIM1_CR1 |= 0x01; /* timer enable (CEN = 1) */
		}
		break;
 80007e4:	e31a      	b.n	8000e1c <PWM_voidSetPinDirection+0x6d0>
		else if (Copy_u8ch == CH2)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d131      	bne.n	8000850 <PWM_voidSetPinDirection+0x104>
			TIM1_CCER |= 1<<4; /* CC2P = 0, CC2E = 1 */
 80007ec:	4b81      	ldr	r3, [pc, #516]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a80      	ldr	r2, [pc, #512]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
			TIM1_BDTR |=0x8000;
 80007f8:	4b7f      	ldr	r3, [pc, #508]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a7e      	ldr	r2, [pc, #504]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
			TIM1_CCMR1&=~0xFF00;
 8000804:	4b7d      	ldr	r3, [pc, #500]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a7c      	ldr	r2, [pc, #496]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 800080a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800080e:	6013      	str	r3, [r2, #0]
			TIM1_CCMR1 |= 0x6800;  /* OC2M=PWM1, OC2PE=1 */
 8000810:	4b7a      	ldr	r3, [pc, #488]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a79      	ldr	r2, [pc, #484]	; (80009fc <PWM_voidSetPinDirection+0x2b0>)
 8000816:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 800081a:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 1<<7;	/* Auto reload preload enable*/
 800081c:	4b78      	ldr	r3, [pc, #480]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a77      	ldr	r2, [pc, #476]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 8000822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000826:	6013      	str	r3, [r2, #0]
			TIM1_PSC = PSC_TIM1;
 8000828:	4b76      	ldr	r3, [pc, #472]	; (8000a04 <PWM_voidSetPinDirection+0x2b8>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
			TIM1_ARR = ARR_TIM1;
 800082e:	4b76      	ldr	r3, [pc, #472]	; (8000a08 <PWM_voidSetPinDirection+0x2bc>)
 8000830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000834:	601a      	str	r2, [r3, #0]
			TIM1_EGR |= 1; /* UG = 1 (generate update) */
 8000836:	4b75      	ldr	r3, [pc, #468]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a74      	ldr	r2, [pc, #464]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000842:	4b6f      	ldr	r3, [pc, #444]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a6e      	ldr	r2, [pc, #440]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6013      	str	r3, [r2, #0]
		break;
 800084e:	e2e5      	b.n	8000e1c <PWM_voidSetPinDirection+0x6d0>
		else if (Copy_u8ch == CH3)
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d131      	bne.n	80008ba <PWM_voidSetPinDirection+0x16e>
			TIM1_CCER |= 1<<8; /* CC3P = 0, CC3E = 1 */
 8000856:	4b67      	ldr	r3, [pc, #412]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a66      	ldr	r2, [pc, #408]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	6013      	str	r3, [r2, #0]
			TIM1_BDTR |=0x8000;
 8000862:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a64      	ldr	r2, [pc, #400]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	6013      	str	r3, [r2, #0]
			TIM1_CCMR2&=~0x00FF;
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a67      	ldr	r2, [pc, #412]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 8000874:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000878:	6013      	str	r3, [r2, #0]
			TIM1_CCMR2 |= 0x0068;  /* OC3M=PWM1, OC3PE=1 */
 800087a:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a64      	ldr	r2, [pc, #400]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 8000880:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000884:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a5d      	ldr	r2, [pc, #372]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6013      	str	r3, [r2, #0]
			TIM1_PSC = PSC_TIM1;
 8000892:	4b5c      	ldr	r3, [pc, #368]	; (8000a04 <PWM_voidSetPinDirection+0x2b8>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
			TIM1_ARR = ARR_TIM1;
 8000898:	4b5b      	ldr	r3, [pc, #364]	; (8000a08 <PWM_voidSetPinDirection+0x2bc>)
 800089a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800089e:	601a      	str	r2, [r3, #0]
			TIM1_EGR |= 1; /* UG = 1 (generate update) */
 80008a0:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a59      	ldr	r2, [pc, #356]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 0x01; /* timer enable (CEN = 1) */
 80008ac:	4b54      	ldr	r3, [pc, #336]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6013      	str	r3, [r2, #0]
		break;
 80008b8:	e2b0      	b.n	8000e1c <PWM_voidSetPinDirection+0x6d0>
		else if (Copy_u8ch == CH4)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	2b04      	cmp	r3, #4
 80008be:	f040 82ad 	bne.w	8000e1c <PWM_voidSetPinDirection+0x6d0>
			TIM1_CCER |= 1<<12; /* CC4P = 0, CC4E = 1 */
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a4b      	ldr	r2, [pc, #300]	; (80009f4 <PWM_voidSetPinDirection+0x2a8>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008cc:	6013      	str	r3, [r2, #0]
			TIM1_BDTR |=0x8000;
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <PWM_voidSetPinDirection+0x2ac>)
 80008d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d8:	6013      	str	r3, [r2, #0]
			TIM1_CCMR2&=~0xFF00;
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a4c      	ldr	r2, [pc, #304]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 80008e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008e4:	6013      	str	r3, [r2, #0]
			TIM1_CCMR2 |= 0x6800;  /* OC4M=PWM1, OC4PE=1 */
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <PWM_voidSetPinDirection+0x2c4>)
 80008ec:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80008f0:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 1<<7;	/* Auto reload preload enable*/
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a42      	ldr	r2, [pc, #264]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6013      	str	r3, [r2, #0]
			TIM1_PSC = PSC_TIM1;
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <PWM_voidSetPinDirection+0x2b8>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
			TIM1_ARR = ARR_TIM1;
 8000904:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <PWM_voidSetPinDirection+0x2bc>)
 8000906:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800090a:	601a      	str	r2, [r3, #0]
			TIM1_EGR |= 1; /* UG = 1 (generate update) */
 800090c:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a3e      	ldr	r2, [pc, #248]	; (8000a0c <PWM_voidSetPinDirection+0x2c0>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
			TIM1_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <PWM_voidSetPinDirection+0x2b4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]
		break;
 8000924:	e27a      	b.n	8000e1c <PWM_voidSetPinDirection+0x6d0>

		/*** TIM2 ***/

	case TIM2:
		if (Copy_u8ch == CH1)
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d12f      	bne.n	800098c <PWM_voidSetPinDirection+0x240>

		{
			//GPIO_A->CRL&=~0x0000000F;
			//GPIO_A->CRL|= 0x0000000B; 	/* PA0: alternate func. output */

			TIM2_CCER |= 1<<0; /* CC1P = 0, CC1E = 1 */
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <PWM_voidSetPinDirection+0x2c8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a38      	ldr	r2, [pc, #224]	; (8000a14 <PWM_voidSetPinDirection+0x2c8>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]
			TIM2_CCMR1&=~0x00FF;
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 800093e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000942:	6013      	str	r3, [r2, #0]
			TIM2_CCMR1 |= 0x0068;  /* OC1M=PWM1, OC1PE=1 */
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a33      	ldr	r2, [pc, #204]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 800094a:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800094e:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095e:	6013      	str	r3, [r2, #0]

			TIM2_PSC = PSC_TIM2;
 8000960:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <PWM_voidSetPinDirection+0x2d0>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
			TIM2_ARR = ARR_TIM2;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <PWM_voidSetPinDirection+0x2d4>)
 8000968:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800096c:	601a      	str	r2, [r3, #0]

			TIM2_EGR |= 1; /* UG = 1 (generate update) */
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <PWM_voidSetPinDirection+0x2d8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <PWM_voidSetPinDirection+0x2d8>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 0x01; /* timer enable (CEN = 1) */
 800097a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6013      	str	r3, [r2, #0]
			TIM2_ARR = ARR_TIM2;

			TIM2_EGR |= 1; /* UG = 1 (generate update) */
			TIM2_CR1 |= 0x01; /* timer enable (CEN = 1) */
		}
		break;
 800098a:	e249      	b.n	8000e20 <PWM_voidSetPinDirection+0x6d4>
		else if (Copy_u8ch == CH2)
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d14a      	bne.n	8000a28 <PWM_voidSetPinDirection+0x2dc>
			TIM2_CCER |= 1<<4; /* CC2P = 0, CC2E = 1 */
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <PWM_voidSetPinDirection+0x2c8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <PWM_voidSetPinDirection+0x2c8>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6013      	str	r3, [r2, #0]
			TIM2_CCMR1&=~0xFF00;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 80009a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80009a8:	6013      	str	r3, [r2, #0]
			TIM2_CCMR1 |= 0x6800;  /* OC2M=PWM1, OC2PE=1 */
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <PWM_voidSetPinDirection+0x2cc>)
 80009b0:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80009b4:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 1<<7;	/* Auto reload preload enable*/
 80009b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6013      	str	r3, [r2, #0]
			TIM2_PSC = PSC_TIM2;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <PWM_voidSetPinDirection+0x2d0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
			TIM2_ARR = ARR_TIM2;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <PWM_voidSetPinDirection+0x2d4>)
 80009ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009d2:	601a      	str	r2, [r3, #0]
			TIM2_EGR |= 1; /* UG = 1 (generate update) */
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <PWM_voidSetPinDirection+0x2d8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <PWM_voidSetPinDirection+0x2d8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 0x01; /* timer enable (CEN = 1) */
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]
		break;
 80009f0:	e216      	b.n	8000e20 <PWM_voidSetPinDirection+0x6d4>
 80009f2:	bf00      	nop
 80009f4:	40010020 	.word	0x40010020
 80009f8:	40010044 	.word	0x40010044
 80009fc:	40010018 	.word	0x40010018
 8000a00:	40010000 	.word	0x40010000
 8000a04:	40010028 	.word	0x40010028
 8000a08:	4001002c 	.word	0x4001002c
 8000a0c:	40010014 	.word	0x40010014
 8000a10:	4001001c 	.word	0x4001001c
 8000a14:	40000020 	.word	0x40000020
 8000a18:	40000018 	.word	0x40000018
 8000a1c:	40000028 	.word	0x40000028
 8000a20:	4000002c 	.word	0x4000002c
 8000a24:	40000014 	.word	0x40000014
		else if (Copy_u8ch == CH3)
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d12f      	bne.n	8000a8e <PWM_voidSetPinDirection+0x342>
			TIM2_CCER |= 1<<8; /* CC3P = 0, CC3E = 1 */
 8000a2e:	4b90      	ldr	r3, [pc, #576]	; (8000c70 <PWM_voidSetPinDirection+0x524>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a8f      	ldr	r2, [pc, #572]	; (8000c70 <PWM_voidSetPinDirection+0x524>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	6013      	str	r3, [r2, #0]
			TIM2_CCMR2&=~0x00FF;
 8000a3a:	4b8e      	ldr	r3, [pc, #568]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a8d      	ldr	r2, [pc, #564]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000a40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a44:	6013      	str	r3, [r2, #0]
			TIM2_CCMR2 |= 0x0068;  /* OC3M=PWM1, OC3PE=1 */
 8000a46:	4b8b      	ldr	r3, [pc, #556]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a8a      	ldr	r2, [pc, #552]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000a4c:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000a50:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6013      	str	r3, [r2, #0]
			TIM2_PSC = PSC_TIM2;
 8000a62:	4b85      	ldr	r3, [pc, #532]	; (8000c78 <PWM_voidSetPinDirection+0x52c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
			TIM2_ARR = ARR_TIM2;
 8000a68:	4b84      	ldr	r3, [pc, #528]	; (8000c7c <PWM_voidSetPinDirection+0x530>)
 8000a6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a6e:	601a      	str	r2, [r3, #0]
			TIM2_EGR |= 1; /* UG = 1 (generate update) */
 8000a70:	4b83      	ldr	r3, [pc, #524]	; (8000c80 <PWM_voidSetPinDirection+0x534>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a82      	ldr	r2, [pc, #520]	; (8000c80 <PWM_voidSetPinDirection+0x534>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]
		break;
 8000a8c:	e1c8      	b.n	8000e20 <PWM_voidSetPinDirection+0x6d4>
		else if (Copy_u8ch == CH4)
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	f040 81c5 	bne.w	8000e20 <PWM_voidSetPinDirection+0x6d4>
			TIM2_CCER |= 1<<12; /* CC4P = 0, CC4E = 1 */
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <PWM_voidSetPinDirection+0x524>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a75      	ldr	r2, [pc, #468]	; (8000c70 <PWM_voidSetPinDirection+0x524>)
 8000a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa0:	6013      	str	r3, [r2, #0]
			TIM2_CCMR2&=~0xFF00;
 8000aa2:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a73      	ldr	r2, [pc, #460]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aac:	6013      	str	r3, [r2, #0]
			TIM2_CCMR2 |= 0x6800;  /* OC4M=PWM1, OC4PE=1 */
 8000aae:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a70      	ldr	r2, [pc, #448]	; (8000c74 <PWM_voidSetPinDirection+0x528>)
 8000ab4:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000ab8:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6013      	str	r3, [r2, #0]
			TIM2_PSC = PSC_TIM2;
 8000aca:	4b6b      	ldr	r3, [pc, #428]	; (8000c78 <PWM_voidSetPinDirection+0x52c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
			TIM2_ARR = ARR_TIM2;
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <PWM_voidSetPinDirection+0x530>)
 8000ad2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ad6:	601a      	str	r2, [r3, #0]
			TIM2_EGR |= 1; /* UG = 1 (generate update) */
 8000ad8:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <PWM_voidSetPinDirection+0x534>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a68      	ldr	r2, [pc, #416]	; (8000c80 <PWM_voidSetPinDirection+0x534>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]
			TIM2_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6013      	str	r3, [r2, #0]
		break;
 8000af4:	e194      	b.n	8000e20 <PWM_voidSetPinDirection+0x6d4>

		/*** TIM3 ***/

	case TIM3:
		if (Copy_u8ch == CH1)
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d12b      	bne.n	8000b54 <PWM_voidSetPinDirection+0x408>

		{
			//GPIO_A->CRL&=~0x0F000000;
			//GPIO_A->CRL|= 0x0B000000; 	/* PA6: alternate func. output */

			TIM3_CCER |= 1<<0; /* CC1P = 0, CC1E = 1 */
 8000afc:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a60      	ldr	r2, [pc, #384]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
			TIM3_CCMR1&=~0x00FF;
 8000b08:	4b5f      	ldr	r3, [pc, #380]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a5e      	ldr	r2, [pc, #376]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000b12:	6013      	str	r3, [r2, #0]
			TIM3_CCMR1 |= 0x0068;  /* OC1M=PWM1, OC1PE=1 */
 8000b14:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a5b      	ldr	r2, [pc, #364]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b1a:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000b1e:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000b20:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a59      	ldr	r2, [pc, #356]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6013      	str	r3, [r2, #0]

			TIM3_PSC = PSC_TIM3;
 8000b2c:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <PWM_voidSetPinDirection+0x544>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
			TIM3_ARR = ARR_TIM3;
 8000b32:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <PWM_voidSetPinDirection+0x548>)
 8000b34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b38:	601a      	str	r2, [r3, #0]

			TIM3_EGR |= 1; /* UG = 1 (generate update) */
 8000b3a:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a56      	ldr	r2, [pc, #344]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6013      	str	r3, [r2, #0]
			TIM3_ARR = ARR_TIM3;

			TIM3_EGR |= 1; /* UG = 1 (generate update) */
			TIM3_CR1 |= 0x01; /* timer enable (CEN = 1) */
		}
		break;
 8000b52:	e167      	b.n	8000e24 <PWM_voidSetPinDirection+0x6d8>
		else if (Copy_u8ch == CH2)
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d12b      	bne.n	8000bb2 <PWM_voidSetPinDirection+0x466>
			TIM3_CCER |= 1<<4; /* CC2P = 0, CC2E = 1 */
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6013      	str	r3, [r2, #0]
			TIM3_CCMR1&=~0xFF00;
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b70:	6013      	str	r3, [r2, #0]
			TIM3_CCMR1 |= 0x6800;  /* OC2M=PWM1, OC2PE=1 */
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <PWM_voidSetPinDirection+0x53c>)
 8000b78:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000b7c:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000b7e:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a42      	ldr	r2, [pc, #264]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6013      	str	r3, [r2, #0]
			TIM3_PSC = PSC_TIM3;
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <PWM_voidSetPinDirection+0x544>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
			TIM3_ARR = ARR_TIM3;
 8000b90:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <PWM_voidSetPinDirection+0x548>)
 8000b92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b96:	601a      	str	r2, [r3, #0]
			TIM3_EGR |= 1; /* UG = 1 (generate update) */
 8000b98:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000ba4:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]
		break;
 8000bb0:	e138      	b.n	8000e24 <PWM_voidSetPinDirection+0x6d8>
		else if (Copy_u8ch == CH3)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d12b      	bne.n	8000c10 <PWM_voidSetPinDirection+0x4c4>
			TIM3_CCER |= 1<<8; /* CC3P = 0, CC3E = 1 */
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
			TIM3_CCMR2&=~0x00FF;
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000bce:	6013      	str	r3, [r2, #0]
			TIM3_CCMR2 |= 0x0068;  /* OC3M=PWM1, OC3PE=1 */
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000bd6:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000bda:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be6:	6013      	str	r3, [r2, #0]
			TIM3_PSC = PSC_TIM3;
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <PWM_voidSetPinDirection+0x544>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
			TIM3_ARR = ARR_TIM3;
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <PWM_voidSetPinDirection+0x548>)
 8000bf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bf4:	601a      	str	r2, [r3, #0]
			TIM3_EGR |= 1; /* UG = 1 (generate update) */
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]
		break;
 8000c0e:	e109      	b.n	8000e24 <PWM_voidSetPinDirection+0x6d8>
		else if (Copy_u8ch == CH4)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	f040 8106 	bne.w	8000e24 <PWM_voidSetPinDirection+0x6d8>
			TIM3_CCER |= 1<<12; /* CC4P = 0, CC4E = 1 */
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <PWM_voidSetPinDirection+0x538>)
 8000c1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c22:	6013      	str	r3, [r2, #0]
			TIM3_CCMR2&=~0xFF00;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c2e:	6013      	str	r3, [r2, #0]
			TIM3_CCMR2 |= 0x6800;  /* OC4M=PWM1, OC4PE=1 */
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <PWM_voidSetPinDirection+0x550>)
 8000c36:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000c3a:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6013      	str	r3, [r2, #0]
			TIM3_PSC = PSC_TIM3;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <PWM_voidSetPinDirection+0x544>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
			TIM3_ARR = ARR_TIM3;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <PWM_voidSetPinDirection+0x548>)
 8000c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c54:	601a      	str	r2, [r3, #0]
			TIM3_EGR |= 1; /* UG = 1 (generate update) */
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <PWM_voidSetPinDirection+0x54c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]
			TIM3_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <PWM_voidSetPinDirection+0x540>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]
		break;
 8000c6e:	e0d9      	b.n	8000e24 <PWM_voidSetPinDirection+0x6d8>
 8000c70:	40000020 	.word	0x40000020
 8000c74:	4000001c 	.word	0x4000001c
 8000c78:	40000028 	.word	0x40000028
 8000c7c:	4000002c 	.word	0x4000002c
 8000c80:	40000014 	.word	0x40000014
 8000c84:	40000420 	.word	0x40000420
 8000c88:	40000418 	.word	0x40000418
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40000428 	.word	0x40000428
 8000c94:	4000042c 	.word	0x4000042c
 8000c98:	40000414 	.word	0x40000414
 8000c9c:	4000041c 	.word	0x4000041c
		/*** TIM4 ***/

	case TIM4:
		if (Copy_u8ch == CH1)
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d12b      	bne.n	8000cfe <PWM_voidSetPinDirection+0x5b2>

		{
			//GPIO_B->CRL&=~0x0F000000;
			//GPIO_B->CRL|= 0x0B000000; 	/* PB6: alternate func. output */

			TIM4_CCER |= 1<<0; /* CC1P = 0, CC1E = 1 */
 8000ca6:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6013      	str	r3, [r2, #0]
			TIM4_CCMR1&=~0x00FF;
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000cb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cbc:	6013      	str	r3, [r2, #0]
			TIM4_CCMR1 |= 0x0068;  /* OC1M=PWM1, OC1PE=1 */
 8000cbe:	4b5f      	ldr	r3, [pc, #380]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a5e      	ldr	r2, [pc, #376]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000cc4:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000cc8:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a5c      	ldr	r2, [pc, #368]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6013      	str	r3, [r2, #0]

			TIM4_PSC = PSC_TIM4;
 8000cd6:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <PWM_voidSetPinDirection+0x6f8>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
			TIM4_ARR = ARR_TIM4;
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <PWM_voidSetPinDirection+0x6fc>)
 8000cde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ce2:	601a      	str	r2, [r3, #0]

			TIM4_EGR |= 1; /* UG = 1 (generate update) */
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000cf0:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a52      	ldr	r2, [pc, #328]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]
			TIM4_ARR = ARR_TIM4;

			TIM4_EGR |= 1; /* UG = 1 (generate update) */
			TIM4_CR1 |= 0x01; /* timer enable (CEN = 1) */
		}
		break;
 8000cfc:	e094      	b.n	8000e28 <PWM_voidSetPinDirection+0x6dc>
		else if (Copy_u8ch == CH2)
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d12b      	bne.n	8000d5c <PWM_voidSetPinDirection+0x610>
			TIM4_CCER |= 1<<4; /* CC2P = 0, CC2E = 1 */
 8000d04:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a4b      	ldr	r2, [pc, #300]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
			TIM4_CCMR1&=~0xFF00;
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000d1a:	6013      	str	r3, [r2, #0]
			TIM4_CCMR1 |= 0x6800;  /* OC2M=PWM1, OC2PE=1 */
 8000d1c:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <PWM_voidSetPinDirection+0x6f0>)
 8000d22:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000d26:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000d28:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a44      	ldr	r2, [pc, #272]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d32:	6013      	str	r3, [r2, #0]
			TIM4_PSC = PSC_TIM4;
 8000d34:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <PWM_voidSetPinDirection+0x6f8>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
			TIM4_ARR = ARR_TIM4;
 8000d3a:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <PWM_voidSetPinDirection+0x6fc>)
 8000d3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d40:	601a      	str	r2, [r3, #0]
			TIM4_EGR |= 1; /* UG = 1 (generate update) */
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6013      	str	r3, [r2, #0]
		break;
 8000d5a:	e065      	b.n	8000e28 <PWM_voidSetPinDirection+0x6dc>
		else if (Copy_u8ch == CH3)
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d12b      	bne.n	8000dba <PWM_voidSetPinDirection+0x66e>
			TIM4_CCER |= 1<<8; /* CC3P = 0, CC3E = 1 */
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a34      	ldr	r2, [pc, #208]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6c:	6013      	str	r3, [r2, #0]
			TIM4_CCMR2&=~0x00FF;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000d74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d78:	6013      	str	r3, [r2, #0]
			TIM4_CCMR2 |= 0x0068;  /* OC3M=PWM1, OC3PE=1 */
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000d80:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000d84:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a2d      	ldr	r2, [pc, #180]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	6013      	str	r3, [r2, #0]
			TIM4_PSC = PSC_TIM4;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <PWM_voidSetPinDirection+0x6f8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
			TIM4_ARR = ARR_TIM4;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <PWM_voidSetPinDirection+0x6fc>)
 8000d9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d9e:	601a      	str	r2, [r3, #0]
			TIM4_EGR |= 1; /* UG = 1 (generate update) */
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]
		break;
 8000db8:	e036      	b.n	8000e28 <PWM_voidSetPinDirection+0x6dc>
		else if (Copy_u8ch == CH4)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d133      	bne.n	8000e28 <PWM_voidSetPinDirection+0x6dc>
			TIM4_CCER |= 1<<12; /* CC4P = 0, CC4E = 1 */
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <PWM_voidSetPinDirection+0x6ec>)
 8000dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dca:	6013      	str	r3, [r2, #0]
			TIM4_CCMR2&=~0xFF00;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000dd6:	6013      	str	r3, [r2, #0]
			TIM4_CCMR2 |= 0x6800;  /* OC4M=PWM1, OC4PE=1 */
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <PWM_voidSetPinDirection+0x704>)
 8000dde:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000de2:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 1<<7;	/* Auto reload preload enable*/
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	6013      	str	r3, [r2, #0]
			TIM4_PSC = PSC_TIM4;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <PWM_voidSetPinDirection+0x6f8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
			TIM4_ARR = ARR_TIM4;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <PWM_voidSetPinDirection+0x6fc>)
 8000df8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000dfc:	601a      	str	r2, [r3, #0]
			TIM4_EGR |= 1; /* UG = 1 (generate update) */
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <PWM_voidSetPinDirection+0x700>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]
			TIM4_CR1 |= 0x01; /* timer enable (CEN = 1) */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <PWM_voidSetPinDirection+0x6f4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6013      	str	r3, [r2, #0]
		break;
 8000e16:	e007      	b.n	8000e28 <PWM_voidSetPinDirection+0x6dc>

	default:       break;
 8000e18:	bf00      	nop
 8000e1a:	e006      	b.n	8000e2a <PWM_voidSetPinDirection+0x6de>
		break;
 8000e1c:	bf00      	nop
 8000e1e:	e004      	b.n	8000e2a <PWM_voidSetPinDirection+0x6de>
		break;
 8000e20:	bf00      	nop
 8000e22:	e002      	b.n	8000e2a <PWM_voidSetPinDirection+0x6de>
		break;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <PWM_voidSetPinDirection+0x6de>
		break;
 8000e28:	bf00      	nop
	}



}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40000820 	.word	0x40000820
 8000e3c:	40000818 	.word	0x40000818
 8000e40:	40000800 	.word	0x40000800
 8000e44:	40000828 	.word	0x40000828
 8000e48:	4000082c 	.word	0x4000082c
 8000e4c:	40000814 	.word	0x40000814
 8000e50:	4000081c 	.word	0x4000081c

08000e54 <PWM_voidWrite>:

void  PWM_voidWrite(u8 Copy_u8tim, u8 Copy_u8ch,u16 Copy_u16dutyCycle){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	4613      	mov	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]

	switch (Copy_u8tim)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d87a      	bhi.n	8000f64 <PWM_voidWrite+0x110>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <PWM_voidWrite+0x20>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08000ebd 	.word	0x08000ebd
 8000e7c:	08000ef5 	.word	0x08000ef5
 8000e80:	08000f2d 	.word	0x08000f2d
	{
	/*** TIM1 ***/

	case TIM1:
		if (Copy_u8ch == CH1)
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d103      	bne.n	8000e92 <PWM_voidWrite+0x3e>
			TIM1_CCR1 = Copy_u16dutyCycle;
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <PWM_voidWrite+0x130>)
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]
			TIM1_CCR2 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH3)
			TIM1_CCR3 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH4)
			TIM1_CCR4 = Copy_u16dutyCycle;
		break;
 8000e90:	e06a      	b.n	8000f68 <PWM_voidWrite+0x114>
		else if (Copy_u8ch == CH2)
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d103      	bne.n	8000ea0 <PWM_voidWrite+0x4c>
			TIM1_CCR2 = Copy_u16dutyCycle;
 8000e98:	4a3b      	ldr	r2, [pc, #236]	; (8000f88 <PWM_voidWrite+0x134>)
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
		break;
 8000e9e:	e063      	b.n	8000f68 <PWM_voidWrite+0x114>
		else if (Copy_u8ch == CH3)
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d103      	bne.n	8000eae <PWM_voidWrite+0x5a>
			TIM1_CCR3 = Copy_u16dutyCycle;
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <PWM_voidWrite+0x138>)
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
		break;
 8000eac:	e05c      	b.n	8000f68 <PWM_voidWrite+0x114>
		else if (Copy_u8ch == CH4)
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d159      	bne.n	8000f68 <PWM_voidWrite+0x114>
			TIM1_CCR4 = Copy_u16dutyCycle;
 8000eb4:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <PWM_voidWrite+0x13c>)
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
		break;
 8000eba:	e055      	b.n	8000f68 <PWM_voidWrite+0x114>
		/*** TIM2 ***/

	case TIM2:
		if (Copy_u8ch == CH1)
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d103      	bne.n	8000eca <PWM_voidWrite+0x76>
			TIM2_CCR1 = Copy_u16dutyCycle;
 8000ec2:	4a34      	ldr	r2, [pc, #208]	; (8000f94 <PWM_voidWrite+0x140>)
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
			TIM2_CCR2 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH3)
			TIM2_CCR3 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH4)
			TIM2_CCR4 = Copy_u16dutyCycle;
		break;
 8000ec8:	e050      	b.n	8000f6c <PWM_voidWrite+0x118>
		else if (Copy_u8ch == CH2)
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d103      	bne.n	8000ed8 <PWM_voidWrite+0x84>
			TIM2_CCR2 = Copy_u16dutyCycle;
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <PWM_voidWrite+0x144>)
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
		break;
 8000ed6:	e049      	b.n	8000f6c <PWM_voidWrite+0x118>
		else if (Copy_u8ch == CH3)
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d103      	bne.n	8000ee6 <PWM_voidWrite+0x92>
			TIM2_CCR3 = Copy_u16dutyCycle;
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <PWM_voidWrite+0x148>)
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
		break;
 8000ee4:	e042      	b.n	8000f6c <PWM_voidWrite+0x118>
		else if (Copy_u8ch == CH4)
 8000ee6:	79bb      	ldrb	r3, [r7, #6]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d13f      	bne.n	8000f6c <PWM_voidWrite+0x118>
			TIM2_CCR4 = Copy_u16dutyCycle;
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <PWM_voidWrite+0x14c>)
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
		break;
 8000ef2:	e03b      	b.n	8000f6c <PWM_voidWrite+0x118>
		/*** TIM3 ***/

	case TIM3:
		if (Copy_u8ch == CH1)
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d103      	bne.n	8000f02 <PWM_voidWrite+0xae>
			TIM3_CCR1 = Copy_u16dutyCycle;
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <PWM_voidWrite+0x150>)
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]
			TIM3_CCR2 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH3)
			TIM3_CCR3 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH4)
			TIM3_CCR4 = Copy_u16dutyCycle;
		break;
 8000f00:	e036      	b.n	8000f70 <PWM_voidWrite+0x11c>
		else if (Copy_u8ch == CH2)
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d103      	bne.n	8000f10 <PWM_voidWrite+0xbc>
			TIM3_CCR2 = Copy_u16dutyCycle;
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <PWM_voidWrite+0x154>)
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
		break;
 8000f0e:	e02f      	b.n	8000f70 <PWM_voidWrite+0x11c>
		else if (Copy_u8ch == CH3)
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d103      	bne.n	8000f1e <PWM_voidWrite+0xca>
			TIM3_CCR3 = Copy_u16dutyCycle;
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <PWM_voidWrite+0x158>)
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
		break;
 8000f1c:	e028      	b.n	8000f70 <PWM_voidWrite+0x11c>
		else if (Copy_u8ch == CH4)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d125      	bne.n	8000f70 <PWM_voidWrite+0x11c>
			TIM3_CCR4 = Copy_u16dutyCycle;
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <PWM_voidWrite+0x15c>)
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
		break;
 8000f2a:	e021      	b.n	8000f70 <PWM_voidWrite+0x11c>
		/*** TIM4 ***/

	case TIM4:
		if (Copy_u8ch == CH1)
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d103      	bne.n	8000f3a <PWM_voidWrite+0xe6>
			TIM4_CCR1 = Copy_u16dutyCycle;
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <PWM_voidWrite+0x160>)
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	6013      	str	r3, [r2, #0]
			TIM4_CCR2 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH3)
			TIM4_CCR3 = Copy_u16dutyCycle;
		else if (Copy_u8ch == CH4)
			TIM4_CCR4 = Copy_u16dutyCycle;
		break;
 8000f38:	e01c      	b.n	8000f74 <PWM_voidWrite+0x120>
		else if (Copy_u8ch == CH2)
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d103      	bne.n	8000f48 <PWM_voidWrite+0xf4>
			TIM4_CCR2 = Copy_u16dutyCycle;
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <PWM_voidWrite+0x164>)
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
		break;
 8000f46:	e015      	b.n	8000f74 <PWM_voidWrite+0x120>
		else if (Copy_u8ch == CH3)
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d103      	bne.n	8000f56 <PWM_voidWrite+0x102>
			TIM4_CCR3 = Copy_u16dutyCycle;
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <PWM_voidWrite+0x168>)
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	6013      	str	r3, [r2, #0]
		break;
 8000f54:	e00e      	b.n	8000f74 <PWM_voidWrite+0x120>
		else if (Copy_u8ch == CH4)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d10b      	bne.n	8000f74 <PWM_voidWrite+0x120>
			TIM4_CCR4 = Copy_u16dutyCycle;
 8000f5c:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <PWM_voidWrite+0x16c>)
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
		break;
 8000f62:	e007      	b.n	8000f74 <PWM_voidWrite+0x120>

	default: break;
 8000f64:	bf00      	nop
 8000f66:	e006      	b.n	8000f76 <PWM_voidWrite+0x122>
		break;
 8000f68:	bf00      	nop
 8000f6a:	e004      	b.n	8000f76 <PWM_voidWrite+0x122>
		break;
 8000f6c:	bf00      	nop
 8000f6e:	e002      	b.n	8000f76 <PWM_voidWrite+0x122>
		break;
 8000f70:	bf00      	nop
 8000f72:	e000      	b.n	8000f76 <PWM_voidWrite+0x122>
		break;
 8000f74:	bf00      	nop

	}

}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40010034 	.word	0x40010034
 8000f88:	40010038 	.word	0x40010038
 8000f8c:	4001003c 	.word	0x4001003c
 8000f90:	40010040 	.word	0x40010040
 8000f94:	40000034 	.word	0x40000034
 8000f98:	40000038 	.word	0x40000038
 8000f9c:	4000003c 	.word	0x4000003c
 8000fa0:	40000040 	.word	0x40000040
 8000fa4:	40000434 	.word	0x40000434
 8000fa8:	40000438 	.word	0x40000438
 8000fac:	4000043c 	.word	0x4000043c
 8000fb0:	40000440 	.word	0x40000440
 8000fb4:	40000834 	.word	0x40000834
 8000fb8:	40000838 	.word	0x40000838
 8000fbc:	4000083c 	.word	0x4000083c
 8000fc0:	40000840 	.word	0x40000840

08000fc4 <RCC_voidSystemClockInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSystemClockInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

    /******************MCO1,2 Prescaler*************/
  	RCC->CFGR|=(Microcontroller_Clk1_Prescaler<<RCC_CFGR_MCO1PRE0);
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a36      	ldr	r2, [pc, #216]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fd2:	6093      	str	r3, [r2, #8]
	RCC->CFGR|=(Microcontroller_Clk2_Prescaler<<RCC_CFGR_MCO2PRE0);
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fde:	6093      	str	r3, [r2, #8]

    /******************MCO1,2 Source Selection*************/
	RCC->CFGR|=(Microcontroller_Clk_Output1<<RCC_CFGR_MCO10);
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6093      	str	r3, [r2, #8]
  	RCC->CFGR|=(Microcontroller_Clk_Output2<<RCC_CFGR_MCO20);
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000fee:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	6093      	str	r3, [r2, #8]


    /*************** Clock Security System ***************/
  	RCC->CR|=(RCC_u8CSSON<<RCC_CR_CSSON);
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8000ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ffe:	6013      	str	r3, [r2, #0]

	/*************** Clock Source Switch ***************/
  	RCC->CFGR|=(System_Clk_Source<<RCC_CFGR_SW0);
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001002:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	6093      	str	r3, [r2, #8]

	/****************** AHB Prescaler ******************/
  	RCC->CFGR|=(RCC_u8AHB_PRESCALER<<RCC_CFGR_HPRE0);
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	6093      	str	r3, [r2, #8]


	/****************** APB1 Prescaler ******************/
  	RCC->CFGR|=(RCC_u8APB1_PRESCALER<<RCC_CFGR_PPRE10);
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	6093      	str	r3, [r2, #8]
	/****************** APB2 Prescaler ******************/
	
  	RCC->CFGR|=(RCC_u8APB2_PRESCALER<<RCC_CFGR_PPRE20);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800101a:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	6093      	str	r3, [r2, #8]



	
	#if RCC_u8PLL_Mode==RCC_u8Clk_Enable
  	RCC->PLLCFGR=0;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  	RCC->PLLCFGR|=(PLL_InClk_Division_Factor<<RCC_PLLCFGR_PLLM0);
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_VCO_Multiplication_Factor<<RCC_PLLCFGR_PLLN0);
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001038:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800103c:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_MainClk_Division_Factor<<RCC_PLLCFGR_PLLP0);
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_Clk_Source<<RCC_PLLCFGR_PLLSRC);
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6053      	str	r3, [r2, #4]
  	RCC->PLLCFGR|=(PLL_USB_OTG_Division_Factor<<RCC_PLLCFGR_PLLQ0);
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6053      	str	r3, [r2, #4]

	
  	RCC->CR|=(RCC_u8PLL_Mode<<RCC_CR_PLLON);
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001068:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_PLLRDY));
 800106a:	bf00      	nop
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800106e:	681b      	ldr	r3, [r3, #0]

	#endif
	
	#if RCC_u8HSEON_Mode==RCC_u8Clk_Enable
	/*************** Clock By Pass Enable ***************/
  	RCC->CR|=(RCC_u8HSEPYB<<RCC_CR_HSEBYP);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001072:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6013      	str	r3, [r2, #0]
  	RCC->CR|=(RCC_u8HSEON_Mode<<RCC_CR_HSEON);
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSIRDY));
 8001084:	bf00      	nop
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001088:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable
  	RCC->CR|=(RCC_u8HSION_Mode<<RCC_CR_HSION);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSERDY));
 8001096:	bf00      	nop
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <RCC_voidSystemClockInit+0xe4>)
 800109a:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <RCC_voidPeripheralClockEnable>:
  
u8	RCC_voidPeripheralClockEnable(u8 RCC_u8CopyBus,Peripherals_t RCC_u8CopyPeripheral)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPeripheral<32)
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	2b1f      	cmp	r3, #31
 80010c4:	d83d      	bhi.n	8001142 <RCC_voidPeripheralClockEnable+0x96>
	{
		switch(RCC_u8CopyBus)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d837      	bhi.n	800113c <RCC_voidPeripheralClockEnable+0x90>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <RCC_voidPeripheralClockEnable+0x28>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	08001111 	.word	0x08001111
 80010e0:	08001127 	.word	0x08001127
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR,RCC_u8CopyPeripheral);break;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	79ba      	ldrb	r2, [r7, #6]
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	e025      	b.n	8001146 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR,RCC_u8CopyPeripheral);break;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	79ba      	ldrb	r2, [r7, #6]
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 800110a:	430b      	orrs	r3, r1
 800110c:	6353      	str	r3, [r2, #52]	; 0x34
 800110e:	e01a      	b.n	8001146 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR,RCC_u8CopyPeripheral);break;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	4611      	mov	r1, r2
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 8001120:	430b      	orrs	r3, r1
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	e00f      	b.n	8001146 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR,RCC_u8CopyPeripheral);break;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	79ba      	ldrb	r2, [r7, #6]
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	4611      	mov	r1, r2
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <RCC_voidPeripheralClockEnable+0xa8>)
 8001136:	430b      	orrs	r3, r1
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	e004      	b.n	8001146 <RCC_voidPeripheralClockEnable+0x9a>
			default : Local_u8Error =NOK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e001      	b.n	8001146 <RCC_voidPeripheralClockEnable+0x9a>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800

08001158 <forward_1>:

void Encoder_1_init(Encoder_variables* encoder);
void Encoder_2_init(Encoder_variables* encoder);


void forward_1()  				{ Encoder_Forward (&Encoder_1) ; }
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <forward_1+0x10>)
 800115e:	f7ff f88e 	bl	800027e <Encoder_Forward>
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000060 	.word	0x20000060

0800116c <backward_1>:
void backward_1()   			{ Encoder_Backward(&Encoder_1); }
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <backward_1+0x10>)
 8001172:	f7ff f8bc 	bl	80002ee <Encoder_Backward>
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000060 	.word	0x20000060

08001180 <forward_2>:

void forward_2()  				{ Encoder_Forward (&Encoder_2) ; }
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <forward_2+0x10>)
 8001186:	f7ff f87a 	bl	800027e <Encoder_Forward>
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000098 	.word	0x20000098

08001194 <backward_2>:
void backward_2()   			{ Encoder_Backward(&Encoder_2); }
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <backward_2+0x10>)
 800119a:	f7ff f8a8 	bl	80002ee <Encoder_Backward>
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000098 	.word	0x20000098

080011a8 <main>:

void RCC_Init(void);

int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	RCC_Init();
 80011ac:	f000 f82a 	bl	8001204 <RCC_Init>

	PORT_voidInit();
 80011b0:	f7ff fa4a 	bl	8000648 <PORT_voidInit>

	/* ENCODER 1 & 2 init */
	Encoder_1_init(&Encoder_1);
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <main+0x54>)
 80011b6:	f000 f83f 	bl	8001238 <Encoder_1_init>
	Encoder_2_init(&Encoder_2);
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <main+0x58>)
 80011bc:	f000 f86a 	bl	8001294 <Encoder_2_init>

	/* motor A | B output pins */
	PWM_voidSetPinDirection(TIM1,CH1); /* PA8 PWM */ /* PB0 Direction */
 80011c0:	2101      	movs	r1, #1
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fac2 	bl	800074c <PWM_voidSetPinDirection>

	PWM_voidWrite(TIM1,CH1,0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fe41 	bl	8000e54 <PWM_voidWrite>
	GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN0,GPIO_PIN_LOW);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff f968 	bl	80004ac <GPIO_SetPinValue>

	/* motor C | D output pins */
	PWM_voidSetPinDirection(TIM1,CH2); /* PA9 PWM */ /* PB1 Direction */
 80011dc:	2102      	movs	r1, #2
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fab4 	bl	800074c <PWM_voidSetPinDirection>

	PWM_voidWrite(TIM1,CH2,0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fe33 	bl	8000e54 <PWM_voidWrite>
	GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN1,GPIO_PIN_LOW);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff f95a 	bl	80004ac <GPIO_SetPinValue>
	/* Loop forever */
	for(;;);
 80011f8:	e7fe      	b.n	80011f8 <main+0x50>
 80011fa:	bf00      	nop
 80011fc:	20000060 	.word	0x20000060
 8001200:	20000098 	.word	0x20000098

08001204 <RCC_Init>:
}


void RCC_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/*configure System Clock*/
	RCC_voidSystemClockInit();
 8001208:	f7ff fedc 	bl	8000fc4 <RCC_voidSystemClockInit>

	/* Enable GPIOA clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOA);
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff4c 	bl	80010ac <RCC_voidPeripheralClockEnable>
	/* Enable GPIOB clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOB);
 8001214:	2101      	movs	r1, #1
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff48 	bl	80010ac <RCC_voidPeripheralClockEnable>

	/* Enable TIM1 clock */
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_TIM1);
 800121c:	2100      	movs	r1, #0
 800121e:	2003      	movs	r0, #3
 8001220:	f7ff ff44 	bl	80010ac <RCC_voidPeripheralClockEnable>

	/* Enable TIM2 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM2);
 8001224:	2100      	movs	r1, #0
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ff40 	bl	80010ac <RCC_voidPeripheralClockEnable>

	/* Enable Selection line of MUX*/
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_SYSCFG);
 800122c:	210e      	movs	r1, #14
 800122e:	2003      	movs	r0, #3
 8001230:	f7ff ff3c 	bl	80010ac <RCC_voidPeripheralClockEnable>



}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <Encoder_1_init>:

void Encoder_1_init(Encoder_variables* encoder)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	/* Set Pins and Variables */
	encoder->EncoderResolution = 2050;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f640 0202 	movw	r2, #2050	; 0x802
 8001246:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line1;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <Encoder_1_init+0x54>)
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <Encoder_1_init+0x58>)
 800127a:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7fe ffa9 	bl	80001d4 <Encoder_init>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08001159 	.word	0x08001159
 8001290:	0800116d 	.word	0x0800116d

08001294 <Encoder_2_init>:
/*
 * ENCODER 2 Init
 */
void Encoder_2_init(Encoder_variables* encoder)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	/* Set Pins and Variables */
	encoder->EncoderResolution = 2050;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f640 0202 	movw	r2, #2050	; 0x802
 80012a2:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line2;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN3;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line3;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_2;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <Encoder_2_init+0x54>)
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_2;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <Encoder_2_init+0x58>)
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7fe ff7b 	bl	80001d4 <Encoder_init>

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	08001181 	.word	0x08001181
 80012ec:	08001195 	.word	0x08001195

080012f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	; (8001330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	; (800133c <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800131e:	f000 f811 	bl	8001344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001322:	f7ff ff41 	bl	80011a8 <main>

08001326 <LoopForever>:

LoopForever:
  b LoopForever
 8001326:	e7fe      	b.n	8001326 <LoopForever>
  ldr   r0, =_estack
 8001328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001334:	080013ac 	.word	0x080013ac
  ldr r2, =_sbss
 8001338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800133c:	200000d0 	.word	0x200000d0

08001340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <__libc_init_array>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	4d0d      	ldr	r5, [pc, #52]	; (800137c <__libc_init_array+0x38>)
 8001348:	4c0d      	ldr	r4, [pc, #52]	; (8001380 <__libc_init_array+0x3c>)
 800134a:	1b64      	subs	r4, r4, r5
 800134c:	10a4      	asrs	r4, r4, #2
 800134e:	2600      	movs	r6, #0
 8001350:	42a6      	cmp	r6, r4
 8001352:	d109      	bne.n	8001368 <__libc_init_array+0x24>
 8001354:	4d0b      	ldr	r5, [pc, #44]	; (8001384 <__libc_init_array+0x40>)
 8001356:	4c0c      	ldr	r4, [pc, #48]	; (8001388 <__libc_init_array+0x44>)
 8001358:	f000 f818 	bl	800138c <_init>
 800135c:	1b64      	subs	r4, r4, r5
 800135e:	10a4      	asrs	r4, r4, #2
 8001360:	2600      	movs	r6, #0
 8001362:	42a6      	cmp	r6, r4
 8001364:	d105      	bne.n	8001372 <__libc_init_array+0x2e>
 8001366:	bd70      	pop	{r4, r5, r6, pc}
 8001368:	f855 3b04 	ldr.w	r3, [r5], #4
 800136c:	4798      	blx	r3
 800136e:	3601      	adds	r6, #1
 8001370:	e7ee      	b.n	8001350 <__libc_init_array+0xc>
 8001372:	f855 3b04 	ldr.w	r3, [r5], #4
 8001376:	4798      	blx	r3
 8001378:	3601      	adds	r6, #1
 800137a:	e7f2      	b.n	8001362 <__libc_init_array+0x1e>
 800137c:	080013a4 	.word	0x080013a4
 8001380:	080013a4 	.word	0x080013a4
 8001384:	080013a4 	.word	0x080013a4
 8001388:	080013a8 	.word	0x080013a8

0800138c <_init>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr

08001398 <_fini>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr
