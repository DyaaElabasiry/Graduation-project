
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f40  08000f40  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f40  08000f40  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000f40  08000f40  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f40  08000f40  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f40  08000f40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000008  08000f50  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08000f50  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bb3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c35  00000000  00000000  00022beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00023820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00023b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000179e  00000000  00000000  00023df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ca8  00000000  00000000  00025596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a58c  00000000  00000000  0002723e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000317ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a5c  00000000  00000000  0003181c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f28 	.word	0x08000f28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000f28 	.word	0x08000f28

080001d4 <RCC_voidSystemClockInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSystemClockInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

    /******************MCO1,2 Prescaler*************/
  	RCC->CFGR|=(Microcontroller_Clk1_Prescaler<<RCC_CFGR_MCO1PRE0);
 80001d8:	4b24      	ldr	r3, [pc, #144]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	4a23      	ldr	r2, [pc, #140]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001e2:	6093      	str	r3, [r2, #8]
	RCC->CFGR|=(Microcontroller_Clk2_Prescaler<<RCC_CFGR_MCO2PRE0);
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001ee:	6093      	str	r3, [r2, #8]

    /******************MCO1,2 Source Selection*************/
	RCC->CFGR|=(Microcontroller_Clk_Output1<<RCC_CFGR_MCO10);
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001fa:	6093      	str	r3, [r2, #8]
  	RCC->CFGR|=(Microcontroller_Clk_Output2<<RCC_CFGR_MCO20);
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <RCC_voidSystemClockInit+0x98>)
 80001fe:	4a1b      	ldr	r2, [pc, #108]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	6093      	str	r3, [r2, #8]


    /*************** Clock Security System ***************/
  	RCC->CR|=(RCC_u8CSSON<<RCC_CR_CSSON);
 8000204:	4b19      	ldr	r3, [pc, #100]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a18      	ldr	r2, [pc, #96]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800020a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800020e:	6013      	str	r3, [r2, #0]

	/*************** Clock Source Switch ***************/
  	RCC->CFGR|=(System_Clk_Source<<RCC_CFGR_SW0);
 8000210:	4b16      	ldr	r3, [pc, #88]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	6093      	str	r3, [r2, #8]

	/****************** AHB Prescaler ******************/
  	RCC->CFGR|=(RCC_u8AHB_PRESCALER<<RCC_CFGR_HPRE0);
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800021a:	4a14      	ldr	r2, [pc, #80]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	6093      	str	r3, [r2, #8]


	/****************** APB1 Prescaler ******************/
  	RCC->CFGR|=(RCC_u8APB1_PRESCALER<<RCC_CFGR_PPRE10);
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800022a:	6093      	str	r3, [r2, #8]
	/****************** APB2 Prescaler ******************/
	
  	RCC->CFGR|=(RCC_u8APB2_PRESCALER<<RCC_CFGR_PPRE20);
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800022e:	4a0f      	ldr	r2, [pc, #60]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	6093      	str	r3, [r2, #8]

	#endif
	
	#if RCC_u8HSEON_Mode==RCC_u8Clk_Enable
	/*************** Clock By Pass Enable ***************/
  	RCC->CR|=(RCC_u8HSEPYB<<RCC_CR_HSEBYP);
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000236:	4a0d      	ldr	r2, [pc, #52]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6013      	str	r3, [r2, #0]
  	RCC->CR|=(RCC_u8HSEON_Mode<<RCC_CR_HSEON);
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000246:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSIRDY));
 8000248:	bf00      	nop
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800024c:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable
  	RCC->CR|=(RCC_u8HSION_Mode<<RCC_CR_HSION);
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <RCC_voidSystemClockInit+0x98>)
 8000254:	f043 0301 	orr.w	r3, r3, #1
 8000258:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSERDY));
 800025a:	bf00      	nop
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <RCC_voidSystemClockInit+0x98>)
 800025e:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800

08000270 <RCC_voidPeripheralClockEnable>:
  
u8	RCC_voidPeripheralClockEnable(u8 RCC_u8CopyBus,Peripherals_t RCC_u8CopyPeripheral)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 8000280:	2301      	movs	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPeripheral<32)
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	2b1f      	cmp	r3, #31
 8000288:	d83d      	bhi.n	8000306 <RCC_voidPeripheralClockEnable+0x96>
	{
		switch(RCC_u8CopyBus)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b03      	cmp	r3, #3
 800028e:	d837      	bhi.n	8000300 <RCC_voidPeripheralClockEnable+0x90>
 8000290:	a201      	add	r2, pc, #4	; (adr r2, 8000298 <RCC_voidPeripheralClockEnable+0x28>)
 8000292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000296:	bf00      	nop
 8000298:	080002a9 	.word	0x080002a9
 800029c:	080002bf 	.word	0x080002bf
 80002a0:	080002d5 	.word	0x080002d5
 80002a4:	080002eb 	.word	0x080002eb
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR,RCC_u8CopyPeripheral);break;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	2101      	movs	r1, #1
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002b8:	430b      	orrs	r3, r1
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
 80002bc:	e025      	b.n	800030a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR,RCC_u8CopyPeripheral);break;
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	2101      	movs	r1, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a12      	ldr	r2, [pc, #72]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002ce:	430b      	orrs	r3, r1
 80002d0:	6353      	str	r3, [r2, #52]	; 0x34
 80002d2:	e01a      	b.n	800030a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR,RCC_u8CopyPeripheral);break;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	2101      	movs	r1, #1
 80002dc:	fa01 f202 	lsl.w	r2, r1, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40
 80002e8:	e00f      	b.n	800030a <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR,RCC_u8CopyPeripheral);break;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	2101      	movs	r1, #1
 80002f2:	fa01 f202 	lsl.w	r2, r1, r2
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <RCC_voidPeripheralClockEnable+0xa8>)
 80002fa:	430b      	orrs	r3, r1
 80002fc:	6453      	str	r3, [r2, #68]	; 0x44
 80002fe:	e004      	b.n	800030a <RCC_voidPeripheralClockEnable+0x9a>
			default : Local_u8Error =NOK;
 8000300:	2300      	movs	r3, #0
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <RCC_voidPeripheralClockEnable+0x9a>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800

0800031c <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_config.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	
	GPIOA_MODER = GPIOA_Mode;
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <PORT_voidInit+0xa4>)
 8000322:	4a28      	ldr	r2, [pc, #160]	; (80003c4 <PORT_voidInit+0xa8>)
 8000324:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <PORT_voidInit+0xac>)
 8000328:	4a28      	ldr	r2, [pc, #160]	; (80003cc <PORT_voidInit+0xb0>)
 800032a:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <PORT_voidInit+0xb4>)
 800032e:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000332:	601a      	str	r2, [r3, #0]
	
	GPIOA_OTYPER = GPIOA_Output_Type ;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <PORT_voidInit+0xb8>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type ;
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <PORT_voidInit+0xbc>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type ;
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <PORT_voidInit+0xc0>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	
	GPIOA_OSPEEDR = GPIOA_Speed;
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <PORT_voidInit+0xc4>)
 8000348:	4a26      	ldr	r2, [pc, #152]	; (80003e4 <PORT_voidInit+0xc8>)
 800034a:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR = GPIOB_Speed;
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <PORT_voidInit+0xcc>)
 800034e:	4a27      	ldr	r2, [pc, #156]	; (80003ec <PORT_voidInit+0xd0>)
 8000350:	601a      	str	r2, [r3, #0]
	GPIOC_OSPEEDR = GPIOC_Speed;
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <PORT_voidInit+0xd4>)
 8000354:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000358:	601a      	str	r2, [r3, #0]
	
	GPIOA_PUPDR = GPIOA_PUPD;
 800035a:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <PORT_voidInit+0xd8>)
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <PORT_voidInit+0xdc>)
 800035e:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD;
 8000360:	4b26      	ldr	r3, [pc, #152]	; (80003fc <PORT_voidInit+0xe0>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <PORT_voidInit+0xd0>)
 8000364:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD;
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <PORT_voidInit+0xe4>)
 8000368:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 800036c:	601a      	str	r2, [r3, #0]
	

    
    GPIOA_AFRL|=(GPIOA_AF<< GPIOx_AFRL0);
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <PORT_voidInit+0xe8>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4924      	ldr	r1, [pc, #144]	; (8000404 <PORT_voidInit+0xe8>)
 8000374:	4b24      	ldr	r3, [pc, #144]	; (8000408 <PORT_voidInit+0xec>)
 8000376:	4313      	orrs	r3, r2
 8000378:	600b      	str	r3, [r1, #0]
	GPIOB_AFRL|=(GPIOB_AF<< GPIOx_AFRL0);
 800037a:	4b24      	ldr	r3, [pc, #144]	; (800040c <PORT_voidInit+0xf0>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4923      	ldr	r1, [pc, #140]	; (800040c <PORT_voidInit+0xf0>)
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <PORT_voidInit+0xf4>)
 8000382:	4313      	orrs	r3, r2
 8000384:	600b      	str	r3, [r1, #0]
	GPIOC_AFRL|=(GPIOC_AF<< GPIOx_AFRL0);
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <PORT_voidInit+0xf8>)
 8000388:	4a22      	ldr	r2, [pc, #136]	; (8000414 <PORT_voidInit+0xf8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6013      	str	r3, [r2, #0]
								
    GPIOA_AFRH|= (GPIOA_AF>> 32);
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <PORT_voidInit+0xfc>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4921      	ldr	r1, [pc, #132]	; (8000418 <PORT_voidInit+0xfc>)
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <PORT_voidInit+0x100>)
 8000396:	4313      	orrs	r3, r2
 8000398:	600b      	str	r3, [r1, #0]
	GPIOB_AFRH|= (GPIOB_AF>> 32);
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <PORT_voidInit+0x104>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	4920      	ldr	r1, [pc, #128]	; (8000420 <PORT_voidInit+0x104>)
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <PORT_voidInit+0x108>)
 80003a2:	4313      	orrs	r3, r2
 80003a4:	600b      	str	r3, [r1, #0]
	GPIOC_AFRH|= (GPIOC_AF>> 32);
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <PORT_voidInit+0x10c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <PORT_voidInit+0x10c>)
 80003ac:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 80003b0:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80003b4:	6013      	str	r3, [r2, #0]
	
	
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40020000 	.word	0x40020000
 80003c4:	6955a500 	.word	0x6955a500
 80003c8:	40020400 	.word	0x40020400
 80003cc:	5515a555 	.word	0x5515a555
 80003d0:	40020800 	.word	0x40020800
 80003d4:	40020004 	.word	0x40020004
 80003d8:	40020404 	.word	0x40020404
 80003dc:	40020804 	.word	0x40020804
 80003e0:	40020008 	.word	0x40020008
 80003e4:	41555555 	.word	0x41555555
 80003e8:	40020408 	.word	0x40020408
 80003ec:	55155555 	.word	0x55155555
 80003f0:	40020808 	.word	0x40020808
 80003f4:	4002000c 	.word	0x4002000c
 80003f8:	65555555 	.word	0x65555555
 80003fc:	4002040c 	.word	0x4002040c
 8000400:	4002080c 	.word	0x4002080c
 8000404:	40020020 	.word	0x40020020
 8000408:	22bbbbbb 	.word	0x22bbbbbb
 800040c:	40020420 	.word	0x40020420
 8000410:	77bbbbbb 	.word	0x77bbbbbb
 8000414:	40020820 	.word	0x40020820
 8000418:	40020024 	.word	0x40020024
 800041c:	b00bbbbb 	.word	0xb00bbbbb
 8000420:	40020424 	.word	0x40020424
 8000424:	bbbb0bbb 	.word	0xbbbb0bbb
 8000428:	40020824 	.word	0x40020824

0800042c <GPIO_SetPinValue>:
#include "GPIO_interface.h"
#include "GPIO_private.h"


u8  GPIO_SetPinValue(u8 Copy_u8Port,Pins_t Copy_u8Pin, u8 Copy_u8Value)
{	
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	460b      	mov	r3, r1
 8000438:	71bb      	strb	r3, [r7, #6]
 800043a:	4613      	mov	r3, r2
 800043c:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState=FALSE;
 800043e:	2300      	movs	r3, #0
 8000440:	73fb      	strb	r3, [r7, #15]
	if ((Copy_u8Pin < GPIO_u8NumOfPins)&&(Copy_u8Port < GPIO_u8NumOfPorts))
 8000442:	79bb      	ldrb	r3, [r7, #6]
 8000444:	2b0f      	cmp	r3, #15
 8000446:	d841      	bhi.n	80004cc <GPIO_SetPinValue+0xa0>
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d83e      	bhi.n	80004cc <GPIO_SetPinValue+0xa0>
	{
		switch(Copy_u8Port)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d028      	beq.n	80004a6 <GPIO_SetPinValue+0x7a>
 8000454:	2b02      	cmp	r3, #2
 8000456:	dc37      	bgt.n	80004c8 <GPIO_SetPinValue+0x9c>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d002      	beq.n	8000462 <GPIO_SetPinValue+0x36>
 800045c:	2b01      	cmp	r3, #1
 800045e:	d011      	beq.n	8000484 <GPIO_SetPinValue+0x58>
 8000460:	e032      	b.n	80004c8 <GPIO_SetPinValue+0x9c>
		{ case GPIO_PORTA: ASSIGN_BIT(REG_GPIO_PORTA->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <GPIO_SetPinValue+0xb0>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	79ba      	ldrb	r2, [r7, #6]
 8000468:	2101      	movs	r1, #1
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	43d2      	mvns	r2, r2
 8000470:	4013      	ands	r3, r2
 8000472:	7979      	ldrb	r1, [r7, #5]
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <GPIO_SetPinValue+0xb0>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	e021      	b.n	80004c8 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTB: ASSIGN_BIT(REG_GPIO_PORTB->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <GPIO_SetPinValue+0xb4>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	4013      	ands	r3, r2
 8000494:	7979      	ldrb	r1, [r7, #5]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <GPIO_SetPinValue+0xb4>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	6153      	str	r3, [r2, #20]
 80004a4:	e010      	b.n	80004c8 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTC: ASSIGN_BIT(REG_GPIO_PORTC->ODR,Copy_u8Pin, Copy_u8Value);break;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <GPIO_SetPinValue+0xb8>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	2101      	movs	r1, #1
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4013      	ands	r3, r2
 80004b6:	7979      	ldrb	r1, [r7, #5]
 80004b8:	79ba      	ldrb	r2, [r7, #6]
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <GPIO_SetPinValue+0xb8>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	bf00      	nop
		}
	   Local_u8ErrorState=TRUE;
 80004c8:	2301      	movs	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
	   
	}
		
	return Local_u8ErrorState;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40020000 	.word	0x40020000
 80004e0:	40020400 	.word	0x40020400
 80004e4:	40020800 	.word	0x40020800

080004e8 <GPIO_GetPinValue>:
  			
	return Local_u8ErrorState;
}

u8  GPIO_GetPinValue(u8 Copy_u8Port, Pins_t Copy_u8Pin, u8* Copy_u8PTRvalue)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	603a      	str	r2, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	460b      	mov	r3, r1
 80004f6:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState=FALSE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
	
	if ((Copy_u8PTRvalue!=NULL) && (Copy_u8Pin<GPIO_u8NumOfPins))
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d038      	beq.n	8000574 <GPIO_GetPinValue+0x8c>
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d835      	bhi.n	8000574 <GPIO_GetPinValue+0x8c>
	{
		switch(Copy_u8Port)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d022      	beq.n	8000554 <GPIO_GetPinValue+0x6c>
 800050e:	2b02      	cmp	r3, #2
 8000510:	dc2e      	bgt.n	8000570 <GPIO_GetPinValue+0x88>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <GPIO_GetPinValue+0x34>
 8000516:	2b01      	cmp	r3, #1
 8000518:	d00e      	beq.n	8000538 <GPIO_GetPinValue+0x50>
 800051a:	e029      	b.n	8000570 <GPIO_GetPinValue+0x88>
		{ case GPIO_PORTA:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTA->IDR, Copy_u8Pin);break;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <GPIO_GetPinValue+0x9c>)
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	79ba      	ldrb	r2, [r7, #6]
 8000522:	2101      	movs	r1, #1
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	401a      	ands	r2, r3
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	fa22 f303 	lsr.w	r3, r2, r3
 8000530:	b2da      	uxtb	r2, r3
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e01b      	b.n	8000570 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTB:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTB->IDR, Copy_u8Pin);break;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <GPIO_GetPinValue+0xa0>)
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	401a      	ands	r2, r3
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	fa22 f303 	lsr.w	r3, r2, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e00d      	b.n	8000570 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTC:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTC->IDR, Copy_u8Pin);break;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <GPIO_GetPinValue+0xa4>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	401a      	ands	r2, r3
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	fa22 f303 	lsr.w	r3, r2, r3
 8000568:	b2da      	uxtb	r2, r3
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	bf00      	nop
		}
		
		Local_u8ErrorState=TRUE;
 8000570:	2301      	movs	r3, #1
 8000572:	73fb      	strb	r3, [r7, #15]
		
	} 

	return Local_u8ErrorState;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40020000 	.word	0x40020000
 8000588:	40020400 	.word	0x40020400
 800058c:	40020800 	.word	0x40020800

08000590 <EXTI_voidInit>:

//ISR functions array prototype
static void (* EXTI_CallBack[16]) (void) = {NULL};

void EXTI_voidInit(EXTI_LINEx* copy_EXTILine)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/*First: clear all Pending Flags*/
    EXTI->PR=Clear_Pending_Flags;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <EXTI_voidInit+0x6c>)
 800059a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800059e:	615a      	str	r2, [r3, #20]

    /*disable Interrupt mask for selected Interrupt Line*/

    EXTI->IMR|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <EXTI_voidInit+0x6c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <EXTI_voidInit+0x6c>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]

    /*Set Trigger Mode for selected Interrupt Line*/

    EXTI->RTSR|=((copy_EXTILine->EXTI_TRIG_MODE)<<(copy_EXTILine->EXTI_LINE_NUM));
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <EXTI_voidInit+0x6c>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7852      	ldrb	r2, [r2, #1]
 80005be:	4611      	mov	r1, r2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7812      	ldrb	r2, [r2, #0]
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <EXTI_voidInit+0x6c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]
    EXTI->FTSR|=(((copy_EXTILine->EXTI_TRIG_MODE)>>1)<<(copy_EXTILine->EXTI_LINE_NUM));
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <EXTI_voidInit+0x6c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7852      	ldrb	r2, [r2, #1]
 80005d8:	0852      	lsrs	r2, r2, #1
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7812      	ldrb	r2, [r2, #0]
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <EXTI_voidInit+0x6c>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	60d3      	str	r3, [r2, #12]

}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40013c00 	.word	0x40013c00

08000600 <EXTI_voidSetCallBack>:
{
	EXTI->SWIER|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
}

void EXTI_voidSetCallBack(EXTI_LINEx* copy_EXTILine,void (*Copy_pvCallBackFunc) (void))
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	EXTI_CallBack[(copy_EXTILine->EXTI_LINE_NUM)] = Copy_pvCallBackFunc;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI_voidSetCallBack+0x24>)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000024 	.word	0x20000024

08000628 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line0]();
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <EXTI0_IRQHandler+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line0);
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI0_IRQHandler+0x20>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <EXTI0_IRQHandler+0x20>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6153      	str	r3, [r2, #20]
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000024 	.word	0x20000024
 8000648:	40013c00 	.word	0x40013c00

0800064c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line1]();
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <EXTI1_IRQHandler+0x1c>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line1);
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI1_IRQHandler+0x20>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI1_IRQHandler+0x20>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6153      	str	r3, [r2, #20]
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000024 	.word	0x20000024
 800066c:	40013c00 	.word	0x40013c00

08000670 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line2]();
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <EXTI2_IRQHandler+0x1c>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line2);
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <EXTI2_IRQHandler+0x20>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <EXTI2_IRQHandler+0x20>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6153      	str	r3, [r2, #20]
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000024 	.word	0x20000024
 8000690:	40013c00 	.word	0x40013c00

08000694 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line3]();
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <EXTI3_IRQHandler+0x1c>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line3);
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <EXTI3_IRQHandler+0x20>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <EXTI3_IRQHandler+0x20>)
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	6153      	str	r3, [r2, #20]
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000024 	.word	0x20000024
 80006b4:	40013c00 	.word	0x40013c00

080006b8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line4]();
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <EXTI4_IRQHandler+0x1c>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line4);
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <EXTI4_IRQHandler+0x20>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <EXTI4_IRQHandler+0x20>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6153      	str	r3, [r2, #20]
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000024 	.word	0x20000024
 80006d8:	40013c00 	.word	0x40013c00

080006dc <NVIC_voidEnableInterrupt>:
#include"NVIC_interface.h"

static u32 GlobalStatic_32GroupConfig;

void NVIC_voidEnableInterrupt(INT_PRIO_t Copy_u8InterruptPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	Copy_u8InterruptPriority-=7;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3b07      	subs	r3, #7
 80006ea:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[Copy_u8InterruptPriority / 32] = 1 << (Copy_u8InterruptPriority % 32);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	2201      	movs	r2, #1
 80006f4:	fa02 f103 	lsl.w	r1, r2, r3
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <NVIC_voidEnableInterrupt+0x34>)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	095b      	lsrs	r3, r3, #5
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100

08000714 <SysTick_Handler>:
{
	return STK->VAL;
}


void SysTick_Handler(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

	u8 Local_u8Temporary;

	if(STK_u8ModeOFInterval == STK_SINGLE_INTERVAL)
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <SysTick_Handler+0x50>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d111      	bne.n	8000746 <SysTick_Handler+0x32>
	{
		/*Disable Systick Interrupt*/
		CLEAR_BIT(STK->CTRL, TICKINT);
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <SysTick_Handler+0x54>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <SysTick_Handler+0x54>)
 8000728:	f023 0302 	bic.w	r3, r3, #2
 800072c:	6013      	str	r3, [r2, #0]

		/*Stop Timer*/
		CLEAR_BIT(STK->CTRL, ENABLE);
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <SysTick_Handler+0x54>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <SysTick_Handler+0x54>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	6013      	str	r3, [r2, #0]

		/*Clear LOAD , VAL Registers to stop reload*/
		STK->LOAD=0;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <SysTick_Handler+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <SysTick_Handler+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]


	}

	/*Call Back Notification*/
	STK_CallBack();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <SysTick_Handler+0x58>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4798      	blx	r3

	/*Clear Interrupt Flag by Reading it*/
	Local_u8Temporary=GET_BIT(STK->CTRL, COUNTFLAG);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SysTick_Handler+0x54>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0c1b      	lsrs	r3, r3, #16
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000068 	.word	0x20000068
 8000768:	e000e010 	.word	0xe000e010
 800076c:	20000064 	.word	0x20000064

08000770 <USART1_IRQHandler>:
{
	USART6_CallBack = ptr ;
}

void USART1_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	USART_1 -> SR = 0 ;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <USART1_IRQHandler+0x14>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
	USART1_CallBack();
 800077a:	4b03      	ldr	r3, [pc, #12]	; (8000788 <USART1_IRQHandler+0x18>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4798      	blx	r3
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40011000 	.word	0x40011000
 8000788:	2000006c 	.word	0x2000006c

0800078c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	USART_2 -> SR = 0 ;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <USART2_IRQHandler+0x14>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
	USART2_CallBack();
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <USART2_IRQHandler+0x18>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4798      	blx	r3
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20000070 	.word	0x20000070

080007a8 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	USART_6 -> SR = 0 ;
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <USART6_IRQHandler+0x14>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	USART6_CallBack();
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <USART6_IRQHandler+0x18>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4798      	blx	r3
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40011400 	.word	0x40011400
 80007c0:	20000074 	.word	0x20000074

080007c4 <PWM_voidInit>:
#include "PWM_private.h"
#include "PWM_config.h"

// PWM signal is at edge aligned mode

void  PWM_voidInit(TIM_COMP* Copy_TIM){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]


	switch (Copy_TIM->TIM_NUM)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	f000 80fd 	beq.w	80009d0 <PWM_voidInit+0x20c>
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	f300 8167 	bgt.w	8000aaa <PWM_voidInit+0x2e6>
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d003      	beq.n	80007e8 <PWM_voidInit+0x24>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	f000 8087 	beq.w	80008f4 <PWM_voidInit+0x130>

		TIMER4->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
		break;


	default:       break;
 80007e6:	e160      	b.n	8000aaa <PWM_voidInit+0x2e6>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d11b      	bne.n	8000828 <PWM_voidInit+0x64>
			TIMER2->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 80007f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7892      	ldrb	r2, [r2, #2]
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	4611      	mov	r1, r2
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	430b      	orrs	r3, r1
 8000804:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC1S0);
 8000806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC1S1);
 8000816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000820:	f023 0302 	bic.w	r3, r3, #2
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	e05e      	b.n	80008e6 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d11b      	bne.n	8000868 <PWM_voidInit+0xa4>
			TIMER2->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 8000830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	7892      	ldrb	r2, [r2, #2]
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	4611      	mov	r1, r2
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	430b      	orrs	r3, r1
 8000844:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC2S0);
 8000846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000854:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC2S1);
 8000856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	e03e      	b.n	80008e6 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d11b      	bne.n	80008a8 <PWM_voidInit+0xe4>
			TIMER2->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	7892      	ldrb	r2, [r2, #2]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	4611      	mov	r1, r2
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	430b      	orrs	r3, r1
 8000884:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC3S0);
 8000886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC3S1);
 8000896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a0:	f023 0302 	bic.w	r3, r3, #2
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	e01e      	b.n	80008e6 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d11a      	bne.n	80008e6 <PWM_voidInit+0x122>
			TIMER2->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 80008b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7892      	ldrb	r2, [r2, #2]
 80008ba:	0312      	lsls	r2, r2, #12
 80008bc:	4611      	mov	r1, r2
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	430b      	orrs	r3, r1
 80008c4:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC4S0);
 80008c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d4:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC4S1);
 80008d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008e4:	61d3      	str	r3, [r2, #28]
		TIMER2->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	78db      	ldrb	r3, [r3, #3]
 80008ea:	005a      	lsls	r2, r3, #1
 80008ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f0:	621a      	str	r2, [r3, #32]
		break;
 80008f2:	e0db      	b.n	8000aac <PWM_voidInit+0x2e8>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d115      	bne.n	8000928 <PWM_voidInit+0x164>
			TIMER3->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 80008fc:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7892      	ldrb	r2, [r2, #2]
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	4611      	mov	r1, r2
 8000908:	4a6b      	ldr	r2, [pc, #428]	; (8000ab8 <PWM_voidInit+0x2f4>)
 800090a:	430b      	orrs	r3, r1
 800090c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC1S0);
 800090e:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a69      	ldr	r2, [pc, #420]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC1S1);
 800091a:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <PWM_voidInit+0x2f4>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a66      	ldr	r2, [pc, #408]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000920:	f023 0302 	bic.w	r3, r3, #2
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	e04c      	b.n	80009c2 <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d115      	bne.n	800095c <PWM_voidInit+0x198>
			TIMER3->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7892      	ldrb	r2, [r2, #2]
 8000938:	0312      	lsls	r2, r2, #12
 800093a:	4611      	mov	r1, r2
 800093c:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <PWM_voidInit+0x2f4>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC2S0);
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a5c      	ldr	r2, [pc, #368]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800094c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC2S1);
 800094e:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a59      	ldr	r2, [pc, #356]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	e032      	b.n	80009c2 <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d115      	bne.n	8000990 <PWM_voidInit+0x1cc>
			TIMER3->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 8000964:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7892      	ldrb	r2, [r2, #2]
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	4611      	mov	r1, r2
 8000970:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000972:	430b      	orrs	r3, r1
 8000974:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC3S0);
 8000976:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <PWM_voidInit+0x2f4>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC3S1);
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a4c      	ldr	r2, [pc, #304]	; (8000ab8 <PWM_voidInit+0x2f4>)
 8000988:	f023 0302 	bic.w	r3, r3, #2
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	e018      	b.n	80009c2 <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	2b04      	cmp	r3, #4
 8000996:	d114      	bne.n	80009c2 <PWM_voidInit+0x1fe>
			TIMER3->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <PWM_voidInit+0x2f4>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7892      	ldrb	r2, [r2, #2]
 80009a0:	0312      	lsls	r2, r2, #12
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a44      	ldr	r2, [pc, #272]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC4S0);
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a42      	ldr	r2, [pc, #264]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80009b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b4:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC4S1);
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <PWM_voidInit+0x2f4>)
 80009bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009c0:	61d3      	str	r3, [r2, #28]
		TIMER2->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	78db      	ldrb	r3, [r3, #3]
 80009c6:	005a      	lsls	r2, r3, #1
 80009c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009cc:	621a      	str	r2, [r3, #32]
		break;
 80009ce:	e06d      	b.n	8000aac <PWM_voidInit+0x2e8>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d115      	bne.n	8000a04 <PWM_voidInit+0x240>
			TIMER4->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 80009d8:	4b38      	ldr	r3, [pc, #224]	; (8000abc <PWM_voidInit+0x2f8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	7892      	ldrb	r2, [r2, #2]
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	4611      	mov	r1, r2
 80009e4:	4a35      	ldr	r2, [pc, #212]	; (8000abc <PWM_voidInit+0x2f8>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC1S0);
 80009ea:	4b34      	ldr	r3, [pc, #208]	; (8000abc <PWM_voidInit+0x2f8>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a33      	ldr	r2, [pc, #204]	; (8000abc <PWM_voidInit+0x2f8>)
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC1S1);
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <PWM_voidInit+0x2f8>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a30      	ldr	r2, [pc, #192]	; (8000abc <PWM_voidInit+0x2f8>)
 80009fc:	f023 0302 	bic.w	r3, r3, #2
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	e04c      	b.n	8000a9e <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d115      	bne.n	8000a38 <PWM_voidInit+0x274>
			TIMER4->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	7892      	ldrb	r2, [r2, #2]
 8000a14:	0312      	lsls	r2, r2, #12
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC2S0);
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a28:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC2S1);
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	e032      	b.n	8000a9e <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d115      	bne.n	8000a6c <PWM_voidInit+0x2a8>
			TIMER4->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	7892      	ldrb	r2, [r2, #2]
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC3S0);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC3S1);
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a64:	f023 0302 	bic.w	r3, r3, #2
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	e018      	b.n	8000a9e <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d114      	bne.n	8000a9e <PWM_voidInit+0x2da>
			TIMER4->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a76:	69db      	ldr	r3, [r3, #28]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	7892      	ldrb	r2, [r2, #2]
 8000a7c:	0312      	lsls	r2, r2, #12
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a82:	430b      	orrs	r3, r1
 8000a84:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC4S0);
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a90:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC4S1);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <PWM_voidInit+0x2f8>)
 8000a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a9c:	61d3      	str	r3, [r2, #28]
		TIMER4->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	78db      	ldrb	r3, [r3, #3]
 8000aa2:	005a      	lsls	r2, r3, #1
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <PWM_voidInit+0x2f8>)
 8000aa6:	621a      	str	r2, [r3, #32]
		break;
 8000aa8:	e000      	b.n	8000aac <PWM_voidInit+0x2e8>
	default:       break;
 8000aaa:	bf00      	nop
	}



}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	40000800 	.word	0x40000800

08000ac0 <Encoder_init>:
				Source_Connection_type,
				GPIO_PORTB,
				GPIO_PIN3
		};
void Encoder_init(Encoder_variables* copy_Encoder)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	copy_Encoder->CurrentTime = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
	copy_Encoder->LastTime = 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
	copy_Encoder->delta_time  = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28

	copy_Encoder->EncoderCounter = 0;
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	e9c1 2300 	strd	r2, r3, [r1]
	copy_Encoder->LastEncoderCounter = 0;
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	copy_Encoder->RPM = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

	EXTI_LINEx  EXTI_L0={copy_Encoder->Encoder_A_IRQn,
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b04:	733b      	strb	r3, [r7, #12]
 8000b06:	2301      	movs	r3, #1
 8000b08:	737b      	strb	r3, [r7, #13]
			EXTI_RISING_EDGE};
	EXTI_LINEx  EXTI_L1={copy_Encoder->Encoder_B_IRQn,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b10:	723b      	strb	r3, [r7, #8]
 8000b12:	2301      	movs	r3, #1
 8000b14:	727b      	strb	r3, [r7, #9]
			EXTI_RISING_EDGE}; //ONCHANGE

	/* Enable Interrupt*/
	NVIC_voidEnableInterrupt(EXTI0);
 8000b16:	200d      	movs	r0, #13
 8000b18:	f7ff fde0 	bl	80006dc <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(EXTI1);
 8000b1c:	200e      	movs	r0, #14
 8000b1e:	f7ff fddd 	bl	80006dc <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(EXTI2);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff fdda 	bl	80006dc <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(EXTI3);
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f7ff fdd7 	bl	80006dc <NVIC_voidEnableInterrupt>

	EXTI_voidInit(&EXTI_L0);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd2c 	bl	8000590 <EXTI_voidInit>
	EXTI_voidInit(&EXTI_L1);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd27 	bl	8000590 <EXTI_voidInit>

	/*set call back functions*/
	EXTI_voidSetCallBack(&EXTI_L0,copy_Encoder->ptr_forward);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fd57 	bl	8000600 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(&EXTI_L1,copy_Encoder->ptr_backward);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fd4f 	bl	8000600 <EXTI_voidSetCallBack>
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Encoder_Forward>:

void Encoder_Forward(Encoder_variables *local_encoder)
{
 8000b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7a98      	ldrb	r0, [r3, #10]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7adb      	ldrb	r3, [r3, #11]
 8000b86:	f107 020f 	add.w	r2, r7, #15
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff fcac 	bl	80004e8 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7b18      	ldrb	r0, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b5b      	ldrb	r3, [r3, #13]
 8000b98:	f107 020e 	add.w	r2, r7, #14
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f7ff fca3 	bl	80004e8 <GPIO_GetPinValue>
	if(a != b)
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d00a      	beq.n	8000bc0 <Encoder_Forward+0x54>
		local_encoder->EncoderCounter++;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f112 0801 	adds.w	r8, r2, #1
 8000bb4:	f143 0900 	adc.w	r9, r3, #0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	e9c3 8900 	strd	r8, r9, [r3]
 8000bbe:	e008      	b.n	8000bd2 <Encoder_Forward+0x66>
	else
		local_encoder->EncoderCounter--;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc6:	1e54      	subs	r4, r2, #1
 8000bc8:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	e9c3 4500 	strd	r4, r5, [r3]

	LED_Status(LED1,LED_ON);
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <Encoder_Forward+0x7c>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	f000 f848 	bl	8000c6c <LED_Status>
	//USART_voidSendByte(USART_1,local_encoder->EncoderCounter);

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000be6:	bf00      	nop
 8000be8:	20000000 	.word	0x20000000

08000bec <Encoder_Backward>:

void Encoder_Backward(Encoder_variables *local_encoder)
{
 8000bec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7a98      	ldrb	r0, [r3, #10]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7adb      	ldrb	r3, [r3, #11]
 8000c06:	f107 020f 	add.w	r2, r7, #15
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fc6c 	bl	80004e8 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7b18      	ldrb	r0, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b5b      	ldrb	r3, [r3, #13]
 8000c18:	f107 020e 	add.w	r2, r7, #14
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff fc63 	bl	80004e8 <GPIO_GetPinValue>
	if(a == b)
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d10a      	bne.n	8000c40 <Encoder_Backward+0x54>
		local_encoder->EncoderCounter++;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	f112 0801 	adds.w	r8, r2, #1
 8000c34:	f143 0900 	adc.w	r9, r3, #0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e9c3 8900 	strd	r8, r9, [r3]
 8000c3e:	e008      	b.n	8000c52 <Encoder_Backward+0x66>
	else
		local_encoder->EncoderCounter--;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	1e54      	subs	r4, r2, #1
 8000c48:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	e9c3 4500 	strd	r4, r5, [r3]

	LED_Status(LED2,LED_ON);
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <Encoder_Backward+0x7c>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f000 f808 	bl	8000c6c <LED_Status>
	//USART_voidSendByte(USART_1,local_encoder->EncoderCounter);
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004

08000c6c <LED_Status>:

#include "LED_interface.h"


void LED_Status(LED_Object Copy_LED,u8 Copy_u8LED_Status)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	GPIO_SetPinValue(Copy_LED.LED_Port, Copy_LED.LED_Pin,(Copy_u8LED_Status) ^ (Copy_LED.Connection_Type));
 8000c78:	7978      	ldrb	r0, [r7, #5]
 8000c7a:	79b9      	ldrb	r1, [r7, #6]
 8000c7c:	793a      	ldrb	r2, [r7, #4]
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	4053      	eors	r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f7ff fbd1 	bl	800042c <GPIO_SetPinValue>
	
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <forward_1>:

void Encoder_1_init(Encoder_variables* encoder);
void Encoder_2_init(Encoder_variables* encoder);


void forward_1()  				{ Encoder_Forward (&Encoder_1) ; }
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <forward_1+0x10>)
 8000c9a:	f7ff ff67 	bl	8000b6c <Encoder_Forward>
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000088 	.word	0x20000088

08000ca8 <backward_1>:
void backward_1()   			{ Encoder_Backward(&Encoder_1); }
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <backward_1+0x10>)
 8000cae:	f7ff ff9d 	bl	8000bec <Encoder_Backward>
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000088 	.word	0x20000088

08000cbc <forward_2>:

void forward_2()  				{ Encoder_Forward (&Encoder_2) ; }
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <forward_2+0x10>)
 8000cc2:	f7ff ff53 	bl	8000b6c <Encoder_Forward>
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000c0 	.word	0x200000c0

08000cd0 <backward_2>:
void backward_2()   			{ Encoder_Backward(&Encoder_2); }
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <backward_2+0x10>)
 8000cd6:	f7ff ff89 	bl	8000bec <Encoder_Backward>
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000c0 	.word	0x200000c0

08000ce4 <main>:

void RCC_Init(void);
void USART_Init(void);

int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	RCC_Init();
 8000ce8:	f000 f818 	bl	8000d1c <RCC_Init>

	PORT_voidInit();
 8000cec:	f7ff fb16 	bl	800031c <PORT_voidInit>

	SPEED_1_init(&Timer3CH1);
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <main+0x28>)
 8000cf2:	f000 f835 	bl	8000d60 <SPEED_1_init>
	SPEED_2_init(&Timer3CH2);
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <main+0x2c>)
 8000cf8:	f000 f84f 	bl	8000d9a <SPEED_2_init>


	/* ENCODER 1 & 2 init */
	Encoder_1_init(&Encoder_1);
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <main+0x30>)
 8000cfe:	f000 f869 	bl	8000dd4 <Encoder_1_init>
	Encoder_2_init(&Encoder_2);
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <main+0x34>)
 8000d04:	f000 f894 	bl	8000e30 <Encoder_2_init>

	/*PWM_voidWrite(&Timer3CH2,170);
	GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN1,GPIO_PIN_LOW);
    */
	/* Loop forever */
	for(;;)
 8000d08:	e7fe      	b.n	8000d08 <main+0x24>
 8000d0a:	bf00      	nop
 8000d0c:	20000078 	.word	0x20000078
 8000d10:	20000080 	.word	0x20000080
 8000d14:	20000088 	.word	0x20000088
 8000d18:	200000c0 	.word	0x200000c0

08000d1c <RCC_Init>:
	}
}


void RCC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	/*configure System Clock*/
	RCC_voidSystemClockInit();
 8000d20:	f7ff fa58 	bl	80001d4 <RCC_voidSystemClockInit>

	/* Enable GPIOA clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOA);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff faa2 	bl	8000270 <RCC_voidPeripheralClockEnable>
	/* Enable GPIOB clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOB);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fa9e 	bl	8000270 <RCC_voidPeripheralClockEnable>

	/* Enable TIM2 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM2);
 8000d34:	2100      	movs	r1, #0
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fa9a 	bl	8000270 <RCC_voidPeripheralClockEnable>

	/* Enable TIM3 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM3);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fa96 	bl	8000270 <RCC_voidPeripheralClockEnable>
	/* Enable TIM4 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM4);
 8000d44:	2102      	movs	r1, #2
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fa92 	bl	8000270 <RCC_voidPeripheralClockEnable>

	/* Enable Selection line of MUX*/
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_SYSCFG);
 8000d4c:	210e      	movs	r1, #14
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f7ff fa8e 	bl	8000270 <RCC_voidPeripheralClockEnable>

	/* Enable USART clock */
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_USART1);
 8000d54:	2104      	movs	r1, #4
 8000d56:	2003      	movs	r0, #3
 8000d58:	f7ff fa8a 	bl	8000270 <RCC_voidPeripheralClockEnable>



}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SPEED_1_init>:
/*
 * speed 1 Init
 * Timer3 CH1   PA6
 */
void SPEED_1_init(TIM_COMP* TIM)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	TIM->TIM_NUM = TIM3;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]
	TIM->TIM_CHANNEL_NUM=CH1;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	705a      	strb	r2, [r3, #1]
	TIM->PWM_MODE=PWM_MODE1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2206      	movs	r2, #6
 8000d78:	709a      	strb	r2, [r3, #2]
	TIM->PWM_PERIOD=200;   //APB1 timer clock = 1 MHZ
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	22c8      	movs	r2, #200	; 0xc8
 8000d7e:	809a      	strh	r2, [r3, #4]
	TIM->PWM_POLARITY=active_high;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	70da      	strb	r2, [r3, #3]
	TIM->TIM_PRESCALER=1;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	719a      	strb	r2, [r3, #6]

	PWM_voidInit(TIM);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fd19 	bl	80007c4 <PWM_voidInit>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <SPEED_2_init>:
/*
 * speed 2 Init
 * Timer3 CH2   PA7
 */
void SPEED_2_init(TIM_COMP* TIM)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	TIM->TIM_NUM = TIM3;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]
	TIM->TIM_CHANNEL_NUM=CH2;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2202      	movs	r2, #2
 8000dac:	705a      	strb	r2, [r3, #1]
	TIM->PWM_MODE=PWM_MODE1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2206      	movs	r2, #6
 8000db2:	709a      	strb	r2, [r3, #2]
	TIM->PWM_PERIOD=200;   //APB1 timer clock = 1 MHZ
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	22c8      	movs	r2, #200	; 0xc8
 8000db8:	809a      	strh	r2, [r3, #4]
	TIM->PWM_POLARITY=active_high;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	70da      	strb	r2, [r3, #3]
	TIM->TIM_PRESCALER=1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	719a      	strb	r2, [r3, #6]

	PWM_voidInit(TIM);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fcfc 	bl	80007c4 <PWM_voidInit>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Encoder_1_init>:

/*
 * ENCODER 1 Init
 */
void Encoder_1_init(Encoder_variables* encoder)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

	/* Set Pins and Variables */
	encoder->EncoderResolution = 2050;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f640 0202 	movw	r2, #2050	; 0x802
 8000de2:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN1;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_1;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <Encoder_1_init+0x54>)
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <Encoder_1_init+0x58>)
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fe51 	bl	8000ac0 <Encoder_init>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08000c95 	.word	0x08000c95
 8000e2c:	08000ca9 	.word	0x08000ca9

08000e30 <Encoder_2_init>:
/*
 * ENCODER 2 Init
 */
void Encoder_2_init(Encoder_variables* encoder)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

	encoder->EncoderResolution = 2050;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f640 0202 	movw	r2, #2050	; 0x802
 8000e3e:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN2;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN3;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line3;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_2;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <Encoder_2_init+0x54>)
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_2;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <Encoder_2_init+0x58>)
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fe23 	bl	8000ac0 <Encoder_init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08000cbd 	.word	0x08000cbd
 8000e88:	08000cd1 	.word	0x08000cd1

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eba:	f000 f811 	bl	8000ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff ff11 	bl	8000ce4 <main>

08000ec2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000ed0:	08000f48 	.word	0x08000f48
  ldr r2, =_sbss
 8000ed4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000ed8:	200000f8 	.word	0x200000f8

08000edc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <__libc_init_array>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4d0d      	ldr	r5, [pc, #52]	; (8000f18 <__libc_init_array+0x38>)
 8000ee4:	4c0d      	ldr	r4, [pc, #52]	; (8000f1c <__libc_init_array+0x3c>)
 8000ee6:	1b64      	subs	r4, r4, r5
 8000ee8:	10a4      	asrs	r4, r4, #2
 8000eea:	2600      	movs	r6, #0
 8000eec:	42a6      	cmp	r6, r4
 8000eee:	d109      	bne.n	8000f04 <__libc_init_array+0x24>
 8000ef0:	4d0b      	ldr	r5, [pc, #44]	; (8000f20 <__libc_init_array+0x40>)
 8000ef2:	4c0c      	ldr	r4, [pc, #48]	; (8000f24 <__libc_init_array+0x44>)
 8000ef4:	f000 f818 	bl	8000f28 <_init>
 8000ef8:	1b64      	subs	r4, r4, r5
 8000efa:	10a4      	asrs	r4, r4, #2
 8000efc:	2600      	movs	r6, #0
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d105      	bne.n	8000f0e <__libc_init_array+0x2e>
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f08:	4798      	blx	r3
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	e7ee      	b.n	8000eec <__libc_init_array+0xc>
 8000f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f12:	4798      	blx	r3
 8000f14:	3601      	adds	r6, #1
 8000f16:	e7f2      	b.n	8000efe <__libc_init_array+0x1e>
 8000f18:	08000f40 	.word	0x08000f40
 8000f1c:	08000f40 	.word	0x08000f40
 8000f20:	08000f40 	.word	0x08000f40
 8000f24:	08000f44 	.word	0x08000f44

08000f28 <_init>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	bf00      	nop
 8000f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2e:	bc08      	pop	{r3}
 8000f30:	469e      	mov	lr, r3
 8000f32:	4770      	bx	lr

08000f34 <_fini>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	bf00      	nop
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr
