
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800110c  08001114  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800110c  0800110c  00011114  2**0
                  CONTENTS
  4 .ARM          00000000  0800110c  0800110c  00011114  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800110c  08001114  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000000  08001114  00020000  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08001114  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011114  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020fe  00000000  00000000  00011144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a4  00000000  00000000  00013242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00013ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00013d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002093  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000133b  00000000  00000000  00015f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000098e8  00000000  00000000  000172ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020bb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000710  00000000  00000000  00020c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010f4 	.word	0x080010f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080010f4 	.word	0x080010f4

080001d4 <Encoder_init>:

#include "ENCODER_interface.h"


void Encoder_init(Encoder_variables* copy_Encoder)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	copy_Encoder->CurrentTime = 0;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2200      	movs	r2, #0
 80001e0:	621a      	str	r2, [r3, #32]
	copy_Encoder->LastTime = 0;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2200      	movs	r2, #0
 80001e6:	625a      	str	r2, [r3, #36]	; 0x24
	copy_Encoder->delta_time  = 0;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f04f 0200 	mov.w	r2, #0
 80001ee:	629a      	str	r2, [r3, #40]	; 0x28

	copy_Encoder->EncoderCounter = 0;
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	f04f 0200 	mov.w	r2, #0
 80001f6:	f04f 0300 	mov.w	r3, #0
 80001fa:	e9c1 2300 	strd	r2, r3, [r1]
	copy_Encoder->LastEncoderCounter = 0;
 80001fe:	6879      	ldr	r1, [r7, #4]
 8000200:	f04f 0200 	mov.w	r2, #0
 8000204:	f04f 0300 	mov.w	r3, #0
 8000208:	e9c1 2306 	strd	r2, r3, [r1, #24]

	copy_Encoder->RPM = 0;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]

	EXTI_LINEx  EXTI_L0={copy_Encoder->Encoder_A_IRQn,
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000218:	733b      	strb	r3, [r7, #12]
 800021a:	2301      	movs	r3, #1
 800021c:	737b      	strb	r3, [r7, #13]
			EXTI_RISING_EDGE};
	EXTI_LINEx  EXTI_L1={copy_Encoder->Encoder_B_IRQn,
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000224:	723b      	strb	r3, [r7, #8]
 8000226:	2301      	movs	r3, #1
 8000228:	727b      	strb	r3, [r7, #9]
			EXTI_RISING_EDGE}; //ONCHANGE

	/* Enable Interrupt*/
	NVIC_voidEnableInterrupt(copy_Encoder->Encoder_A_IRQn);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9ed 	bl	8000610 <NVIC_voidEnableInterrupt>
	NVIC_voidEnableInterrupt(copy_Encoder->Encoder_B_IRQn);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f9e7 	bl	8000610 <NVIC_voidEnableInterrupt>

	/*set call back functions*/
	EXTI_voidSetCallBack(&EXTI_L0,copy_Encoder->ptr_forward);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	4611      	mov	r1, r2
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f8bf 	bl	80003d0 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(&EXTI_L1,copy_Encoder->ptr_backward);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	4611      	mov	r1, r2
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f8b7 	bl	80003d0 <EXTI_voidSetCallBack>

	EXTI_voidInit(&EXTI_L0);
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f87a 	bl	8000360 <EXTI_voidInit>
	EXTI_voidInit(&EXTI_L1);
 800026c:	f107 0308 	add.w	r3, r7, #8
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f875 	bl	8000360 <EXTI_voidInit>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <Encoder_Forward>:

void Encoder_Forward(Encoder_variables *local_encoder)
{
 800027e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	2300      	movs	r3, #0
 800028e:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	7a98      	ldrb	r0, [r3, #10]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7adb      	ldrb	r3, [r3, #11]
 8000298:	f107 020f 	add.w	r2, r7, #15
 800029c:	4619      	mov	r1, r3
 800029e:	f000 f963 	bl	8000568 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7b18      	ldrb	r0, [r3, #12]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	7b5b      	ldrb	r3, [r3, #13]
 80002aa:	f107 020e 	add.w	r2, r7, #14
 80002ae:	4619      	mov	r1, r3
 80002b0:	f000 f95a 	bl	8000568 <GPIO_GetPinValue>
	if(a != b)
 80002b4:	7bfa      	ldrb	r2, [r7, #15]
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d00a      	beq.n	80002d2 <Encoder_Forward+0x54>
		local_encoder->EncoderCounter++;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002c2:	f112 0801 	adds.w	r8, r2, #1
 80002c6:	f143 0900 	adc.w	r9, r3, #0
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	e9c3 8900 	strd	r8, r9, [r3]
	else
		local_encoder->EncoderCounter--;

}
 80002d0:	e008      	b.n	80002e4 <Encoder_Forward+0x66>
		local_encoder->EncoderCounter--;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002d8:	1e54      	subs	r4, r2, #1
 80002da:	f143 35ff 	adc.w	r5, r3, #4294967295
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	e9c3 4500 	strd	r4, r5, [r3]
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080002ee <Encoder_Backward>:

void Encoder_Backward(Encoder_variables *local_encoder)
{
 80002ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

	u8 a = 0, b = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]
 80002fc:	2300      	movs	r3, #0
 80002fe:	73bb      	strb	r3, [r7, #14]
	GPIO_GetPinValue(local_encoder->Encoder_A_Port ,local_encoder->Encoder_A_Pin, &a);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	7a98      	ldrb	r0, [r3, #10]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7adb      	ldrb	r3, [r3, #11]
 8000308:	f107 020f 	add.w	r2, r7, #15
 800030c:	4619      	mov	r1, r3
 800030e:	f000 f92b 	bl	8000568 <GPIO_GetPinValue>

	GPIO_GetPinValue(local_encoder->Encoder_B_Port ,local_encoder->Encoder_B_Pin, &b);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	7b18      	ldrb	r0, [r3, #12]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	7b5b      	ldrb	r3, [r3, #13]
 800031a:	f107 020e 	add.w	r2, r7, #14
 800031e:	4619      	mov	r1, r3
 8000320:	f000 f922 	bl	8000568 <GPIO_GetPinValue>
	if(a == b)
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	7bbb      	ldrb	r3, [r7, #14]
 8000328:	429a      	cmp	r2, r3
 800032a:	d10a      	bne.n	8000342 <Encoder_Backward+0x54>
		local_encoder->EncoderCounter++;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000332:	f112 0801 	adds.w	r8, r2, #1
 8000336:	f143 0900 	adc.w	r9, r3, #0
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	e9c3 8900 	strd	r8, r9, [r3]
	else
		local_encoder->EncoderCounter--;

}
 8000340:	e008      	b.n	8000354 <Encoder_Backward+0x66>
		local_encoder->EncoderCounter--;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000348:	1e54      	subs	r4, r2, #1
 800034a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000360 <EXTI_voidInit>:

//ISR functions array prototype
static void (* EXTI_CallBack[16]) (void) = {NULL};

void EXTI_voidInit(EXTI_LINEx* copy_EXTILine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	/*First: clear all Pending Flags*/
    EXTI->PR=Clear_Pending_Flags;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <EXTI_voidInit+0x6c>)
 800036a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800036e:	615a      	str	r2, [r3, #20]

    /*disable Interrupt mask for selected Interrupt Line*/

    EXTI->IMR|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <EXTI_voidInit+0x6c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	4611      	mov	r1, r2
 800037a:	2201      	movs	r2, #1
 800037c:	408a      	lsls	r2, r1
 800037e:	4611      	mov	r1, r2
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <EXTI_voidInit+0x6c>)
 8000382:	430b      	orrs	r3, r1
 8000384:	6013      	str	r3, [r2, #0]

    /*Set Trigger Mode for selected Interrupt Line*/

    EXTI->RTSR|=((copy_EXTILine->EXTI_TRIG_MODE)<<(copy_EXTILine->EXTI_LINE_NUM));
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <EXTI_voidInit+0x6c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7852      	ldrb	r2, [r2, #1]
 800038e:	4611      	mov	r1, r2
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <EXTI_voidInit+0x6c>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6093      	str	r3, [r2, #8]
    EXTI->FTSR|=(((copy_EXTILine->EXTI_TRIG_MODE)>>1)<<(copy_EXTILine->EXTI_LINE_NUM));
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <EXTI_voidInit+0x6c>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7852      	ldrb	r2, [r2, #1]
 80003a8:	0852      	lsrs	r2, r2, #1
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI_voidInit+0x6c>)
 80003ba:	430b      	orrs	r3, r1
 80003bc:	60d3      	str	r3, [r2, #12]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40013c00 	.word	0x40013c00

080003d0 <EXTI_voidSetCallBack>:
{
	EXTI->SWIER|=(1<<(copy_EXTILine->EXTI_LINE_NUM));
}

void EXTI_voidSetCallBack(EXTI_LINEx* copy_EXTILine,void (*Copy_pvCallBackFunc) (void))
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	EXTI_CallBack[(copy_EXTILine->EXTI_LINE_NUM)] = Copy_pvCallBackFunc;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <EXTI_voidSetCallBack+0x24>)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line0]();
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI0_IRQHandler+0x1c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line0);
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI0_IRQHandler+0x20>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI0_IRQHandler+0x20>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6153      	str	r3, [r2, #20]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000001c 	.word	0x2000001c
 8000418:	40013c00 	.word	0x40013c00

0800041c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line1]();
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI1_IRQHandler+0x1c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line1);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI1_IRQHandler+0x20>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI1_IRQHandler+0x20>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6153      	str	r3, [r2, #20]
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000001c 	.word	0x2000001c
 800043c:	40013c00 	.word	0x40013c00

08000440 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line2]();
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI2_IRQHandler+0x1c>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line2);
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <EXTI2_IRQHandler+0x20>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a04      	ldr	r2, [pc, #16]	; (8000460 <EXTI2_IRQHandler+0x20>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6153      	str	r3, [r2, #20]
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000001c 	.word	0x2000001c
 8000460:	40013c00 	.word	0x40013c00

08000464 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line3]();
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI3_IRQHandler+0x1c>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line3);
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <EXTI3_IRQHandler+0x20>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <EXTI3_IRQHandler+0x20>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	6153      	str	r3, [r2, #20]
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000001c 	.word	0x2000001c
 8000484:	40013c00 	.word	0x40013c00

08000488 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_Line4]();
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI4_IRQHandler+0x1c>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_Line4);
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI4_IRQHandler+0x20>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI4_IRQHandler+0x20>)
 8000498:	f043 0310 	orr.w	r3, r3, #16
 800049c:	6153      	str	r3, [r2, #20]
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000001c 	.word	0x2000001c
 80004a8:	40013c00 	.word	0x40013c00

080004ac <GPIO_SetPinValue>:
#include "GPIO_interface.h"
#include "GPIO_private.h"


u8  GPIO_SetPinValue(u8 Copy_u8Port,Pins_t Copy_u8Pin, u8 Copy_u8Value)
{	
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	460b      	mov	r3, r1
 80004b8:	71bb      	strb	r3, [r7, #6]
 80004ba:	4613      	mov	r3, r2
 80004bc:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState=FALSE;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]
	if ((Copy_u8Pin < GPIO_u8NumOfPins)&&(Copy_u8Port < GPIO_u8NumOfPorts))
 80004c2:	79bb      	ldrb	r3, [r7, #6]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d841      	bhi.n	800054c <GPIO_SetPinValue+0xa0>
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d83e      	bhi.n	800054c <GPIO_SetPinValue+0xa0>
	{
		switch(Copy_u8Port)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d028      	beq.n	8000526 <GPIO_SetPinValue+0x7a>
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	dc37      	bgt.n	8000548 <GPIO_SetPinValue+0x9c>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <GPIO_SetPinValue+0x36>
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d011      	beq.n	8000504 <GPIO_SetPinValue+0x58>
 80004e0:	e032      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		{ case GPIO_PORTA: ASSIGN_BIT(REG_GPIO_PORTA->ODR,Copy_u8Pin, Copy_u8Value);break;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <GPIO_SetPinValue+0xb0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	2101      	movs	r1, #1
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4013      	ands	r3, r2
 80004f2:	7979      	ldrb	r1, [r7, #5]
 80004f4:	79ba      	ldrb	r2, [r7, #6]
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <GPIO_SetPinValue+0xb0>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	e021      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTB: ASSIGN_BIT(REG_GPIO_PORTB->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <GPIO_SetPinValue+0xb4>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	79ba      	ldrb	r2, [r7, #6]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	43d2      	mvns	r2, r2
 8000512:	4013      	ands	r3, r2
 8000514:	7979      	ldrb	r1, [r7, #5]
 8000516:	79ba      	ldrb	r2, [r7, #6]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <GPIO_SetPinValue+0xb4>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6153      	str	r3, [r2, #20]
 8000524:	e010      	b.n	8000548 <GPIO_SetPinValue+0x9c>
		  case GPIO_PORTC: ASSIGN_BIT(REG_GPIO_PORTC->ODR,Copy_u8Pin, Copy_u8Value);break;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <GPIO_SetPinValue+0xb8>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	79ba      	ldrb	r2, [r7, #6]
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	43d2      	mvns	r2, r2
 8000534:	4013      	ands	r3, r2
 8000536:	7979      	ldrb	r1, [r7, #5]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <GPIO_SetPinValue+0xb8>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	bf00      	nop
		}
	   Local_u8ErrorState=TRUE;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
	   
	}
		
	return Local_u8ErrorState;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800

08000568 <GPIO_GetPinValue>:
  			
	return Local_u8ErrorState;
}

u8  GPIO_GetPinValue(u8 Copy_u8Port, Pins_t Copy_u8Pin, u8* Copy_u8PTRvalue)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	603a      	str	r2, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	460b      	mov	r3, r1
 8000576:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState=FALSE;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
	
	if ((Copy_u8PTRvalue!=NULL) && (Copy_u8Pin<GPIO_u8NumOfPins))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d038      	beq.n	80005f4 <GPIO_GetPinValue+0x8c>
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d835      	bhi.n	80005f4 <GPIO_GetPinValue+0x8c>
	{
		switch(Copy_u8Port)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d022      	beq.n	80005d4 <GPIO_GetPinValue+0x6c>
 800058e:	2b02      	cmp	r3, #2
 8000590:	dc2e      	bgt.n	80005f0 <GPIO_GetPinValue+0x88>
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <GPIO_GetPinValue+0x34>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d00e      	beq.n	80005b8 <GPIO_GetPinValue+0x50>
 800059a:	e029      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		{ case GPIO_PORTA:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTA->IDR, Copy_u8Pin);break;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <GPIO_GetPinValue+0x9c>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	401a      	ands	r2, r3
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	fa22 f303 	lsr.w	r3, r2, r3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	e01b      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTB:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTB->IDR, Copy_u8Pin);break;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <GPIO_GetPinValue+0xa0>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	79ba      	ldrb	r2, [r7, #6]
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	401a      	ands	r2, r3
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	fa22 f303 	lsr.w	r3, r2, r3
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e00d      	b.n	80005f0 <GPIO_GetPinValue+0x88>
		  case GPIO_PORTC:*Copy_u8PTRvalue =GET_BIT(REG_GPIO_PORTC->IDR, Copy_u8Pin);break;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <GPIO_GetPinValue+0xa4>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	401a      	ands	r2, r3
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	fa22 f303 	lsr.w	r3, r2, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	bf00      	nop
		}
		
		Local_u8ErrorState=TRUE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
		
	} 

	return Local_u8ErrorState;
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800

08000610 <NVIC_voidEnableInterrupt>:
#include"NVIC_interface.h"

static u32 GlobalStatic_32GroupConfig;

void NVIC_voidEnableInterrupt(INT_PRIO_t Copy_u8InterruptPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	Copy_u8InterruptPriority-=7;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	3b07      	subs	r3, #7
 800061e:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[Copy_u8InterruptPriority / 32] = 1 << (Copy_u8InterruptPriority % 32);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	2201      	movs	r2, #1
 8000628:	fa02 f103 	lsl.w	r1, r2, r3
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <NVIC_voidEnableInterrupt+0x34>)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	095b      	lsrs	r3, r3, #5
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_config.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	
	GPIOA_MODER = GPIOA_Mode;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <PORT_voidInit+0xa4>)
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <PORT_voidInit+0xa8>)
 8000650:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <PORT_voidInit+0xac>)
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <PORT_voidInit+0xb0>)
 8000656:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <PORT_voidInit+0xb4>)
 800065a:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 800065e:	601a      	str	r2, [r3, #0]
	
	GPIOA_OTYPER = GPIOA_Output_Type ;
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <PORT_voidInit+0xb8>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type ;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <PORT_voidInit+0xbc>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type ;
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <PORT_voidInit+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	
	GPIOA_OSPEEDR = GPIOA_Speed;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <PORT_voidInit+0xc4>)
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <PORT_voidInit+0xc8>)
 8000676:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR = GPIOB_Speed;
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <PORT_voidInit+0xcc>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <PORT_voidInit+0xb0>)
 800067c:	601a      	str	r2, [r3, #0]
	GPIOC_OSPEEDR = GPIOC_Speed;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <PORT_voidInit+0xd0>)
 8000680:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000684:	601a      	str	r2, [r3, #0]
	
	GPIOA_PUPDR = GPIOA_PUPD;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <PORT_voidInit+0xd4>)
 8000688:	4a25      	ldr	r2, [pc, #148]	; (8000720 <PORT_voidInit+0xd8>)
 800068a:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <PORT_voidInit+0xdc>)
 800068e:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <PORT_voidInit+0xb0>)
 8000690:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <PORT_voidInit+0xe0>)
 8000694:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 8000698:	601a      	str	r2, [r3, #0]
	

    
    GPIOA_AFRL|=(GPIOA_AF<< GPIOx_AFRL0);
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <PORT_voidInit+0xe4>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4923      	ldr	r1, [pc, #140]	; (800072c <PORT_voidInit+0xe4>)
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <PORT_voidInit+0xe8>)
 80006a2:	4313      	orrs	r3, r2
 80006a4:	600b      	str	r3, [r1, #0]
	GPIOB_AFRL|=(GPIOB_AF<< GPIOx_AFRL0);
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <PORT_voidInit+0xec>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a22      	ldr	r2, [pc, #136]	; (8000734 <PORT_voidInit+0xec>)
 80006ac:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 80006b0:	6013      	str	r3, [r2, #0]
	GPIOC_AFRL|=(GPIOC_AF<< GPIOx_AFRL0);
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PORT_voidInit+0xf0>)
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <PORT_voidInit+0xf0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6013      	str	r3, [r2, #0]
								
    GPIOA_AFRH|= (GPIOA_AF>> 32);
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <PORT_voidInit+0xf4>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	491f      	ldr	r1, [pc, #124]	; (800073c <PORT_voidInit+0xf4>)
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <PORT_voidInit+0xf8>)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	600b      	str	r3, [r1, #0]
	GPIOB_AFRH|= (GPIOB_AF>> 32);
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <PORT_voidInit+0xfc>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	491e      	ldr	r1, [pc, #120]	; (8000744 <PORT_voidInit+0xfc>)
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <PORT_voidInit+0x100>)
 80006ce:	4313      	orrs	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]
	GPIOC_AFRH|= (GPIOC_AF>> 32);
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <PORT_voidInit+0x104>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1d      	ldr	r2, [pc, #116]	; (800074c <PORT_voidInit+0x104>)
 80006d8:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 80006dc:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80006e0:	6013      	str	r3, [r2, #0]
	
	
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40020000 	.word	0x40020000
 80006f0:	6955a500 	.word	0x6955a500
 80006f4:	40020400 	.word	0x40020400
 80006f8:	55155555 	.word	0x55155555
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020004 	.word	0x40020004
 8000704:	40020404 	.word	0x40020404
 8000708:	40020804 	.word	0x40020804
 800070c:	40020008 	.word	0x40020008
 8000710:	41555555 	.word	0x41555555
 8000714:	40020408 	.word	0x40020408
 8000718:	40020808 	.word	0x40020808
 800071c:	4002000c 	.word	0x4002000c
 8000720:	65555555 	.word	0x65555555
 8000724:	4002040c 	.word	0x4002040c
 8000728:	4002080c 	.word	0x4002080c
 800072c:	40020020 	.word	0x40020020
 8000730:	22bbbbbb 	.word	0x22bbbbbb
 8000734:	40020420 	.word	0x40020420
 8000738:	40020820 	.word	0x40020820
 800073c:	40020024 	.word	0x40020024
 8000740:	b00bbbbb 	.word	0xb00bbbbb
 8000744:	40020424 	.word	0x40020424
 8000748:	bbbb0bbb 	.word	0xbbbb0bbb
 800074c:	40020824 	.word	0x40020824

08000750 <PWM_voidInit>:
#include "PWM_private.h"
#include "PWM_config.h"

// PWM signal is at edge aligned mode

void  PWM_voidInit(TIM_COMP* Copy_TIM){
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]


	switch (Copy_TIM->TIM_NUM)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b03      	cmp	r3, #3
 800075e:	f000 80fd 	beq.w	800095c <PWM_voidInit+0x20c>
 8000762:	2b03      	cmp	r3, #3
 8000764:	f300 8167 	bgt.w	8000a36 <PWM_voidInit+0x2e6>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <PWM_voidInit+0x24>
 800076c:	2b02      	cmp	r3, #2
 800076e:	f000 8087 	beq.w	8000880 <PWM_voidInit+0x130>

		TIMER4->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
		break;


	default:       break;
 8000772:	e160      	b.n	8000a36 <PWM_voidInit+0x2e6>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d11b      	bne.n	80007b4 <PWM_voidInit+0x64>
			TIMER2->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 800077c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7892      	ldrb	r2, [r2, #2]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	4611      	mov	r1, r2
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	430b      	orrs	r3, r1
 8000790:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC1S0);
 8000792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC1S1);
 80007a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	e05e      	b.n	8000872 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d11b      	bne.n	80007f4 <PWM_voidInit+0xa4>
			TIMER2->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 80007bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7892      	ldrb	r2, [r2, #2]
 80007c6:	0312      	lsls	r2, r2, #12
 80007c8:	4611      	mov	r1, r2
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC2S0);
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007e0:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER2->CCMR1,CC2S1);
 80007e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	e03e      	b.n	8000872 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d11b      	bne.n	8000834 <PWM_voidInit+0xe4>
			TIMER2->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 80007fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	7892      	ldrb	r2, [r2, #2]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	4611      	mov	r1, r2
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	430b      	orrs	r3, r1
 8000810:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC3S0);
 8000812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC3S1);
 8000822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	f023 0302 	bic.w	r3, r3, #2
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	e01e      	b.n	8000872 <PWM_voidInit+0x122>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d11a      	bne.n	8000872 <PWM_voidInit+0x122>
			TIMER2->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 800083c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7892      	ldrb	r2, [r2, #2]
 8000846:	0312      	lsls	r2, r2, #12
 8000848:	4611      	mov	r1, r2
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	430b      	orrs	r3, r1
 8000850:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC4S0);
 8000852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000860:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER2->CCMR2,CC4S1);
 8000862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000870:	61d3      	str	r3, [r2, #28]
		TIMER2->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	005a      	lsls	r2, r3, #1
 8000878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800087c:	621a      	str	r2, [r3, #32]
		break;
 800087e:	e0db      	b.n	8000a38 <PWM_voidInit+0x2e8>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d115      	bne.n	80008b4 <PWM_voidInit+0x164>
			TIMER3->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 8000888:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <PWM_voidInit+0x2f4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	7892      	ldrb	r2, [r2, #2]
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	4611      	mov	r1, r2
 8000894:	4a6b      	ldr	r2, [pc, #428]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC1S0);
 800089a:	4b6a      	ldr	r3, [pc, #424]	; (8000a44 <PWM_voidInit+0x2f4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a69      	ldr	r2, [pc, #420]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC1S1);
 80008a6:	4b67      	ldr	r3, [pc, #412]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a66      	ldr	r2, [pc, #408]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008ac:	f023 0302 	bic.w	r3, r3, #2
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	e04c      	b.n	800094e <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d115      	bne.n	80008e8 <PWM_voidInit+0x198>
			TIMER3->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 80008bc:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	7892      	ldrb	r2, [r2, #2]
 80008c4:	0312      	lsls	r2, r2, #12
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC2S0);
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a5c      	ldr	r2, [pc, #368]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d8:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER3->CCMR1,CC2S1);
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	e032      	b.n	800094e <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d115      	bne.n	800091c <PWM_voidInit+0x1cc>
			TIMER3->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 80008f0:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	7892      	ldrb	r2, [r2, #2]
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a51      	ldr	r2, [pc, #324]	; (8000a44 <PWM_voidInit+0x2f4>)
 80008fe:	430b      	orrs	r3, r1
 8000900:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC3S0);
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC3S1);
 800090e:	4b4d      	ldr	r3, [pc, #308]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000914:	f023 0302 	bic.w	r3, r3, #2
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	e018      	b.n	800094e <PWM_voidInit+0x1fe>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d114      	bne.n	800094e <PWM_voidInit+0x1fe>
			TIMER3->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	7892      	ldrb	r2, [r2, #2]
 800092c:	0312      	lsls	r2, r2, #12
 800092e:	4611      	mov	r1, r2
 8000930:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000932:	430b      	orrs	r3, r1
 8000934:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC4S0);
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a42      	ldr	r2, [pc, #264]	; (8000a44 <PWM_voidInit+0x2f4>)
 800093c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000940:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER3->CCMR2,CC4S1);
 8000942:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <PWM_voidInit+0x2f4>)
 8000948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800094c:	61d3      	str	r3, [r2, #28]
		TIMER2->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	005a      	lsls	r2, r3, #1
 8000954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000958:	621a      	str	r2, [r3, #32]
		break;
 800095a:	e06d      	b.n	8000a38 <PWM_voidInit+0x2e8>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d115      	bne.n	8000990 <PWM_voidInit+0x240>
			TIMER4->CCMR1|=(Copy_TIM->PWM_MODE)<<OC1M0;
 8000964:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7892      	ldrb	r2, [r2, #2]
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	4611      	mov	r1, r2
 8000970:	4a35      	ldr	r2, [pc, #212]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000972:	430b      	orrs	r3, r1
 8000974:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC1S0);
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <PWM_voidInit+0x2f8>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC1S1);
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000988:	f023 0302 	bic.w	r3, r3, #2
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	e04c      	b.n	8000a2a <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d115      	bne.n	80009c4 <PWM_voidInit+0x274>
			TIMER4->CCMR1|=(Copy_TIM->PWM_MODE)<<OC2M0;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <PWM_voidInit+0x2f8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7892      	ldrb	r2, [r2, #2]
 80009a0:	0312      	lsls	r2, r2, #12
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC2S0);
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b4:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIMER4->CCMR1,CC2S1);
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	e032      	b.n	8000a2a <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d115      	bne.n	80009f8 <PWM_voidInit+0x2a8>
			TIMER4->CCMR2|=(Copy_TIM->PWM_MODE)<<OC3M0;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	7892      	ldrb	r2, [r2, #2]
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC3S0);
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC3S1);
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <PWM_voidInit+0x2f8>)
 80009f0:	f023 0302 	bic.w	r3, r3, #2
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	e018      	b.n	8000a2a <PWM_voidInit+0x2da>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 4)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d114      	bne.n	8000a2a <PWM_voidInit+0x2da>
			TIMER4->CCMR2|=(Copy_TIM->PWM_MODE)<<OC4M0;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	7892      	ldrb	r2, [r2, #2]
 8000a08:	0312      	lsls	r2, r2, #12
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC4S0);
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a1c:	61d3      	str	r3, [r2, #28]
			CLEAR_BIT(TIMER4->CCMR2,CC4S1);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a28:	61d3      	str	r3, [r2, #28]
		TIMER4->CCER=(Copy_TIM->PWM_POLARITY)<<CC1P;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	78db      	ldrb	r3, [r3, #3]
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <PWM_voidInit+0x2f8>)
 8000a32:	621a      	str	r2, [r3, #32]
		break;
 8000a34:	e000      	b.n	8000a38 <PWM_voidInit+0x2e8>
	default:       break;
 8000a36:	bf00      	nop
	}



}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40000400 	.word	0x40000400
 8000a48:	40000800 	.word	0x40000800

08000a4c <PWM_voidWrite>:

void  PWM_voidWrite(TIM_COMP* Copy_TIM,u16 Copy_u16dutyCycle){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]

	switch (Copy_TIM->TIM_NUM)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	f000 80e1 	beq.w	8000c24 <PWM_voidWrite+0x1d8>
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	f300 813e 	bgt.w	8000ce4 <PWM_voidWrite+0x298>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d002      	beq.n	8000a72 <PWM_voidWrite+0x26>
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d079      	beq.n	8000b64 <PWM_voidWrite+0x118>
		/*Counter enable*/
		SET_BIT(TIMER4->CR1,CEN);

		break;

	default: break;
 8000a70:	e138      	b.n	8000ce4 <PWM_voidWrite+0x298>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d114      	bne.n	8000aa4 <PWM_voidWrite+0x58>
			SET_BIT(TIMER2->CCMR1,OC1PE);
 8000a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER2->CCER,CC1E);
 8000a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6213      	str	r3, [r2, #32]
			TIMER2->CCR1 = Copy_u16dutyCycle;
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	6353      	str	r3, [r2, #52]	; 0x34
 8000aa2:	e049      	b.n	8000b38 <PWM_voidWrite+0xec>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d114      	bne.n	8000ad6 <PWM_voidWrite+0x8a>
			SET_BIT(TIMER2->CCMR1,OC2PE);
 8000aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aba:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER2->CCER,CC2E);
 8000abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6213      	str	r3, [r2, #32]
			TIMER2->CCR2 = Copy_u16dutyCycle;
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	6393      	str	r3, [r2, #56]	; 0x38
 8000ad4:	e030      	b.n	8000b38 <PWM_voidWrite+0xec>
		else if (Copy_TIM->TIM_CHANNEL_NUM == CH3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d114      	bne.n	8000b08 <PWM_voidWrite+0xbc>
			SET_BIT(TIMER2->CCMR2,OC3PE);
 8000ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER2->CCER,CC3E);
 8000aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afc:	6213      	str	r3, [r2, #32]
			TIMER2->CCR3 = Copy_u16dutyCycle;
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b06:	e017      	b.n	8000b38 <PWM_voidWrite+0xec>
		else if (Copy_TIM->TIM_CHANNEL_NUM== CH4)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d113      	bne.n	8000b38 <PWM_voidWrite+0xec>
			SET_BIT(TIMER2->CCMR2,OC4PE);
 8000b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b1e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER2->CCER,CC4E);
 8000b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b2e:	6213      	str	r3, [r2, #32]
			TIMER2->CCR4 = Copy_u16dutyCycle;
 8000b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
		TIMER2->ARR=Copy_TIM->PWM_PERIOD;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	889a      	ldrh	r2, [r3, #4]
 8000b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
		SET_BIT(TIMER2->EGR,UG);
 8000b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6153      	str	r3, [r2, #20]
		SET_BIT(TIMER2->CR1,CEN);
 8000b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6013      	str	r3, [r2, #0]
		break;
 8000b62:	e0c0      	b.n	8000ce6 <PWM_voidWrite+0x29a>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	785b      	ldrb	r3, [r3, #1]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10f      	bne.n	8000b8c <PWM_voidWrite+0x140>
			SET_BIT(TIMER3->CCMR1,OC1PE);
 8000b6c:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a60      	ldr	r2, [pc, #384]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER3->CCER,CC1E);
 8000b78:	4b5e      	ldr	r3, [pc, #376]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	4a5d      	ldr	r2, [pc, #372]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6213      	str	r3, [r2, #32]
			TIMER3->CCR1 = Copy_u16dutyCycle;
 8000b84:	4a5b      	ldr	r2, [pc, #364]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	6353      	str	r3, [r2, #52]	; 0x34
 8000b8a:	e03a      	b.n	8000c02 <PWM_voidWrite+0x1b6>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	785b      	ldrb	r3, [r3, #1]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d10f      	bne.n	8000bb4 <PWM_voidWrite+0x168>
			SET_BIT(TIMER3->CCMR1,OC2PE);
 8000b94:	4b57      	ldr	r3, [pc, #348]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a56      	ldr	r2, [pc, #344]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b9e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER3->CCER,CC2E);
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	4a53      	ldr	r2, [pc, #332]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	6213      	str	r3, [r2, #32]
			TIMER3->CCR2 = Copy_u16dutyCycle;
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	6393      	str	r3, [r2, #56]	; 0x38
 8000bb2:	e026      	b.n	8000c02 <PWM_voidWrite+0x1b6>
		else if (Copy_TIM->TIM_CHANNEL_NUM == CH3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d10f      	bne.n	8000bdc <PWM_voidWrite+0x190>
			SET_BIT(TIMER3->CCMR2,OC3PE);
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER3->CCER,CC3E);
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6213      	str	r3, [r2, #32]
			TIMER3->CCR3 = Copy_u16dutyCycle;
 8000bd4:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000bda:	e012      	b.n	8000c02 <PWM_voidWrite+0x1b6>
		else if (Copy_TIM->TIM_CHANNEL_NUM== CH4)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d10e      	bne.n	8000c02 <PWM_voidWrite+0x1b6>
			SET_BIT(TIMER3->CCMR2,OC4PE);
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bee:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER3->CCER,CC4E);
 8000bf0:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4a3f      	ldr	r2, [pc, #252]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfa:	6213      	str	r3, [r2, #32]
			TIMER3->CCR4 = Copy_u16dutyCycle;
 8000bfc:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
		TIMER3->ARR=Copy_TIM->PWM_PERIOD;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	889a      	ldrh	r2, [r3, #4]
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
		SET_BIT(TIMER3->EGR,UG);
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6153      	str	r3, [r2, #20]
		SET_BIT(TIMER3->CR1,CEN);
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <PWM_voidWrite+0x2a8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6013      	str	r3, [r2, #0]
		break;
 8000c22:	e060      	b.n	8000ce6 <PWM_voidWrite+0x29a>
		if (Copy_TIM->TIM_CHANNEL_NUM == 1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d10f      	bne.n	8000c4c <PWM_voidWrite+0x200>
			SET_BIT(TIMER4->CCMR1,OC1PE);
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER4->CCER,CC1E);
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6213      	str	r3, [r2, #32]
			TIMER4->CCR1 = Copy_u16dutyCycle;
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	6353      	str	r3, [r2, #52]	; 0x34
 8000c4a:	e03a      	b.n	8000cc2 <PWM_voidWrite+0x276>
		else if (Copy_TIM->TIM_CHANNEL_NUM == 2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d10f      	bne.n	8000c74 <PWM_voidWrite+0x228>
			SET_BIT(TIMER4->CCMR1,OC2PE);
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c5e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER4->CCER,CC2E);
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6213      	str	r3, [r2, #32]
			TIMER4->CCR2 = Copy_u16dutyCycle;
 8000c6c:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	6393      	str	r3, [r2, #56]	; 0x38
 8000c72:	e026      	b.n	8000cc2 <PWM_voidWrite+0x276>
		else if (Copy_TIM->TIM_CHANNEL_NUM == CH3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	785b      	ldrb	r3, [r3, #1]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d10f      	bne.n	8000c9c <PWM_voidWrite+0x250>
			SET_BIT(TIMER4->CCMR2,OC3PE);
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER4->CCER,CC3E);
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6213      	str	r3, [r2, #32]
			TIMER4->CCR3 = Copy_u16dutyCycle;
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c9a:	e012      	b.n	8000cc2 <PWM_voidWrite+0x276>
		else if (Copy_TIM->TIM_CHANNEL_NUM== CH4)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d10e      	bne.n	8000cc2 <PWM_voidWrite+0x276>
			SET_BIT(TIMER4->CCMR2,OC4PE);
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000caa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cae:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER4->CCER,CC4E);
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cba:	6213      	str	r3, [r2, #32]
			TIMER4->CCR4 = Copy_u16dutyCycle;
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
		TIMER4->ARR=Copy_TIM->PWM_PERIOD;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889a      	ldrh	r2, [r3, #4]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
		SET_BIT(TIMER4->EGR,UG);
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6153      	str	r3, [r2, #20]
		SET_BIT(TIMER4->CR1,CEN);
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <PWM_voidWrite+0x2ac>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6013      	str	r3, [r2, #0]
		break;
 8000ce2:	e000      	b.n	8000ce6 <PWM_voidWrite+0x29a>
	default: break;
 8000ce4:	bf00      	nop
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	40000800 	.word	0x40000800

08000cfc <RCC_voidSystemClockInit>:
#include"RCC_config.h"
#include"RCC_interface.h"


void	RCC_voidSystemClockInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

    /******************MCO1,2 Prescaler*************/
  	RCC->CFGR|=(Microcontroller_Clk1_Prescaler<<RCC_CFGR_MCO1PRE0);
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d0a:	6093      	str	r3, [r2, #8]
	RCC->CFGR|=(Microcontroller_Clk2_Prescaler<<RCC_CFGR_MCO2PRE0);
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d16:	6093      	str	r3, [r2, #8]

    /******************MCO1,2 Source Selection*************/
	RCC->CFGR|=(Microcontroller_Clk_Output1<<RCC_CFGR_MCO10);
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d22:	6093      	str	r3, [r2, #8]
  	RCC->CFGR|=(Microcontroller_Clk_Output2<<RCC_CFGR_MCO20);
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	6093      	str	r3, [r2, #8]


    /*************** Clock Security System ***************/
  	RCC->CR|=(RCC_u8CSSON<<RCC_CR_CSSON);
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d36:	6013      	str	r3, [r2, #0]

	/*************** Clock Source Switch ***************/
  	RCC->CFGR|=(System_Clk_Source<<RCC_CFGR_SW0);
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	6093      	str	r3, [r2, #8]

	/****************** AHB Prescaler ******************/
  	RCC->CFGR|=(RCC_u8AHB_PRESCALER<<RCC_CFGR_HPRE0);
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	6093      	str	r3, [r2, #8]


	/****************** APB1 Prescaler ******************/
  	RCC->CFGR|=(RCC_u8APB1_PRESCALER<<RCC_CFGR_PPRE10);
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d52:	6093      	str	r3, [r2, #8]
	/****************** APB2 Prescaler ******************/
	
  	RCC->CFGR|=(RCC_u8APB2_PRESCALER<<RCC_CFGR_PPRE20);
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	6093      	str	r3, [r2, #8]

	#endif
	
	#if RCC_u8HSEON_Mode==RCC_u8Clk_Enable
	/*************** Clock By Pass Enable ***************/
  	RCC->CR|=(RCC_u8HSEPYB<<RCC_CR_HSEBYP);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6013      	str	r3, [r2, #0]
  	RCC->CR|=(RCC_u8HSEON_Mode<<RCC_CR_HSEON);
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSIRDY));
 8000d70:	bf00      	nop
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d74:	681b      	ldr	r3, [r3, #0]

    #endif
	
	#if RCC_u8HSION_Mode==RCC_u8Clk_Enable
  	RCC->CR|=(RCC_u8HSION_Mode<<RCC_CR_HSION);
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]

	while(!GET_BIT(RCC->CR,RCC_CR_HSERDY));
 8000d82:	bf00      	nop
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <RCC_voidSystemClockInit+0x98>)
 8000d86:	681b      	ldr	r3, [r3, #0]

    #endif	
	
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <RCC_voidPeripheralClockEnable>:
  
u8	RCC_voidPeripheralClockEnable(u8 RCC_u8CopyBus,Peripherals_t RCC_u8CopyPeripheral)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Error=OK;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
	if (RCC_u8CopyPeripheral<32)
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	2b1f      	cmp	r3, #31
 8000db0:	d83d      	bhi.n	8000e2e <RCC_voidPeripheralClockEnable+0x96>
	{
		switch(RCC_u8CopyBus)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d837      	bhi.n	8000e28 <RCC_voidPeripheralClockEnable+0x90>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <RCC_voidPeripheralClockEnable+0x28>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000dd1 	.word	0x08000dd1
 8000dc4:	08000de7 	.word	0x08000de7
 8000dc8:	08000dfd 	.word	0x08000dfd
 8000dcc:	08000e13 	.word	0x08000e13
		{
			case RCC_AHB1: SET_BIT(RCC->AHB1ENR,RCC_u8CopyPeripheral);break;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	e025      	b.n	8000e32 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_AHB2: SET_BIT(RCC->AHB2ENR,RCC_u8CopyPeripheral);break;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	79ba      	ldrb	r2, [r7, #6]
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	4611      	mov	r1, r2
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000df6:	430b      	orrs	r3, r1
 8000df8:	6353      	str	r3, [r2, #52]	; 0x34
 8000dfa:	e01a      	b.n	8000e32 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB1: SET_BIT(RCC->APB1ENR,RCC_u8CopyPeripheral);break;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	79ba      	ldrb	r2, [r7, #6]
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	e00f      	b.n	8000e32 <RCC_voidPeripheralClockEnable+0x9a>
			case RCC_APB2: SET_BIT(RCC->APB2ENR,RCC_u8CopyPeripheral);break;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	79ba      	ldrb	r2, [r7, #6]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <RCC_voidPeripheralClockEnable+0xa8>)
 8000e22:	430b      	orrs	r3, r1
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	e004      	b.n	8000e32 <RCC_voidPeripheralClockEnable+0x9a>
			default : Local_u8Error =NOK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e001      	b.n	8000e32 <RCC_voidPeripheralClockEnable+0x9a>
			
	}
	else
	{
		
		Local_u8Error =NOK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
		
	}
		
		
	return Local_u8Error;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40023800 	.word	0x40023800

08000e44 <forward_1>:

void Encoder_1_init(Encoder_variables* encoder);
void Encoder_2_init(Encoder_variables* encoder);


void forward_1()  				{ Encoder_Forward (&Encoder_1) ; }
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <forward_1+0x10>)
 8000e4a:	f7ff fa18 	bl	800027e <Encoder_Forward>
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000070 	.word	0x20000070

08000e58 <backward_1>:
void backward_1()   			{ Encoder_Backward(&Encoder_1); }
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <backward_1+0x10>)
 8000e5e:	f7ff fa46 	bl	80002ee <Encoder_Backward>
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000070 	.word	0x20000070

08000e6c <forward_2>:

void forward_2()  				{ Encoder_Forward (&Encoder_2) ; }
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <forward_2+0x10>)
 8000e72:	f7ff fa04 	bl	800027e <Encoder_Forward>
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000a8 	.word	0x200000a8

08000e80 <backward_2>:
void backward_2()   			{ Encoder_Backward(&Encoder_2); }
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <backward_2+0x10>)
 8000e86:	f7ff fa32 	bl	80002ee <Encoder_Backward>
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000a8 	.word	0x200000a8

08000e94 <main>:

void RCC_Init(void);

int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	RCC_Init();
 8000e98:	f000 f82a 	bl	8000ef0 <RCC_Init>

	PORT_voidInit();
 8000e9c:	f7ff fbd4 	bl	8000648 <PORT_voidInit>

	SPEED_1_init(&Timer3CH1);
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <main+0x4c>)
 8000ea2:	f000 f843 	bl	8000f2c <SPEED_1_init>
	SPEED_2_init(&Timer3CH2);
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <main+0x50>)
 8000ea8:	f000 f85d 	bl	8000f66 <SPEED_2_init>


	/* ENCODER 1 & 2 init */
	Encoder_1_init(&Encoder_1);
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <main+0x54>)
 8000eae:	f000 f877 	bl	8000fa0 <Encoder_1_init>
	Encoder_2_init(&Encoder_2);
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <main+0x58>)
 8000eb4:	f000 f8a2 	bl	8000ffc <Encoder_2_init>

	//PWM_voidInit(&Timer1);
	/* motor A | B output pins */

	PWM_voidWrite(&Timer3CH1,50);
 8000eb8:	2132      	movs	r1, #50	; 0x32
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <main+0x4c>)
 8000ebc:	f7ff fdc6 	bl	8000a4c <PWM_voidWrite>
	GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN0,GPIO_PIN_LOW);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff faf1 	bl	80004ac <GPIO_SetPinValue>


	/* motor C | D output pins */

	PWM_voidWrite(&Timer3CH2,170);
 8000eca:	21aa      	movs	r1, #170	; 0xaa
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <main+0x50>)
 8000ece:	f7ff fdbd 	bl	8000a4c <PWM_voidWrite>
	GPIO_SetPinValue(GPIO_PORTB,GPIO_PIN1,GPIO_PIN_LOW);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fae8 	bl	80004ac <GPIO_SetPinValue>

	/* Loop forever */
	for(;;)
 8000edc:	e7fe      	b.n	8000edc <main+0x48>
 8000ede:	bf00      	nop
 8000ee0:	2000005c 	.word	0x2000005c
 8000ee4:	20000064 	.word	0x20000064
 8000ee8:	20000070 	.word	0x20000070
 8000eec:	200000a8 	.word	0x200000a8

08000ef0 <RCC_Init>:
	}
}


void RCC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	/*configure System Clock*/
	RCC_voidSystemClockInit();
 8000ef4:	f7ff ff02 	bl	8000cfc <RCC_voidSystemClockInit>

	/* Enable GPIOA clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOA);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ff4c 	bl	8000d98 <RCC_voidPeripheralClockEnable>
	/* Enable GPIOB clock */
	RCC_voidPeripheralClockEnable(RCC_AHB1,RCC_GPIOB);
 8000f00:	2101      	movs	r1, #1
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff48 	bl	8000d98 <RCC_voidPeripheralClockEnable>

	/* Enable TIM2 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM2);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff ff44 	bl	8000d98 <RCC_voidPeripheralClockEnable>

	/* Enable TIM3 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM3);
 8000f10:	2101      	movs	r1, #1
 8000f12:	2002      	movs	r0, #2
 8000f14:	f7ff ff40 	bl	8000d98 <RCC_voidPeripheralClockEnable>
	/* Enable TIM4 clock */
	RCC_voidPeripheralClockEnable(RCC_APB1,RCC_TIM4);
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f7ff ff3c 	bl	8000d98 <RCC_voidPeripheralClockEnable>

	/* Enable Selection line of MUX*/
	RCC_voidPeripheralClockEnable(RCC_APB2,RCC_SYSCFG);
 8000f20:	210e      	movs	r1, #14
 8000f22:	2003      	movs	r0, #3
 8000f24:	f7ff ff38 	bl	8000d98 <RCC_voidPeripheralClockEnable>



}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SPEED_1_init>:
/*
 * speed 1 Init
 * Timer3 CH1   PA6
 */
void SPEED_1_init(TIM_COMP* TIM)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	TIM->TIM_NUM = TIM3;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]
	TIM->TIM_CHANNEL_NUM=CH1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	705a      	strb	r2, [r3, #1]
	TIM->PWM_MODE=PWM_MODE1;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2206      	movs	r2, #6
 8000f44:	709a      	strb	r2, [r3, #2]
	TIM->PWM_PERIOD=200;   //APB1 timer clock = 1 MHZ
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	22c8      	movs	r2, #200	; 0xc8
 8000f4a:	809a      	strh	r2, [r3, #4]
	TIM->PWM_POLARITY=active_high;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	70da      	strb	r2, [r3, #3]
	TIM->TIM_PRESCALER=1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	719a      	strb	r2, [r3, #6]

	PWM_voidInit(TIM);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fbf9 	bl	8000750 <PWM_voidInit>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <SPEED_2_init>:
/*
 * speed 2 Init
 * Timer3 CH2   PA7
 */
void SPEED_2_init(TIM_COMP* TIM)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	TIM->TIM_NUM = TIM3;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2202      	movs	r2, #2
 8000f72:	701a      	strb	r2, [r3, #0]
	TIM->TIM_CHANNEL_NUM=CH2;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2202      	movs	r2, #2
 8000f78:	705a      	strb	r2, [r3, #1]
	TIM->PWM_MODE=PWM_MODE1;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	709a      	strb	r2, [r3, #2]
	TIM->PWM_PERIOD=200;   //APB1 timer clock = 1 MHZ
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	22c8      	movs	r2, #200	; 0xc8
 8000f84:	809a      	strh	r2, [r3, #4]
	TIM->PWM_POLARITY=active_high;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	70da      	strb	r2, [r3, #3]
	TIM->TIM_PRESCALER=1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	719a      	strb	r2, [r3, #6]

	PWM_voidInit(TIM);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fbdc 	bl	8000750 <PWM_voidInit>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Encoder_1_init>:

/*
 * ENCODER 1 Init
 */
void Encoder_1_init(Encoder_variables* encoder)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	/* Set Pins and Variables */
	encoder->EncoderResolution = 2050;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f640 0202 	movw	r2, #2050	; 0x802
 8000fae:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line1;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <Encoder_1_init+0x54>)
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_1;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <Encoder_1_init+0x58>)
 8000fe2:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff f8f5 	bl	80001d4 <Encoder_init>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	08000e45 	.word	0x08000e45
 8000ff8:	08000e59 	.word	0x08000e59

08000ffc <Encoder_2_init>:
/*
 * ENCODER 2 Init
 */
void Encoder_2_init(Encoder_variables* encoder)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	/* Set Pins and Variables */
	encoder->EncoderResolution = 2050;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f640 0202 	movw	r2, #2050	; 0x802
 800100a:	811a      	strh	r2, [r3, #8]

	encoder->Encoder_A_Pin = GPIO_PIN2;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	72da      	strb	r2, [r3, #11]
	encoder->Encoder_A_Port = GPIO_PORTA;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	729a      	strb	r2, [r3, #10]
	encoder->Encoder_A_IRQn = EXTI_Line2;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	encoder->Encoder_B_Pin = GPIO_PIN3;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	735a      	strb	r2, [r3, #13]
	encoder->Encoder_B_Port = GPIO_PORTA;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	731a      	strb	r2, [r3, #12]
	encoder->Encoder_B_IRQn = EXTI_Line3;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	encoder->ptr_forward = forward_2;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a06      	ldr	r2, [pc, #24]	; (8001050 <Encoder_2_init+0x54>)
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->ptr_backward = backward_2;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <Encoder_2_init+0x58>)
 800103e:	631a      	str	r2, [r3, #48]	; 0x30

	Encoder_init(encoder);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff f8c7 	bl	80001d4 <Encoder_init>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	08000e6d 	.word	0x08000e6d
 8001054:	08000e81 	.word	0x08000e81

08001058 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800105c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001086:	f000 f811 	bl	80010ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff ff03 	bl	8000e94 <main>

0800108e <LoopForever>:

LoopForever:
  b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   r0, =_estack
 8001090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800109c:	08001114 	.word	0x08001114
  ldr r2, =_sbss
 80010a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010a4:	200000e0 	.word	0x200000e0

080010a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <__libc_init_array>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	4d0d      	ldr	r5, [pc, #52]	; (80010e4 <__libc_init_array+0x38>)
 80010b0:	4c0d      	ldr	r4, [pc, #52]	; (80010e8 <__libc_init_array+0x3c>)
 80010b2:	1b64      	subs	r4, r4, r5
 80010b4:	10a4      	asrs	r4, r4, #2
 80010b6:	2600      	movs	r6, #0
 80010b8:	42a6      	cmp	r6, r4
 80010ba:	d109      	bne.n	80010d0 <__libc_init_array+0x24>
 80010bc:	4d0b      	ldr	r5, [pc, #44]	; (80010ec <__libc_init_array+0x40>)
 80010be:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <__libc_init_array+0x44>)
 80010c0:	f000 f818 	bl	80010f4 <_init>
 80010c4:	1b64      	subs	r4, r4, r5
 80010c6:	10a4      	asrs	r4, r4, #2
 80010c8:	2600      	movs	r6, #0
 80010ca:	42a6      	cmp	r6, r4
 80010cc:	d105      	bne.n	80010da <__libc_init_array+0x2e>
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80010d4:	4798      	blx	r3
 80010d6:	3601      	adds	r6, #1
 80010d8:	e7ee      	b.n	80010b8 <__libc_init_array+0xc>
 80010da:	f855 3b04 	ldr.w	r3, [r5], #4
 80010de:	4798      	blx	r3
 80010e0:	3601      	adds	r6, #1
 80010e2:	e7f2      	b.n	80010ca <__libc_init_array+0x1e>
 80010e4:	0800110c 	.word	0x0800110c
 80010e8:	0800110c 	.word	0x0800110c
 80010ec:	0800110c 	.word	0x0800110c
 80010f0:	08001110 	.word	0x08001110

080010f4 <_init>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr

08001100 <_fini>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	bf00      	nop
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr
